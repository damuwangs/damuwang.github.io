<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>DaMuWang</title>
    <link>https://damuwangs.github.io/</link>
    <description>Recent content on DaMuWang</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 09 Feb 2022 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="https://damuwangs.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    
        <item>
        <title>Demo-JavaScript</title>
        <link>https://damuwangs.github.io/posts/%E7%BC%96%E7%A8%8B/demo-javascript/</link>
        <pubDate>Mon, 02 Aug 2021 00:00:00 +0000</pubDate>
        
        <guid>https://damuwangs.github.io/posts/%E7%BC%96%E7%A8%8B/demo-javascript/</guid>
        <description>DaMuWang https://damuwangs.github.io/posts/%E7%BC%96%E7%A8%8B/demo-javascript/ -&lt;ul&gt;
&lt;li&gt;
&lt;h1 id=&#34;日期时间&#34;&gt;日期、时间&lt;/h1&gt;
&lt;h2 id=&#34;-日期格式化httpscodepeniodamuwangspenrwvjeyb&#34;&gt;-&lt;a href=&#34;https://codepen.io/damuwangs/pen/RwVJeYb&#34;&gt;日期格式化&lt;/a&gt;&lt;/h2&gt;
&lt;h2 id=&#34;-日期计算httpscodepeniodamuwangspenvymrqkneditors0012&#34;&gt;-&lt;a href=&#34;https://codepen.io/damuwangs/pen/vYmrQKN?editors=0012&#34;&gt;日期计算&lt;/a&gt;&lt;/h2&gt;
&lt;h2 id=&#34;-获取当前日期000000到235959httpscodepeniodamuwangspenporvwgr&#34;&gt;-&lt;a href=&#34;https://codepen.io/damuwangs/pen/porvWGR&#34;&gt;获取当前日期00:00:00到23:59:59&lt;/a&gt;&lt;/h2&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h1 id=&#34;校验&#34;&gt;校验&lt;/h1&gt;
&lt;h2 id=&#34;-身份证校验httpscodepeniodamuwangspenjomkdqqeditors0012&#34;&gt;-&lt;a href=&#34;https://codepen.io/damuwangs/pen/jOmKdqq?editors=0012&#34;&gt;身份证校验&lt;/a&gt;&lt;/h2&gt;
&lt;h2 id=&#34;-邮箱校验httpscodepeniodamuwangspenzekjbvy&#34;&gt;-&lt;a href=&#34;https://codepen.io/damuwangs/pen/ZEKjBvy&#34;&gt;邮箱校验&lt;/a&gt;&lt;/h2&gt;
&lt;h2 id=&#34;-电话校验httpscodepeniodamuwangspenrwvbkapeditors0012&#34;&gt;-&lt;a href=&#34;https://codepen.io/damuwangs/pen/RwVBKaP?editors=0012&#34;&gt;电话校验&lt;/a&gt;&lt;/h2&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h1 id=&#34;字符串&#34;&gt;字符串&lt;/h1&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h1 id=&#34;数字&#34;&gt;数字&lt;/h1&gt;
&lt;h2 id=&#34;-数字转汉字大写httpscodepeniodamuwangspeneywjggpeditors0012&#34;&gt;-&lt;a href=&#34;https://codepen.io/damuwangs/pen/eYWjgGP?editors=0012&#34;&gt;数字转汉字大写&lt;/a&gt;&lt;/h2&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h1 id=&#34;数组&#34;&gt;数组&lt;/h1&gt;
&lt;h2 id=&#34;-数组去重httpscodepeniopeneditors0012&#34;&gt;-&lt;a href=&#34;https://codepen.io/pen/?editors=0012&#34;&gt;数组去重&lt;/a&gt;&lt;/h2&gt;
&lt;h2 id=&#34;-计算数组重复元素httpscodepeniodamuwangspenyzvjnmneditors0012&#34;&gt;-&lt;a href=&#34;https://codepen.io/damuwangs/pen/YzVjNmN?editors=0012&#34;&gt;计算数组重复元素&lt;/a&gt;&lt;/h2&gt;
&lt;h2 id=&#34;-深拷贝httpscodepeniodamuwangspennwjbjereditors0012&#34;&gt;-&lt;a href=&#34;https://codepen.io/damuwangs/pen/NWjBjer?editors=0012&#34;&gt;深拷贝&lt;/a&gt;&lt;/h2&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h1 id=&#34;算法&#34;&gt;算法&lt;/h1&gt;
&lt;/li&gt;
&lt;/ul&gt;
- https://damuwangs.github.io/posts/%E7%BC%96%E7%A8%8B/demo-javascript/ - </description>
        </item>
    
    
    
        <item>
        <title>CSS3-动画</title>
        <link>https://damuwangs.github.io/posts/%E7%BC%96%E7%A8%8B/css3-%E5%8A%A8%E7%94%BB/</link>
        <pubDate>Fri, 30 Jul 2021 00:00:00 +0000</pubDate>
        
        <guid>https://damuwangs.github.io/posts/%E7%BC%96%E7%A8%8B/css3-%E5%8A%A8%E7%94%BB/</guid>
        <description>DaMuWang https://damuwangs.github.io/posts/%E7%BC%96%E7%A8%8B/css3-%E5%8A%A8%E7%94%BB/ -&lt;h1 id=&#34;一素转换transform&#34;&gt;一、素转换transform&lt;/h1&gt;
&lt;h2 id=&#34;1元素位置移动translate&#34;&gt;1.元素位置移动translate()&lt;/h2&gt;
&lt;p&gt;参数：左(X轴)，顶部(Y轴)单位px&lt;/p&gt;
&lt;p&gt;样例：&lt;a href=&#34;https://codepen.io/damuwangs/pen/LYymGqJ&#34;&gt;元素位置移动&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;2元素旋转rotate&#34;&gt;2.元素旋转rotate()&lt;/h2&gt;
&lt;p&gt;参数：旋转度数(负值是允许的，这样是元素逆时针旋转)，单位deg&lt;/p&gt;
&lt;p&gt;样例：&lt;a href=&#34;https://codepen.io/damuwangs/pen/qBmYZdQ&#34;&gt;元素旋转&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;3元素缩放scale&#34;&gt;3.元素缩放scale()&lt;/h2&gt;
&lt;p&gt;参数：宽度缩放倍数、高度缩放倍数无参数&lt;/p&gt;
&lt;p&gt;样例：&lt;a href=&#34;https://codepen.io/damuwangs/pen/oNWdxGr&#34;&gt;元素缩放&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;4元素倾斜skew&#34;&gt;4.元素倾斜skew()&lt;/h2&gt;
&lt;p&gt;通过设置倾斜将正方形转化成菱形&lt;/p&gt;
&lt;p&gt;参数：X轴，Y轴单位deg&lt;/p&gt;
&lt;p&gt;样例：&lt;a href=&#34;https://codepen.io/damuwangs/pen/mdmLPKP&#34;&gt;元素倾斜&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;5元素转换matrix&#34;&gt;5.元素转换matrix()&lt;/h2&gt;
&lt;p&gt;方法：将上面的方法合并成一个，matrix 方法有六个参数，包含旋转，缩放，移动（平移）和倾斜功能&lt;/p&gt;
&lt;h1 id=&#34;二过渡transition&#34;&gt;二、过渡transition&lt;/h1&gt;
&lt;p&gt;属性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;transition-property：规定应用过渡的 CSS 属性的名称&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;transition-duration：定义过渡效果花费的时间。默认是 0&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;transition-timing-function：规定过渡效果的时间曲线。默认是 &amp;ldquo;ease&amp;rdquo;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;linear：规定以相同速度开始至结束的过渡效果（等于 cubic-bezier(0,0,1,1)）&lt;/li&gt;
&lt;li&gt;ease：规定慢速开始，然后变快，然后慢速结束的过渡效果（cubic-bezier(0.25,0.1,0.25,1)）&lt;/li&gt;
&lt;li&gt;ease-in：规定以慢速开始的过渡效果（等于 cubic-bezier(0.42,0,1,1)）&lt;/li&gt;
&lt;li&gt;ease-out：规定以慢速结束的过渡效果（等于 cubic-bezier(0,0,0.58,1)）&lt;/li&gt;
&lt;li&gt;ease-in-out：规定以慢速开始和结束的过渡效果（等于 cubic-bezier(0.42,0,0.58,1)）&lt;/li&gt;
&lt;li&gt;cubic-bezier(n,n,n,n)：在 cubic-bezier 函数中定义自己的值。可能的值是 0 至 1 之间的数值&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;transition-delay：规定过渡效果何时开始。默认是 0&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;样例：&lt;a href=&#34;https://codepen.io/damuwangs/pen/ExmLyJy&#34;&gt;blog - CSS3动画 - 过渡&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;三动画animation&#34;&gt;三、动画animation&lt;/h1&gt;
&lt;p&gt;属性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;@keyframes：声明动画&lt;/li&gt;
&lt;li&gt;animation-name：引入动画&lt;/li&gt;
&lt;li&gt;animation-duration： 规定动画完成一个周期所花费的秒或毫秒。默认是 0，单位s&lt;/li&gt;
&lt;li&gt;animation-timing-function：规定动画的速度曲线。默认是 &amp;ldquo;ease&amp;rdquo;，设置同上&lt;/li&gt;
&lt;li&gt;animation-fill-mode：规定当动画不播放时，要应用到元素的样式。&lt;/li&gt;
&lt;li&gt;animation-delay：规定动画何时开始。默认是 0，单位s&lt;/li&gt;
&lt;li&gt;animation-iteration-count：规定动画被播放的次数。
&lt;ul&gt;
&lt;li&gt;填写一个数字，默认是 1&lt;/li&gt;
&lt;li&gt;infinite指定动画应该播放无限次&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;animation-direction：规定动画是否在下一周期逆向地播放，默认是 &amp;ldquo;normal&amp;rdquo;
&lt;ul&gt;
&lt;li&gt;normal：默认值。动画按正常播放&lt;/li&gt;
&lt;li&gt;reverse：动画反向播放&lt;/li&gt;
&lt;li&gt;alternate：动画在奇数次（1、3、5&amp;hellip;）正向播放，在偶数次（2、4、6&amp;hellip;）反向播放&lt;/li&gt;
&lt;li&gt;reverse：动画在奇数次（1、3、5&amp;hellip;）反向播放，在偶数次（2、4、6&amp;hellip;）正向播放&lt;/li&gt;
&lt;li&gt;initial：设置该属性为它的默认值&lt;/li&gt;
&lt;li&gt;inherit：从父元素继承该属性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;animation-play-state：规定动画是否正在运行或暂停，默认是 &amp;ldquo;running&amp;rdquo;
&lt;ul&gt;
&lt;li&gt;paused：指定暂停动画&lt;/li&gt;
&lt;li&gt;running：指定正在运行的动画&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;样例：&lt;a href=&#34;https://codepen.io/damuwangs/pen/xxdjEoz&#34;&gt;blog - CSS3动画 - 动画&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;参考资料&#34;&gt;参考资料&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://segmentfault.com/q/1010000003867335&#34;&gt;如何理解animation-fill-mode及其使用？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://c.runoob.com/codedemo/5528&#34;&gt;HTML+CSS 绘制太阳系各个行星运行轨迹&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://c.runoob.com/codedemo/5645&#34;&gt;CSS 太极旋转图&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
- https://damuwangs.github.io/posts/%E7%BC%96%E7%A8%8B/css3-%E5%8A%A8%E7%94%BB/ - </description>
        </item>
    
    
    
        <item>
        <title>JavaScript-防抖、节流</title>
        <link>https://damuwangs.github.io/posts/%E7%BC%96%E7%A8%8B/javascript-%E9%98%B2%E6%8A%96%E8%8A%82%E6%B5%81/</link>
        <pubDate>Fri, 16 Jul 2021 00:00:00 +0000</pubDate>
        
        <guid>https://damuwangs.github.io/posts/%E7%BC%96%E7%A8%8B/javascript-%E9%98%B2%E6%8A%96%E8%8A%82%E6%B5%81/</guid>
        <description>DaMuWang https://damuwangs.github.io/posts/%E7%BC%96%E7%A8%8B/javascript-%E9%98%B2%E6%8A%96%E8%8A%82%E6%B5%81/ -&lt;h1 id=&#34;防抖&#34;&gt;防抖&lt;/h1&gt;
&lt;h2 id=&#34;概念&#34;&gt;概念&lt;/h2&gt;
&lt;p&gt;任务频繁触发的情况下，只有任务触发的间隔超过制定的时间间隔的时候，任务才会被执行&lt;/p&gt;
&lt;p&gt;将一段时间内连续的多次触发转化为一次触发。&lt;/p&gt;
&lt;h2 id=&#34;应用场景&#34;&gt;应用场景&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;用户在输入框中连续输入一串字符后，只会在输入完后去执行最后一次的查询ajax请求，这样可以有效减少请求次数，节约请求资源；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;window的resize、scroll事件，不断地调整浏览器的窗口大小、或者滚动时会触发对应事件，防抖让其只触发一次；&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;实例&#34;&gt;实例&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h3 id=&#34;非立即执行版&#34;&gt;非立即执行版&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;html&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;lang&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;en&amp;#34;&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;head&lt;/span&gt;&amp;gt;
  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;meta&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;charset&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;UTF-8&amp;#34;&lt;/span&gt;&amp;gt;
  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;meta&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;viewport&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;content&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;width=device-width,initial-scale=1.0,maximum-scale=1.0,user-scalable=no&amp;#34;&lt;/span&gt;&amp;gt;
  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;meta&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;http-equiv&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;X-UA-Compatible&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;content&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;ie=edge&amp;#34;&lt;/span&gt;&amp;gt;
  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;title&lt;/span&gt;&amp;gt;防抖&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;title&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;head&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;body&lt;/span&gt;&amp;gt;
  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;button&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;debounce&amp;#34;&lt;/span&gt;&amp;gt;点我防抖！&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;button&lt;/span&gt;&amp;gt;
  
  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;window&lt;/span&gt;.onload &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;() {
      &lt;span style=&#34;color:#6272a4&#34;&gt;// 1、获取这个按钮，并绑定事件
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;      &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; myDebounce &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.getElementById(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;debounce&amp;#34;&lt;/span&gt;);
      myDebounce.addEventListener(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;click&amp;#34;&lt;/span&gt;, debounce(sayDebounce));
    }
  
    &lt;span style=&#34;color:#6272a4&#34;&gt;// 2、防抖功能函数，接受传参
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; debounce(fn) {
      &lt;span style=&#34;color:#6272a4&#34;&gt;// 4、创建一个标记用来存放定时器的返回值
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;      &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; timeout &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;null&lt;/span&gt;;
      &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;() {
        &lt;span style=&#34;color:#6272a4&#34;&gt;// 5、每次当用户点击/输入的时候，把前一个定时器清除
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;        clearTimeout(timeout);
        &lt;span style=&#34;color:#6272a4&#34;&gt;// 6、然后创建一个新的 setTimeout，
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#6272a4&#34;&gt;// 这样就能保证点击按钮后的 interval 间隔内
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#6272a4&#34;&gt;// 如果用户还点击了的话，就不会执行 fn 函数
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;        timeout &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; setTimeout(() =&amp;gt; {
          fn.call(&lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;, arguments);
        }, &lt;span style=&#34;color:#bd93f9&#34;&gt;1000&lt;/span&gt;);
      };
    }
  
    &lt;span style=&#34;color:#6272a4&#34;&gt;// 3、需要进行防抖的事件处理
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; sayDebounce() {
      &lt;span style=&#34;color:#6272a4&#34;&gt;// ... 有些需要防抖的工作，在这里执行
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;      console.log(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;防抖成功！&amp;#34;&lt;/span&gt;);
    }
  
  &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;body&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;html&lt;/span&gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;创建一个定时器，如果在规定时间内重复触发该事件，就会调用clearTimeout清除掉上一个定时器，重置定时器&lt;/p&gt;
&lt;p&gt;也就是说，这件事本来就是需要等待的，并非立即执行的，如果用户反复点击，那只好重新等待了&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3 id=&#34;立即执行版&#34;&gt;立即执行版&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;html&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;lang&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;en&amp;#34;&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;head&lt;/span&gt;&amp;gt;
  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;meta&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;charset&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;UTF-8&amp;#34;&lt;/span&gt;&amp;gt;
  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;meta&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;viewport&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;content&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;width=device-width,initial-scale=1.0,maximum-scale=1.0,user-scalable=no&amp;#34;&lt;/span&gt;&amp;gt;
  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;meta&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;http-equiv&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;X-UA-Compatible&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;content&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;ie=edge&amp;#34;&lt;/span&gt;&amp;gt;
  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;title&lt;/span&gt;&amp;gt;防抖&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;title&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;head&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;body&lt;/span&gt;&amp;gt;
  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;button&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;debounce&amp;#34;&lt;/span&gt;&amp;gt;点我防抖！&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;button&lt;/span&gt;&amp;gt;
  
  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;window&lt;/span&gt;.onload &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;() {
      &lt;span style=&#34;color:#6272a4&#34;&gt;// 1、获取这个按钮，并绑定事件
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;      &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; myDebounce &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.getElementById(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;debounce&amp;#34;&lt;/span&gt;);
      myDebounce.addEventListener(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;click&amp;#34;&lt;/span&gt;, debounce(sayDebounce));
    }
  
    &lt;span style=&#34;color:#6272a4&#34;&gt;// 2、防抖功能函数，接受传参
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; debounce(fn) {
      &lt;span style=&#34;color:#6272a4&#34;&gt;// 4、创建一个标记用来存放定时器的返回值
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;      &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; timeout &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;null&lt;/span&gt;;
      &lt;span style=&#34;color:#6272a4&#34;&gt;//5.创建一个判断是否可点击值
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;      &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; doit &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt;;
      &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;() {
        &lt;span style=&#34;color:#6272a4&#34;&gt;// 5、当doit为真，既用户重复点击时，清除定时器
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt;(doit)clearTimeout(timeout);
        &lt;span style=&#34;color:#6272a4&#34;&gt;//6.当doit为false时，既用户可点击，再将doit设为true，防止用户重复点击
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;else&lt;/span&gt;{
            fn();
            doit &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt;;
        }
        &lt;span style=&#34;color:#6272a4&#34;&gt;//7.设置定时器，这样就能保证点击按钮后的 interval 间隔内
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#6272a4&#34;&gt;// 如果用户还点击了的话，就不会执行 将doit设为false函数
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;        timeout &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; setTimeout(() =&amp;gt; {
          doit &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;false&lt;/span&gt;;
        }, &lt;span style=&#34;color:#bd93f9&#34;&gt;1000&lt;/span&gt;);
      };
    }
  
    &lt;span style=&#34;color:#6272a4&#34;&gt;// 3、需要进行防抖的事件处理
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; sayDebounce() {
      &lt;span style=&#34;color:#6272a4&#34;&gt;// ... 有些需要防抖的工作，在这里执行
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;      console.log(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;防抖成功！&amp;#34;&lt;/span&gt;);
    }
  
  &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;body&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;html&lt;/span&gt;&amp;gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;节流&#34;&gt;节流&lt;/h1&gt;
&lt;h2 id=&#34;概念-1&#34;&gt;概念&lt;/h2&gt;
&lt;p&gt;指定时间间隔内只会执行一次任务&lt;/p&gt;
&lt;h2 id=&#34;应用场景-1&#34;&gt;应用场景&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;这有点像我们刷抢购一样，当我们在某段时间间隔内触发了多次事件，其实，它只执行一次请求&lt;/li&gt;
&lt;li&gt;鼠标连续不断地触发某事件（如点击），只在单位时间内只触发一次&lt;/li&gt;
&lt;li&gt;在页面的无限加载场景下，需要用户在滚动页面时，每隔一段时间发一次 ajax 请求，而不是在用户停下滚动页面操作时才去请求数据&lt;/li&gt;
&lt;li&gt;监听滚动事件，比如是否滑到底部自动加载更多，用throttle来判断；&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;实例-1&#34;&gt;实例&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;html&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;lang&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;en&amp;#34;&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;head&lt;/span&gt;&amp;gt;
  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;meta&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;charset&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;UTF-8&amp;#34;&lt;/span&gt;&amp;gt;
  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;meta&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;viewport&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;content&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;width=device-width,initial-scale=1.0,maximum-scale=1.0,user-scalable=no&amp;#34;&lt;/span&gt;&amp;gt;
  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;meta&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;http-equiv&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;X-UA-Compatible&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;content&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;ie=edge&amp;#34;&lt;/span&gt;&amp;gt;
  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;title&lt;/span&gt;&amp;gt;节流&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;title&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;head&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;body&lt;/span&gt;&amp;gt;

  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;button&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;throttle&amp;#34;&lt;/span&gt;&amp;gt;点我节流！&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;button&lt;/span&gt;&amp;gt;

  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;window&lt;/span&gt;.onload &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;() {
      &lt;span style=&#34;color:#6272a4&#34;&gt;// 1、获取按钮，绑定点击事件
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;      &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; myThrottle &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.getElementById(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;throttle&amp;#34;&lt;/span&gt;);
      myThrottle.addEventListener(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;click&amp;#34;&lt;/span&gt;, throttle(sayThrottle));
    }

    &lt;span style=&#34;color:#6272a4&#34;&gt;// 2、节流函数体
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; throttle(fn) {
      &lt;span style=&#34;color:#6272a4&#34;&gt;// 4、通过闭包保存一个标记
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;      &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; canRun &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt;;
      &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;() {
        &lt;span style=&#34;color:#6272a4&#34;&gt;// 5、在函数开头判断标志是否为 true，不为 true 则中断函数
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#ff79c6&#34;&gt;!&lt;/span&gt;canRun) {
          &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt;;
        }
        &lt;span style=&#34;color:#6272a4&#34;&gt;// 6、将 canRun 设置为 false，防止执行之前再被执行
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;        canRun &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;false&lt;/span&gt;;
        &lt;span style=&#34;color:#6272a4&#34;&gt;// 7、定时器
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;        setTimeout( () =&amp;gt; {
          fn.call(&lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;, arguments);
          &lt;span style=&#34;color:#6272a4&#34;&gt;// 8、执行完事件（比如调用完接口）之后，重新将这个标志设置为 true
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;          canRun &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt;;
        }, &lt;span style=&#34;color:#bd93f9&#34;&gt;1000&lt;/span&gt;);
      };
    }

    &lt;span style=&#34;color:#6272a4&#34;&gt;// 3、需要节流的事件
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; sayThrottle() {
      console.log(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;节流成功！&amp;#34;&lt;/span&gt;);
    }

  &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;body&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;html&lt;/span&gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;从这个例子可以看出，节流可以防止在某时间间隔内重复发送请求！其和防抖有点相似，但其有本质的区别，虽然都是防止重复触发事件！&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;防抖是需要等待多久时间才能再触发一次事件！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;节流是多久时间内只能触发一次事件！&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&#34;参考资料&#34;&gt;参考资料&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/binguo666/p/10535948.html&#34;&gt;闲聊前端性能&amp;mdash;-防抖、节流、重绘与回流。&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
- https://damuwangs.github.io/posts/%E7%BC%96%E7%A8%8B/javascript-%E9%98%B2%E6%8A%96%E8%8A%82%E6%B5%81/ - </description>
        </item>
    
    
    
        <item>
        <title>Vue3-Teleport</title>
        <link>https://damuwangs.github.io/posts/%E7%BC%96%E7%A8%8B/vue3-teleport/</link>
        <pubDate>Tue, 06 Jul 2021 00:00:00 +0000</pubDate>
        
        <guid>https://damuwangs.github.io/posts/%E7%BC%96%E7%A8%8B/vue3-teleport/</guid>
        <description>DaMuWang https://damuwangs.github.io/posts/%E7%BC%96%E7%A8%8B/vue3-teleport/ -&lt;h1 id=&#34;概念&#34;&gt;概念&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Teleport 是一种能够将我们的模板移动到 DOM中Vue app之外的其他位置的技术，就有点像哆啦A梦的“任意门”&lt;/p&gt;
&lt;p&gt;场景：像 modals,toast 等这样的元素，很多情况下，我们将它完全的和我们的 Vue 应用的 DOM完全剥离，管理起来反而会方便容易很多&lt;/p&gt;
&lt;p&gt;原因在于如果我们嵌套在Vue的某个组件内部，那么处理嵌套组件的定位、z-index和样式就会变得很困难&lt;/p&gt;
&lt;p&gt;另外，像 modals，toast等这样的元素需要使用到 Vue组件的状态（data或者props）的值&lt;/p&gt;
&lt;p&gt;这就是Teleport派上用场的地方。我们可以在组件的逻辑位置写模板代码，这意味着我们可以使用组件的data或props。然后在Vue应用的范围之外渲染它&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;teleport-的使用&#34;&gt;Teleport 的使用&lt;/h1&gt;
&lt;p&gt;index.html中&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;app&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;teleport-target&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;module&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;/src/main.js&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;src/components/HelloWorld.vue中，添加如下，留意to属性跟上面的id选择器一致&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt; &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;button&lt;/span&gt; @&lt;span style=&#34;color:#50fa7b&#34;&gt;click&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;showToast&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;btn&amp;#34;&lt;/span&gt;&amp;gt;打开 toast&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;button&lt;/span&gt;&amp;gt;
  &lt;span style=&#34;color:#6272a4&#34;&gt;&amp;lt;!-- to 属性就是目标位置 --&amp;gt;&lt;/span&gt;
  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;teleport&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;to&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;#teleport-target&amp;#34;&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;v-if&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;visible&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;toast-wrap&amp;#34;&lt;/span&gt;&amp;gt;
      &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;toast-msg&amp;#34;&lt;/span&gt;&amp;gt;我是一个 Toast 文案&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
    &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
  &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;teleport&lt;/span&gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; { ref } from &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;vue&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#ff79c6&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;default&lt;/span&gt; {
  setup() {
    &lt;span style=&#34;color:#6272a4&#34;&gt;// toast 的封装
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; visible &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; ref(&lt;span style=&#34;color:#ff79c6&#34;&gt;false&lt;/span&gt;);
    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; timer;
    &lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; showToast &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; () =&amp;gt; {
      visible.value &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt;;
      clearTimeout(timer);
      timer &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; setTimeout(() =&amp;gt; {
        visible.value &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;false&lt;/span&gt;;
      }, &lt;span style=&#34;color:#bd93f9&#34;&gt;2000&lt;/span&gt;);
    }
    &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; {
      visible,
      showToast
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;效果展示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://damuwangs.github.io/img/Vue3-Teleport/%E6%95%88%E6%9E%9C%E4%B8%80.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;可以看到，我们使用teleport组件，通过to属性，指定该组件渲染的位置与&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;同级，也就是在body下，但是teleport的状态visible又是完全由内部Vue组件控制&lt;/p&gt;
&lt;h1 id=&#34;与-vue组件-一起使用modal&#34;&gt;与 Vue组件 一起使用modal&lt;/h1&gt;
&lt;p&gt;如果&lt;!-- raw HTML omitted --&gt;包含Vue组件，则它仍将是&lt;!-- raw HTML omitted --&gt;父组件的逻辑子组件&lt;/p&gt;
&lt;p&gt;接下来我们以一个modal组件为例&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;app&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;modal-container&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;module&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;/src/main.js&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;teleport&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;to&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;#modal-container&amp;#34;&lt;/span&gt;&amp;gt;
  &lt;span style=&#34;color:#6272a4&#34;&gt;&amp;lt;!-- use the modal component, pass in the prop --&amp;gt;&lt;/span&gt;
  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;modal&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;:show&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;showModal&amp;#34;&lt;/span&gt; @&lt;span style=&#34;color:#50fa7b&#34;&gt;close&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;showModal = false&amp;#34;&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;template&lt;/span&gt; #&lt;span style=&#34;color:#50fa7b&#34;&gt;header&lt;/span&gt;&amp;gt;
      &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;h3&lt;/span&gt;&amp;gt;custom header&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;h3&lt;/span&gt;&amp;gt;
    &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;template&lt;/span&gt;&amp;gt;
  &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;modal&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;teleport&lt;/span&gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; { ref } from &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;vue&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; Modal from &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;./Modal.vue&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#ff79c6&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;default&lt;/span&gt; {
  components&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; {
    Modal
  },
  setup() {
    &lt;span style=&#34;color:#6272a4&#34;&gt;// modal 的封装
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; showModal &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; ref(&lt;span style=&#34;color:#ff79c6&#34;&gt;false&lt;/span&gt;);
    &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; {
      showModal
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在这种情况下，即使在不同的地方渲染Modal，它仍将是当前组件（调用Modal的组件）的子级，并将从中接收show prop&lt;/p&gt;
&lt;p&gt;这也意味着来自父组件的注入按预期工作，并且子组件将嵌套在Vue Devtools中的父组件之下，而不是放在实际内容移动到的位置&lt;/p&gt;
&lt;p&gt;看实际效果以及在Vue Devtool中&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://damuwangs.github.io/img/Vue3-Teleport/%E6%95%88%E6%9E%9C%E4%BA%8C.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;参考资料&#34;&gt;参考资料&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://juejin.cn/post/6874720017863147527&#34;&gt;Vue 3 任意传送门——Teleport&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://juejin.cn/post/6910100912367206414&#34;&gt;vue3.0新特性teleport是啥，用起来真香&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
- https://damuwangs.github.io/posts/%E7%BC%96%E7%A8%8B/vue3-teleport/ - </description>
        </item>
    
    
    
        <item>
        <title>Vue3-组合式API</title>
        <link>https://damuwangs.github.io/posts/%E7%BC%96%E7%A8%8B/vue3-%E7%BB%84%E5%90%88%E5%BC%8Fapi/</link>
        <pubDate>Mon, 05 Jul 2021 00:00:00 +0000</pubDate>
        
        <guid>https://damuwangs.github.io/posts/%E7%BC%96%E7%A8%8B/vue3-%E7%BB%84%E5%90%88%E5%BC%8Fapi/</guid>
        <description>DaMuWang https://damuwangs.github.io/posts/%E7%BC%96%E7%A8%8B/vue3-%E7%BB%84%E5%90%88%E5%BC%8Fapi/ -&lt;h1 id=&#34;概念&#34;&gt;概念&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;通过创建 Vue 组件，我们可以将界面中重复的部分连同其功能一起提取为可重用的代码段。仅此一项就可以使我们的应用在可维护性和灵活性方面走得相当远。然而随着项目的扩大，功能越来越复杂，定义的数据以及对其数据的操作被放在不同的地方，如methods，watch，碎片化使得理解和维护复杂组件变得困难。选项的分离掩盖了潜在的逻辑问题。此外，在处理单个逻辑关注点时，我们必须不断地“跳转”相关代码的选项块，于是出现了组合式api&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;组合式api主要解决的问题就是单业务逻辑代码单文件处理，将一个巨大无比的组件分成无数小的文件模块每个模块只处理很少的业务，通过定义setUp选项，将单逻辑的变量、生命周期以及方法独立成JS，再通过export的方式将需要使用的暴漏出来。Vue3提供的响应式API基本上可以保证我们在JS中实现响应式变量、父子组件传值、生命周期等所有操作，这是其它方式所不具备的&lt;/p&gt;
&lt;h1 id=&#34;为什么要使用组合式-api&#34;&gt;为什么要使用组合式 API&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;h2 id=&#34;组件化的缺点&#34;&gt;组件化的缺点&lt;/h2&gt;
&lt;p&gt;使用 (&lt;code&gt;data&lt;/code&gt;、&lt;code&gt;computed&lt;/code&gt;、&lt;code&gt;methods&lt;/code&gt;、&lt;code&gt;watch&lt;/code&gt;) 组件选项来组织逻辑通常都很有效。然而，当我们的组件开始变得更大时，逻辑关注点的列表也会增长。尤其对于那些一开始没有编写这些组件的人来说，这会导致组件难以阅读和理解&lt;/p&gt;
&lt;p&gt;这种碎片化使得理解和维护复杂组件变得困难。选项的分离掩盖了潜在的逻辑问题。此外，在处理单个逻辑关注点时，我们必须不断地“跳转”相关代码的选项块&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h2 id=&#34;提取公共js方式的缺点&#34;&gt;提取公共JS方式的缺点&lt;/h2&gt;
&lt;p&gt;因为无法获取vue对象，只能编写非业务代码，例如工具方法&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h2 id=&#34;插槽的缺点&#34;&gt;插槽的缺点&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;配置最终出现在模板中，理想情况下，模板应仅包含我们要呈现的内容&lt;/li&gt;
&lt;li&gt;公开的属性仅在模板中可用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h2 id=&#34;mixin方式的缺点&#34;&gt;mixin方式的缺点&lt;/h2&gt;
&lt;p&gt;mixin的解决方案是将vue页面的js部分提取成公共的以供多个相似模块的共用。这种方式的缺点主要由以下几点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如methods,components等，选项会被合并，键冲突的组件会覆盖混入对象的，比如混入对象里有个方法A，组件里也有方法A，这时候在组件里调用的话，执行的是组件里的A方法&lt;/li&gt;
&lt;li&gt;不可知，不易维护因为你可以在mixins里几乎可以加任何代码，props、data、methods、各种东西，就导致如果不了解mixins封装的代码的话，是很难维护的&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;样例&#34;&gt;样例&lt;/h1&gt;
&lt;h2 id=&#34;说明&#34;&gt;说明&lt;/h2&gt;
&lt;p&gt;实现了一个简单的列表功能，包括：列表展示、查看更多、关键字搜索&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;文件名称&lt;/th&gt;
&lt;th&gt;功能描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;app.vue&lt;/td&gt;
&lt;td&gt;主页，引入列表和搜索组件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;app.js&lt;/td&gt;
&lt;td&gt;主页面逻辑，包含：1、初始化列表2、加载更多（接收子组件事件）3、关键字搜索（接收子组件事件）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;panel.vue&lt;/td&gt;
&lt;td&gt;列表组件：接收列表数据渲染数据&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;panel.js&lt;/td&gt;
&lt;td&gt;列表组件逻辑：1、加载更多（emit发送事件）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;search.vue&lt;/td&gt;
&lt;td&gt;搜索组件：点击搜索框切换选中样式，输入关键字刷新列表数据&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;search.js&lt;/td&gt;
&lt;td&gt;搜索组件逻辑：1、点击搜索框样式切换，自动聚集2、搜索值监听(emit发送事件)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;代码&#34;&gt;代码&lt;/h2&gt;
&lt;h3 id=&#34;appvue&#34;&gt;app.vue&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-vue&#34; data-lang=&#34;vue&#34;&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;template&lt;/span&gt;&amp;gt;
  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;app&amp;#34;&lt;/span&gt;&amp;gt;    
    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;Search&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;@search&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;=&amp;#34;search&amp;#34;&lt;/span&gt;/&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;Panel&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;listData&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;listData&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;@loadMore&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;=&amp;#34;loadMore&amp;#34;&lt;/span&gt;/&amp;gt;
  &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;template&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; app from &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;./app.js&amp;#34;&lt;/span&gt;;
&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; Search from &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;./components/Search.vue&amp;#34;&lt;/span&gt;;
&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; Panel from &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;./components/Panel.vue&amp;#34;&lt;/span&gt;;
&lt;span style=&#34;color:#ff79c6&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;default&lt;/span&gt; {
  name&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;app&amp;#34;&lt;/span&gt;,
  components&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; {
    Search,
    Panel
  },   
  setup(props, context){
    &lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; {search, loadMore, listData} &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; app(props, context)
    &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; {
      search,
      loadMore,
      listData
    }
  }
}
&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;appjs&#34;&gt;app.js&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; { ref} from &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;@vue/composition-api&amp;#34;&lt;/span&gt;;
&lt;span style=&#34;color:#ff79c6&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;default&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; app(props, context) {
  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; listData &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; ref([]) &lt;span style=&#34;color:#6272a4&#34;&gt;// 定义响应式变量,切记下方赋值/取值时修改的是.value属性！
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// 初始化列表
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; loadData &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; () =&amp;gt; {      
    &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; [{title&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;标题一&amp;#39;&lt;/span&gt;, author&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;作者一&amp;#39;&lt;/span&gt;},{title&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;标题二&amp;#39;&lt;/span&gt;, author&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;作者二&amp;#39;&lt;/span&gt;},{title&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;标题三&amp;#39;&lt;/span&gt;, author&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;作者三&amp;#39;&lt;/span&gt;},{title&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;标题四&amp;#39;&lt;/span&gt;, author&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;作者四&amp;#39;&lt;/span&gt;},{title&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;标题五&amp;#39;&lt;/span&gt;, author&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;作者五&amp;#39;&lt;/span&gt;}]
  }
  &lt;span style=&#34;color:#6272a4&#34;&gt;// 加载更多
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; loadMore &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; () =&amp;gt; {   
    listData.value &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; [...listData.value, ...[{title&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;标题X&amp;#39;&lt;/span&gt;, author&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;作者X&amp;#39;&lt;/span&gt;}]]
  }
  &lt;span style=&#34;color:#6272a4&#34;&gt;// 搜索
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; search &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; (searchVal) =&amp;gt; {
    &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; (searchVal) {
      listData.value &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; listData.value.filter(item =&amp;gt; {
        &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; (item.title.indexOf(searchVal) &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;) {
          &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; item
        } 
      })         
    } &lt;span style=&#34;color:#ff79c6&#34;&gt;else&lt;/span&gt; {
      listData.value &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; loadData()
    }
  }
  &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; {
    listData,
    loadMore,
    search
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;panelvue&#34;&gt;panel.vue&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-vue&#34; data-lang=&#34;vue&#34;&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;template&lt;/span&gt;&amp;gt;
  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;weui-panel weui-panel_access&amp;#34;&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;v-for&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;=&amp;#34;(n,index) in listData&amp;#34; :key=&amp;#34;index&amp;#34; class=&amp;#34;weui-panel__bd&amp;#34;&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;      &amp;lt;a href=&amp;#34;javascript:void(0);&amp;#34; class=&amp;#34;weui-media-box weui-media-box_appmsg&amp;#34;&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;        &amp;lt;div class=&amp;#34;weui-media-box__bd&amp;#34;&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;          &amp;lt;h4 class=&amp;#34;weui-media-box__title&amp;#34; v-text=&amp;#34;n.title&amp;#34;&amp;gt;&amp;lt;/h4&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;          &amp;lt;p class=&amp;#34;weui-media-box__desc&amp;#34; v-text=&amp;#34;n.author&amp;#34;&amp;gt;&amp;lt;/p&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;        &amp;lt;/div&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;      &amp;lt;/a&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;    &amp;lt;/div&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;    &amp;lt;div @click=&amp;#34;loadMore&amp;#34; class=&amp;#34;weui-panel__ft&amp;#34;&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;      &amp;lt;a href=&amp;#34;javascript:void(0);&amp;#34; class=&amp;#34;weui-cell weui-cell_access weui-cell_link&amp;#34;&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;        &amp;lt;div class=&amp;#34;weui-cell__bd&amp;#34;&amp;gt;查看更多&amp;lt;/div&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;        &amp;lt;span class=&amp;#34;weui-cell__ft&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt;&amp;gt;
      &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;
    &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
  &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;template&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; { reactive, toRefs} from &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;@vue/composition-api&amp;#34;&lt;/span&gt;;
&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; pane from &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;./pane.js&amp;#34;&lt;/span&gt;;
&lt;span style=&#34;color:#ff79c6&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;default&lt;/span&gt; {
  props&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt;[&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;listData&amp;#39;&lt;/span&gt;],
  setup(props, context) {
    &lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; {loadMore} &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; pane(props, context)
    &lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; state &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; reactive({
    })     
    &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; {
      ...toRefs(state),
      loadMore
    }
  }
}
&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;paneljs&#34;&gt;panel.js&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;default&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; pane(props, context) {
  &lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; loadMore &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; () =&amp;gt; {
    context.emit(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;loadMore&amp;#34;&lt;/span&gt;)
  }
  &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; {
    loadMore
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;searchvue&#34;&gt;search.vue&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-vue&#34; data-lang=&#34;vue&#34;&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;template&lt;/span&gt;&amp;gt;
  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;[&amp;#39;weui-search-bar&amp;#39;, {&amp;#39;weui-search-bar_focusing&amp;#39;:isFocus}]&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;searchBar&amp;#34;&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;form&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;weui-search-bar__form&amp;#34;&lt;/span&gt;&amp;gt;
      &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;weui-search-bar__box&amp;#34;&lt;/span&gt;&amp;gt;
        &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;weui-icon-search&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;i&lt;/span&gt;&amp;gt;
        &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;input&lt;/span&gt;
          &lt;span style=&#34;color:#ff79c6&#34;&gt;v-model&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;=&amp;#34;searchValue&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;          ref=&amp;#34;inputElement&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;          type=&amp;#34;search&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;          class=&amp;#34;weui-search-bar__input&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;          id=&amp;#34;searchInput&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;          placeholder=&amp;#34;搜索&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;          required
&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;        /&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;        &amp;lt;a href=&amp;#34;javascript:&amp;#34; class=&amp;#34;weui-icon-clear&amp;#34; id=&amp;#34;searchClear&amp;#34;&amp;gt;&amp;lt;/a&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;      &amp;lt;/div&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;      &amp;lt;label @click=&amp;#34;toggle&amp;#34; class=&amp;#34;weui-search-bar__label&amp;#34; id=&amp;#34;searchText&amp;#34;&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;        &amp;lt;i class=&amp;#34;weui-icon-search&amp;#34;&amp;gt;&amp;lt;/i&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;        &amp;lt;span&amp;gt;搜索&amp;lt;/span&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;      &amp;lt;/label&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;    &amp;lt;/form&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;    &amp;lt;a @click=&amp;#34;toggle&amp;#34; href=&amp;#34;javascript:&amp;#34; class=&amp;#34;weui-search-bar__cancel-btn&amp;#34; id=&amp;#34;searchCancel&amp;#34;&lt;/span&gt;&amp;gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;取消&lt;/span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;
  &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;template&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; search from &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;./search.js&amp;#34;&lt;/span&gt;;
&lt;span style=&#34;color:#ff79c6&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;default&lt;/span&gt; {
  setup(props, context) {
    &lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; {searchValue, isFocus, inputElement,  toggle} &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; search(props, context)
    &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; {
      toggle,
      searchValue, 
      isFocus, 
      inputElement
    }
  }
}
&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;searchjs&#34;&gt;search.js&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; {reactive, toRefs, watch} from &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;@vue/composition-api&amp;#34;&lt;/span&gt;;
&lt;span style=&#34;color:#ff79c6&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;default&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; search(props, context) {
  &lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; search &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; reactive({
    searchValue&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;,
    isFocus&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;false&lt;/span&gt;,
    inputElement&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;null&lt;/span&gt;
  })
  &lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; searchRefs &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; toRefs(search); &lt;span style=&#34;color:#6272a4&#34;&gt;// 定义一个新的对象，它本身不具备响应性，但是它的字段全部是ref变量
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// 切换搜索框状态的方法
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; toggle &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; () =&amp;gt; {
    search.inputElement.focus() &lt;span style=&#34;color:#6272a4&#34;&gt;// 让点击搜索后出现的输入框自动聚焦
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    search.isFocus &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;!&lt;/span&gt;search.isFocus
  }
  &lt;span style=&#34;color:#6272a4&#34;&gt;// 监听搜索框的值
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  watch(
    () =&amp;gt; {
      &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; search.searchValue
    },
    () =&amp;gt; {
      context.emit(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;search&amp;#34;&lt;/span&gt;, search.searchValue)
    }
  )
  &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; {
    ...searchRefs, &lt;span style=&#34;color:#6272a4&#34;&gt;// 在这里结构toRefs对象才能继续保持响应式
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    toggle
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;响应式&#34;&gt;响应式&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h2 id=&#34;setup&#34;&gt;setup&lt;/h2&gt;
&lt;p&gt;概念：在组件创建之前执行，一旦 &lt;code&gt;props&lt;/code&gt; 被解析，就将作为组合式 API 的入口&lt;/p&gt;
&lt;p&gt;参数：&lt;/p&gt;
&lt;p&gt;1、props&lt;/p&gt;
&lt;p&gt;响应式的，当传入新的 prop 时，它将被更新&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;default&lt;/span&gt; {
  props&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; {
    title&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;String&lt;/span&gt;
  },
  setup(props) {
    console.log(props.title)j
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;2、context&lt;/p&gt;
&lt;p&gt;context是一个普通的 JavaScript 对象，它暴露组件的三个 property&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;default&lt;/span&gt; {
  setup(props, context) {
    &lt;span style=&#34;color:#6272a4&#34;&gt;// Attribute (非响应式对象)
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    console.log(context.attrs)
  
    &lt;span style=&#34;color:#6272a4&#34;&gt;// 插槽 (非响应式对象)
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    console.log(context.slots)
  
    &lt;span style=&#34;color:#6272a4&#34;&gt;// 触发事件 (方法)
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    console.log(context.emit)
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;attrs和slots是有状态的对象，它们总是会随组件本身的更新而更新。这意味着你应该避免对它们进行解构，并始终以 attrs.x或slots.x的方式引用 property。请注意，与props不同，attrs和slots是非响应式的。如果你打算根据attrs或slots更改应用副作用，那么应该在onUpdated生命周期钩子中执行此操作&lt;/p&gt;
&lt;p&gt;setup注册生命周期钩子&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; {onMounted} from &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;@vue/composition-api&amp;#34;&lt;/span&gt;;
&lt;span style=&#34;color:#ff79c6&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;default&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; pane(props, context) {
  onMounted(() =&amp;gt; {
      &lt;span style=&#34;color:#6272a4&#34;&gt;// 业务逻辑
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  })
  &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; {    
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;watch响应式更改&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; {watch} from &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;@vue/composition-api&amp;#34;&lt;/span&gt;;
&lt;span style=&#34;color:#ff79c6&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;default&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; search(props, context) {
  watch(
    () =&amp;gt; {
      &lt;span style=&#34;color:#6272a4&#34;&gt;// 监听的值	
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;      &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; search.searchValue
    },
    () =&amp;gt; {
      &lt;span style=&#34;color:#6272a4&#34;&gt;// 业务逻辑
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;      context.emit(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;search&amp;#34;&lt;/span&gt;, search.searchValue)
    }
  )
  &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; {
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;独立的computed属性&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; {computed} from &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;@vue/composition-api&amp;#34;&lt;/span&gt;;
&lt;span style=&#34;color:#ff79c6&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;default&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; search(props, context) {
  newsComputed&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; computed(() =&amp;gt; {
      &lt;span style=&#34;color:#6272a4&#34;&gt;// 业务逻辑
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  })
  &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; {  
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;h2 id=&#34;ref&#34;&gt;ref&lt;/h2&gt;
&lt;p&gt;创建单个对象的响应对象，取值/赋值时需要使用.value&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; count &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; ref(&lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;)
console.log(count.value) &lt;span style=&#34;color:#6272a4&#34;&gt;// 0
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;count.value&lt;span style=&#34;color:#ff79c6&#34;&gt;++&lt;/span&gt;
console.log(count.value) &lt;span style=&#34;color:#6272a4&#34;&gt;// 1
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;h2 id=&#34;torefs&#34;&gt;toRefs&lt;/h2&gt;
&lt;p&gt;从组合式函数返回响应式对象&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; state &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; reactive({
  foo&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;,
  bar&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;
})
&lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; stateAsRefs &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; toRefs(state)
&lt;span style=&#34;color:#6272a4&#34;&gt;// ref 和原始 property 已经“链接”起来了
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;state.foo&lt;span style=&#34;color:#ff79c6&#34;&gt;++&lt;/span&gt;
console.log(stateAsRefs.foo.value) &lt;span style=&#34;color:#6272a4&#34;&gt;// 2
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;stateAsRefs.foo.value&lt;span style=&#34;color:#ff79c6&#34;&gt;++&lt;/span&gt;
console.log(state.foo) &lt;span style=&#34;color:#6272a4&#34;&gt;// 3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;参考资料&#34;&gt;参考资料&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/Wscats/vue-cli&#34;&gt;组合式API的使用示例&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://vue3.chengpeiquan.com/&#34;&gt;Vue3.0学习教程与实战案例&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
- https://damuwangs.github.io/posts/%E7%BC%96%E7%A8%8B/vue3-%E7%BB%84%E5%90%88%E5%BC%8Fapi/ - </description>
        </item>
    
    
    
        <item>
        <title>Vue2-nextTick</title>
        <link>https://damuwangs.github.io/posts/%E7%BC%96%E7%A8%8B/vue2-nexttick/</link>
        <pubDate>Mon, 28 Jun 2021 00:00:00 +0000</pubDate>
        
        <guid>https://damuwangs.github.io/posts/%E7%BC%96%E7%A8%8B/vue2-nexttick/</guid>
        <description>DaMuWang https://damuwangs.github.io/posts/%E7%BC%96%E7%A8%8B/vue2-nexttick/ -&lt;h1 id=&#34;概念&#34;&gt;概念&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;官方文档说明：在下次 DOM 更新循环结束之后执行延迟回调。在修改数据之后立即使用这个方法，获取更新后的 DOM&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;异步解析&#34;&gt;异步解析&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Vue 实现响应式并不是数据发生变化之后 DOM 立即变化，而是按一定的策略进行 DOM 的更新&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;​	简而言之，异步接信息的运行机制如下&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;所有同步任务都在主线程上执行，形成一个&lt;a href=&#34;https://www.ruanyifeng.com/blog/2013/11/stack.html&#34;&gt;执行栈&lt;/a&gt;（execution context stack）&lt;/li&gt;
&lt;li&gt;主线程之外，还存在一个&amp;quot;任务队列&amp;rdquo;（task queue）。只要异步任务有了运行结果，就在&amp;quot;任务队列&amp;quot;之中放置一个事件&lt;/li&gt;
&lt;li&gt;一旦&amp;quot;执行栈&amp;quot;中的所有同步任务执行完毕，系统就会读取&amp;quot;任务队列&amp;rdquo;，看看里面有哪些事件。那些对应的异步任务，于是结束等待状态，进入执行栈，开始执行&lt;/li&gt;
&lt;li&gt;主线程不断重复上面的第三步&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;事件循环说明&#34;&gt;事件循环说明&lt;/h2&gt;
&lt;p&gt;简单来说，Vue 在修改数据后，视图不会立刻更新，而是等&lt;strong&gt;同一事件循环&lt;/strong&gt;中的所有数据变化完成之后，再统一进行视图更新&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;//改变数据
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;vm.message &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;changed&amp;#39;&lt;/span&gt;

&lt;span style=&#34;color:#6272a4&#34;&gt;//想要立即使用更新后的DOM。这样不行，因为设置message后DOM还没有更新
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;console.log(vm.$el.textContent) &lt;span style=&#34;color:#6272a4&#34;&gt;// 并不会得到&amp;#39;changed&amp;#39;
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#6272a4&#34;&gt;//这样可以，nextTick里面的代码会在DOM更新后执行
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;Vue.nextTick(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;(){
    console.log(vm.$el.textContent) &lt;span style=&#34;color:#6272a4&#34;&gt;// 可以得到&amp;#39;changed&amp;#39;
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://damuwangs.github.io/img/Vue2-nextTick/%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;本次更新循环&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;首先修改数据，这是同步任务。同一事件循环的所有同步任务都在主线程上执行，形成一个执行栈，此时还未涉及DOM&lt;/li&gt;
&lt;li&gt;Vue开启一个异步队列，并缓冲再次事件循环中发生的所有数据改变。如果同一个watcher被多次执行，只会被推入到队列中一次&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;下次更新循环&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;同步任务执行完毕，开始执行异步watcher队列的任务，更新DOM。Vue在内部尝试对异步队列使用原生的Promise.then和messageChannel方法，如果执行环境不支持，会采用setTimeOut(fn,0)代替&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;下次更新循环结束之后&lt;/p&gt;
&lt;p&gt;此时通过Vue.nextTick获取到改变后的DOM。通过setTimeOut(fn,0)也可以同样获取到&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;简单总结事件循环：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;同步代码执行&lt;/li&gt;
&lt;li&gt;查找异步队列，推入执行栈，执行Vue.nextTick[事件1]&lt;/li&gt;
&lt;li&gt;查找异步队列，推入执行栈，执行Vue.nextTick[事件2]&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;总之，异步是单独的一个tick，不会和同步在同一个tick里发生，也是DOM不会马上改变的原因&lt;/p&gt;
&lt;h1 id=&#34;应用场景&#34;&gt;应用场景&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;在 created 和 mounted 阶段，如果需要操作渲染后的试图，也要使用 nextTick 方法。&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;官方文档说明：注意 mounted 不会承诺所有的子组件也都一起被挂载。如果你希望等到整个视图都渲染完毕，可以用 vm.$nextTick 替换掉 mounted&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;created(){
    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; that&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;
    that.$nextTick(
    	&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;(){  
    		&lt;span style=&#34;color:#6272a4&#34;&gt;//不使用this.$nextTick()方法会报错
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;        	that.$refs.aa.innerHTML &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;created中更改了按钮内容&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#6272a4&#34;&gt;// 写入到DOM元素
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;        }
    })
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;当项目中你想在改变 DOM 元素的数据后基于新的 dom 做点什么，对新 DOM 一系列的 js 操作都需要放进 Vue.nextTick()的回调函数中；通俗的理解是：更改数据后当你想立即使用 js 操作新的视图的时候需要使用它&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-vue&#34; data-lang=&#34;vue&#34;&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;template&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;app&amp;#34;&lt;/span&gt;&amp;gt;
        &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;ref&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;msgDiv&amp;#34;&lt;/span&gt;&amp;gt;{{msg}}&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
      	&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;v-if&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;=&amp;#34;msg1&amp;#34;&lt;/span&gt;&amp;gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;Message&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;got&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;outside&lt;/span&gt; $&lt;span style=&#34;color:#50fa7b&#34;&gt;nextTick&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; {{&lt;span style=&#34;color:#50fa7b&#34;&gt;msg1&lt;/span&gt;}}&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
      	&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;v-if&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;=&amp;#34;msg2&amp;#34;&lt;/span&gt;&amp;gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;Message&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;got&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;inside&lt;/span&gt; $&lt;span style=&#34;color:#50fa7b&#34;&gt;nextTick&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; {{&lt;span style=&#34;color:#50fa7b&#34;&gt;msg2&lt;/span&gt;}}&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
      	&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;v-if&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;=&amp;#34;msg3&amp;#34;&lt;/span&gt;&amp;gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;Message&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;got&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;outside&lt;/span&gt; $&lt;span style=&#34;color:#50fa7b&#34;&gt;nextTick&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; {{&lt;span style=&#34;color:#50fa7b&#34;&gt;msg3&lt;/span&gt;}}&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
      	&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;button&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;@click&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;=&amp;#34;changeMsg&amp;#34;&lt;/span&gt;&amp;gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;Change&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;the&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;Message&lt;/span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;button&lt;/span&gt;&amp;gt;
    &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;template&lt;/span&gt;&amp;gt;
 
&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;span style=&#34;color:#ff79c6&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;default&lt;/span&gt; {
    data () {
        &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; {
            msg&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Hello Vue.&amp;#39;&lt;/span&gt;,
            msg1&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;,
            msg2&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;,
            msg3&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;
        }
    },
    methods&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt;{
        changeMsg() {
            &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.msg &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Hello world.&amp;#34;&lt;/span&gt;
            &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.msg1 &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.$refs.msgDiv.innerHTML
            &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.$nextTick(() =&amp;gt; {
                &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.msg2 &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.$refs.msgDiv.innerHTML
            })
            &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.msg3 &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.$refs.msgDiv.innerHTML
        }
    }
}    
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;点击前&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://damuwangs.github.io/img/Vue2-nextTick/%E7%82%B9%E5%87%BB%E5%89%8D.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;点击后&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://damuwangs.github.io/img/Vue2-nextTick/%E7%82%B9%E5%87%BB%E5%90%8E.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;从图中可以得知：msg1和msg3显示的内容还是变换之前的，而msg2显示的内容是变换之后的&lt;/p&gt;
&lt;h1 id=&#34;通过一个实例理解nexttick&#34;&gt;通过一个实例理解nextTick&lt;/h1&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-vue&#34; data-lang=&#34;vue&#34;&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;template&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;content&amp;#34;&lt;/span&gt;&amp;gt;
        &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;ul&lt;/span&gt;&amp;gt;
            &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;v-for&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;=&amp;#34;item in list1&amp;#34; :key=&amp;#34;item&amp;#34;&amp;gt;{{item}}&amp;lt;/li&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;        &amp;lt;/ul&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;        &amp;lt;ul&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;       	    &amp;lt;li v-for=&amp;#34;item in list2&amp;#34; :key=&amp;#34;item&amp;#34;&amp;gt;{{item}}&amp;lt;/li&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;        &amp;lt;/ul&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;        &amp;lt;ol&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;            &amp;lt;li v-for=&amp;#34;item in list3&amp;#34; :key=&amp;#34;item&amp;#34;&amp;gt;{{item}}&amp;lt;/li&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;        &amp;lt;/ol&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;        &amp;lt;ol&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;            &amp;lt;li v-for=&amp;#34;item in list4&amp;#34; :key=&amp;#34;item&amp;#34;&amp;gt;{{item}}&amp;lt;/li&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;        &amp;lt;/ol&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;        &amp;lt;ol&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;            &amp;lt;li v-for=&amp;#34;item in list5&amp;#34; &lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:key&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;=&amp;#34;item&amp;#34;&lt;/span&gt;&amp;gt;{{&lt;span style=&#34;color:#50fa7b&#34;&gt;item&lt;/span&gt;}}&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt;&amp;gt;
        &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;ol&lt;/span&gt;&amp;gt;
    &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;template&lt;/span&gt;&amp;gt;

&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; {dateFormat} from &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;@/components/JS方法库/util/common.js&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#ff79c6&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;default&lt;/span&gt; {
  data () {
        &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; {
            list1&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; [],
            list2&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; [],
            list3&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; [],
            list4&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; [],
            list5&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; []
        }
    },
    created(){
        &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.composeList12()
        &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.composeList34()
        &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.composeList5()
        &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.$nextTick(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;() {
            &lt;span style=&#34;color:#6272a4&#34;&gt;// DOM 更新了
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;            console.log(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;[7]同步视图更新 - &amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; dateFormat(&lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Date&lt;/span&gt;() ,&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;yyyy-MM-dd hh:mm:ss&amp;#39;&lt;/span&gt;),&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.querySelectorAll(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;li&amp;#39;&lt;/span&gt;).length)
            console.log(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;——————————同步视图更新完成——————————&amp;#39;&lt;/span&gt;)
        })
    },
 
    methods&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; {
        composeList12() {
            &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; i &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;10000&lt;/span&gt;; i&lt;span style=&#34;color:#ff79c6&#34;&gt;++&lt;/span&gt;) {
                &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.$set(&lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.list1, i, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;I am a 测试信息～～啦啦啦&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; i)
            }
            console.log(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;——————————开始更新同步数据——————————&amp;#39;&lt;/span&gt;)
            console.log(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;[1]同步数据更新 - &amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; dateFormat(&lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Date&lt;/span&gt;() ,&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;yyyy-MM-dd hh:mm:ss&amp;#39;&lt;/span&gt;),&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.querySelectorAll(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;li&amp;#39;&lt;/span&gt;).length)

            &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; i &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;10000&lt;/span&gt;; i&lt;span style=&#34;color:#ff79c6&#34;&gt;++&lt;/span&gt;) {
                &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.$set(&lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.list2, i, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;I am a 测试信息～～啦啦啦&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; i)
            }
            console.log(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;[2]同步数据更新 - &amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; dateFormat(&lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Date&lt;/span&gt;() ,&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;yyyy-MM-dd hh:mm:ss&amp;#39;&lt;/span&gt;),&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.querySelectorAll(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;li&amp;#39;&lt;/span&gt;).length)

            &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.$nextTick(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;() {
                &lt;span style=&#34;color:#6272a4&#34;&gt;// DOM 更新了
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;                console.log(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;[1][2]同步视图更新 - &amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; dateFormat(&lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Date&lt;/span&gt;() ,&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;yyyy-MM-dd hh:mm:ss&amp;#39;&lt;/span&gt;),&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.querySelectorAll(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;li&amp;#39;&lt;/span&gt;).length)
            })
        },
        composeList34() {
            &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; i &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;10000&lt;/span&gt;; i&lt;span style=&#34;color:#ff79c6&#34;&gt;++&lt;/span&gt;) {
                &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.$set(&lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.list3, i, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;I am a 测试信息～～啦啦啦&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; i)
            }
            console.log(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;[3]同步数据更新 - &amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; dateFormat(&lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Date&lt;/span&gt;() ,&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;yyyy-MM-dd hh:mm:ss&amp;#39;&lt;/span&gt;),&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.querySelectorAll(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;li&amp;#39;&lt;/span&gt;).length)

            &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.$nextTick(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;() {
                &lt;span style=&#34;color:#6272a4&#34;&gt;// DOM 更新了
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;                console.log(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;[3]同步视图更新 - &amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; dateFormat(&lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Date&lt;/span&gt;() ,&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;yyyy-MM-dd hh:mm:ss&amp;#39;&lt;/span&gt;),&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.querySelectorAll(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;li&amp;#39;&lt;/span&gt;).length)
            })

            setTimeout(&lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.setTimeout1, &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;)
        },
        setTimeout1() {
            &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; i &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;10000&lt;/span&gt;; i&lt;span style=&#34;color:#ff79c6&#34;&gt;++&lt;/span&gt;) {
                &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.$set(&lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.list4, i, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;I am a 测试信息～～啦啦啦&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; i)
            }
            console.log(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;——————————开始更新异步数据——————————&amp;#39;&lt;/span&gt;)
            console.log(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;[4]异步数据更新 - &amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; dateFormat(&lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Date&lt;/span&gt;() ,&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;yyyy-MM-dd hh:mm:ss&amp;#39;&lt;/span&gt;),&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.querySelectorAll(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;li&amp;#39;&lt;/span&gt;).length)

            &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.$nextTick(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;() {
                &lt;span style=&#34;color:#6272a4&#34;&gt;// DOM 更新了
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;                console.log(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;[4]异步视图更新 - &amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; dateFormat(&lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Date&lt;/span&gt;() ,&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;yyyy-MM-dd hh:mm:ss&amp;#39;&lt;/span&gt;),&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.querySelectorAll(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;li&amp;#39;&lt;/span&gt;).length)
            })
        },
        composeList5() {
            &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.$nextTick(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;() {
                &lt;span style=&#34;color:#6272a4&#34;&gt;// DOM 更新了
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;                console.log(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;[5]同步视图更新 - &amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; dateFormat(&lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Date&lt;/span&gt;() ,&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;yyyy-MM-dd hh:mm:ss&amp;#39;&lt;/span&gt;),&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.querySelectorAll(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;li&amp;#39;&lt;/span&gt;).length)
            })

            setTimeout(&lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.setTimeout2, &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;)
        },
        setTimeout2() {
            &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; i &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;10000&lt;/span&gt;; i&lt;span style=&#34;color:#ff79c6&#34;&gt;++&lt;/span&gt;) {
                &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.$set(&lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.list5, i, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;I am a 测试信息～～啦啦啦&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; i)
            }
            console.log(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;[6]异步数据更新 - &amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; dateFormat(&lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Date&lt;/span&gt;() ,&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;yyyy-MM-dd hh:mm:ss&amp;#39;&lt;/span&gt;),&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.querySelectorAll(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;li&amp;#39;&lt;/span&gt;).length)

            &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.$nextTick(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;() {
                &lt;span style=&#34;color:#6272a4&#34;&gt;// DOM 更新了
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;                console.log(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;[6]异步视图更新 - &amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; dateFormat(&lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Date&lt;/span&gt;() ,&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;yyyy-MM-dd hh:mm:ss&amp;#39;&lt;/span&gt;),&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.querySelectorAll(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;li&amp;#39;&lt;/span&gt;).length)
                console.log(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;——————————异步视图更新完成——————————&amp;#39;&lt;/span&gt;)
            })
        },
    }
}
&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;运行结果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://damuwangs.github.io/img/Vue2-nextTick/%E5%AE%9E%E4%BE%8B.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;通过list1、2、3验证，处在同步代码中的DOM更新情况及nextTick的触发时机&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;通过list3、list4验证，同步代码及异步代码中Dom更新及nextTick触发的区别&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;list4、list5对比验证，多个异步代码中nextTick触发的区别&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;通过在视图更新后获取DOM中&lt;!-- raw HTML omitted --&gt;的数量，判断nextTick序列渲染的时间点&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;参考资料&#34;&gt;参考资料&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://segmentfault.com/a/1190000012861862&#34;&gt;Vue.nextTick 的原理和用途&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
- https://damuwangs.github.io/posts/%E7%BC%96%E7%A8%8B/vue2-nexttick/ - </description>
        </item>
    
    
    
        <item>
        <title>Vue2-刷新组件</title>
        <link>https://damuwangs.github.io/posts/%E7%BC%96%E7%A8%8B/vue2-%E5%88%B7%E6%96%B0%E7%BB%84%E4%BB%B6/</link>
        <pubDate>Mon, 28 Jun 2021 00:00:00 +0000</pubDate>
        
        <guid>https://damuwangs.github.io/posts/%E7%BC%96%E7%A8%8B/vue2-%E5%88%B7%E6%96%B0%E7%BB%84%E4%BB%B6/</guid>
        <description>DaMuWang https://damuwangs.github.io/posts/%E7%BC%96%E7%A8%8B/vue2-%E5%88%B7%E6%96%B0%E7%BB%84%E4%BB%B6/ -&lt;h1 id=&#34;刷新组件&#34;&gt;刷新组件&lt;/h1&gt;
&lt;h2 id=&#34;provideinject-结合-v-if&#34;&gt;provide、inject 结合 v-if&lt;/h2&gt;
&lt;p&gt;这对选项需要一起使用，以允许一个根组件向其所有子组件注入一个依赖，实现原理就是通过控制router-view 的显示与隐藏，来重渲染路由区域，重而达到页面刷新的效果，show -&amp;gt; false -&amp;gt; show&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;修改app.vue，利用 v-if 可以刷新页面的属性，同时使用 provide 和 inject 将祖先节点的数据传递给子代节点&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-vue&#34; data-lang=&#34;vue&#34;&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;template&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;app&amp;#34;&lt;/span&gt;&amp;gt;
        &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;router-view&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;v-if&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;=&amp;#34;isRouterAlive&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#50fa7b&#34;&gt;router&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;-view&lt;/span&gt;&amp;gt;
    &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;template&lt;/span&gt;&amp;gt;
    
&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;span style=&#34;color:#ff79c6&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;default&lt;/span&gt; {
    name&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;App&amp;#39;&lt;/span&gt;,
    provide (){
        &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; {
            reload&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.reload
        }
    },
    data(){
        &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; {
            isRouterAlive&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt;
        }
    },
    methods&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt;{
        reload (){
            &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.isRouterAlive &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;false&lt;/span&gt;
            &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.$nextTick(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;(){
                &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.isRouterAlive &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt;
            })
        }
   }
}
&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在要刷新的子路由页面引入inject,然后执行reload事件即可刷新页面&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;default&lt;/span&gt; {    
    inject&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt;[&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;reload&amp;#39;&lt;/span&gt;],
    data() {
        &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; {}
    },
    methods&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; {
        reflesh(){
            &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.reload()
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;forceupdate&#34;&gt;forceUpdate&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;default&lt;/span&gt; {
    methods&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; {
        handleUpdateClick() {
            &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.$forceUpdate()
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;由于一些嵌套特别深的数据，导致数据更新了，但是页面却没有重新渲染。我遇到的一个情况是，v-for遍历数据渲染，当方法中处理相应数组数据时，数组改变了，但是页面却没有重新渲染&lt;/p&gt;
&lt;p&gt;解决方法：运用 &lt;code&gt;this.$forceUpdate()&lt;/code&gt;强制刷新，解决v-for更新数据不重新渲染页面&lt;/p&gt;
&lt;p&gt;官方解释：迫使 Vue 实例重新渲染。注意它仅仅影响实例本身和插入插槽内容的子组件，而不是所有子组件&lt;/p&gt;
&lt;h2 id=&#34;修改组件key值&#34;&gt;修改组件key值&lt;/h2&gt;
&lt;p&gt;key-changing的原理很简单，vue使用&lt;code&gt;key&lt;/code&gt;标记组件身份，当&lt;code&gt;key&lt;/code&gt;改变时就是释放原始组件，重新加载新的组件&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-vue&#34; data-lang=&#34;vue&#34;&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;template&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
        &lt;span style=&#34;color:#6272a4&#34;&gt;&amp;lt;!--&lt;/span&gt; 父组件 &lt;span style=&#34;color:#ff79c6&#34;&gt;--&amp;gt;&lt;/span&gt;
        &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
            &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;button&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;@click&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;=&amp;#34;reLoad&amp;#34;&lt;/span&gt;&amp;gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;点击重新渲染子组件&lt;/span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;button&lt;/span&gt;&amp;gt;
        &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
        &amp;lt;!-- &lt;span style=&#34;color:#50fa7b&#34;&gt;内容库子组件&lt;/span&gt; --&amp;gt;
        &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;lib-window&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;:key&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;=&amp;#34;time&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;:channelCode&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;=&amp;#34;searchChannelCode&amp;#34;&lt;/span&gt;&amp;gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;/lib-window&amp;gt;
    &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;template&lt;/span&gt;&amp;gt;
 
&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; children from &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;@/components/parent/children&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#ff79c6&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;default&lt;/span&gt; {
    name&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;contentLib&amp;#39;&lt;/span&gt;,
    components&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; { libWindow },
    data () {
        &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; {
            time&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;
        }
    },
    methods&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; {
        reLoad () {
            &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.time &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Date&lt;/span&gt;().getTime()
        }
    }
}
&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;eventhub&#34;&gt;eventHub&lt;/h2&gt;
&lt;p&gt;一般比较适合毫无关系的页面之间的刷新，如页面添加了keep-alive缓存，但是又需要在特定操作下重新初始化数据&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;main.js&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// 给Vue函数添加一个原型属性$eventHub
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;Vue.prototype.$eventHub &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; Vue.prototype.$eventHub &lt;span style=&#34;color:#ff79c6&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; Vue()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;页面A&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// 一般情况下为了避免重名需要给事件名后面加唯一标记
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; timestamp &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Date&lt;/span&gt;.parse(&lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Date&lt;/span&gt;())
&lt;span style=&#34;color:#6272a4&#34;&gt;// 通过路由传参将timestamp传给目标页面
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.$router.push({path&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;/xxx&amp;#39;&lt;/span&gt;, query&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; {timestamp&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; timestamp}})
&lt;span style=&#34;color:#6272a4&#34;&gt;// 父组件发送一个全局事件
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.$eventHub.$emit(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;refresh&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; timestamp)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;页面B&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// 接受路由参数
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; timestamp &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.$route.query.timestamp
&lt;span style=&#34;color:#6272a4&#34;&gt;// 接收全局事件
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.$eventHub.$on(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;refresh&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; timestamp, (params) =&amp;gt; {
  &lt;span style=&#34;color:#6272a4&#34;&gt;// 初始化数据方法
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.fetchData()
})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;参考资料&#34;&gt;参考资料&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/goloving/p/13941836.html&#34;&gt;vue项目刷新当前页面的几种解决方案对比：如何优雅的强制重新渲染子组件&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://cloud.tencent.com/developer/article/1637749&#34;&gt;Vue 数据更新了但页面没有更新的 7 种情况汇总及延伸&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
- https://damuwangs.github.io/posts/%E7%BC%96%E7%A8%8B/vue2-%E5%88%B7%E6%96%B0%E7%BB%84%E4%BB%B6/ - </description>
        </item>
    
    
    
        <item>
        <title>JavaScript-原型链</title>
        <link>https://damuwangs.github.io/posts/%E7%BC%96%E7%A8%8B/javascript-%E5%8E%9F%E5%9E%8B%E9%93%BE/</link>
        <pubDate>Thu, 24 Jun 2021 00:00:00 +0000</pubDate>
        
        <guid>https://damuwangs.github.io/posts/%E7%BC%96%E7%A8%8B/javascript-%E5%8E%9F%E5%9E%8B%E9%93%BE/</guid>
        <description>DaMuWang https://damuwangs.github.io/posts/%E7%BC%96%E7%A8%8B/javascript-%E5%8E%9F%E5%9E%8B%E9%93%BE/ -&lt;ul&gt;
&lt;li&gt;
&lt;h1 id=&#34;原型&#34;&gt;原型&lt;/h1&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h2 id=&#34;理解原型对象&#34;&gt;理解原型对象&lt;/h2&gt;
&lt;p&gt;无论什么时候，只要创建了一个新函数，就会根据一组特定的规则为该函数创建一个prototype属性，这个属性指向函数的原型对象。在默认情况下，所有原型对象都会自动获得一个constructor（构造函数）属性，这个属性包含一个指向prototype属性所在函数的指针。&lt;/p&gt;
&lt;p&gt;使用原型对象的好处是可以让所有对象实例共享它所包含的属性和方法。换句话说不必在构造函数中定义对象实例的信息，而是可以将这些信息直接添加到原型对象中&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; Person() {}
  
Person.prototype.name &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Nicholas&amp;#39;&lt;/span&gt;
Person.prototype.age &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;19&lt;/span&gt;
Person.prototype.sayName &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; () {
    console.log(&lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.name)
}
  
&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; person1 &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; Person()
person1.sayName() &lt;span style=&#34;color:#6272a4&#34;&gt;// 输出：Nicholas
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  
&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; person2 &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; Person()
person2.sayName() &lt;span style=&#34;color:#6272a4&#34;&gt;// 输出：Nicholas
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  
console.log(person1.sayName &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; person2.sayName) &lt;span style=&#34;color:#6272a4&#34;&gt;// 输出：true
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们将sayName()方法和所有属性直接添加到Person的prototype属性中，构造函数变成了空函数。即使如此，也仍然可以通过调用构造函数来创建新对象，而且新对象还会具有相同的属性和方法。但与构造函数模式不同的是，新对象的这些属性和方法是由所有实例共享的。换句话说，person1和person2访问的都是同一组属性和同一个sayName()函数&lt;/p&gt;
&lt;p&gt;创建了自定义构造函数之后，其原型对象默认只会取得constructor属性，至于其它方法，则都是从Object继承而来。当调用构造函数创建一个新实例后，该实例内部将包含一个指针（内部属性）____proto____指向构造函数的原型对象，需要明确的是，这个连接存在与实例和构造函数的原型之间，而不是存在与实例与构造函数之间&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://damuwangs.github.io/img/JavaScript-%E5%8E%9F%E5%9E%8B%E9%93%BE/%E5%8E%9F%E5%9E%8B%E5%85%B3%E7%B3%BB.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;上图展示了Person构造函数、Person的原型属性以及Person现有两个实例之间的关系。在此，Person.prototype指向了原型对象，而Person.prototype.constructor又指回了Person。原型对象中除了包含constructor属性之外，还包括后来添加的其它属性。Person的每个实例person1和person2都包含一个内部属性____proto____，该属性仅仅指向了Person.prototype，换句话说，它们与构造函数没有直接关系。此外，要格外注意的是，虽然这两个实例都不包含属性和方法，但我们却可以调用person1.sayName。这是通过查找对象属性的过程来实现的&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h2 id=&#34;原型搜索机制&#34;&gt;原型搜索机制&lt;/h2&gt;
&lt;p&gt;每当代码读取某个对象的某个属性时，都会执行一次搜索，目标是具有给定名字的属性。搜索首先从对象的实例本身开始。如果在实例中找到了具有给定名字的实现，则返回该属性的值，如果没有找到，则继续搜索指针指向的原型对象，在原型对象中查找给定名字的属性。如果在原型对象中找到了这个属性，则返回该属性的值。也就是说，在我们调用person.sayName()的时候，会先后执行两次搜索。首先，解析器会问：&amp;ldquo;实例person1有sayName属性吗？&amp;ldquo;答：&amp;ldquo;没有。&amp;ldquo;然后，它继续搜索，再问：&amp;ldquo;person1的原型有sayName属性吗？&amp;ldquo;答：&amp;ldquo;有。&amp;ldquo;于是，他就读取那个保存在原型对象中的函数。当我们调用person2.sayName()时，将会重现相同的搜索过程，得到相同的结果。而正是多个对象实例共享原型所保存的属性和方法的基本原理&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h2 id=&#34;注意事项&#34;&gt;注意事项&lt;/h2&gt;
&lt;p&gt;虽然可以通过对象实例访问保存在原型中的值，但却不能通过对象实例重写原型的值。如果我们在实例中添加了一个属性，而该属性与实例原型中的一个属性同名，那我们就在实例中创建该属性，该属性将会屏蔽原型中的那个属性&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; Person() {}
  
Person.prototype.name &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Nicholas&amp;#39;&lt;/span&gt;
Person.prototype.age &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;19&lt;/span&gt;
Person.prototype.sayName &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; () {
    console.log(&lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.name)
}
  
&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; person1 &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; Person()
&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; person2 &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; Person()
person1.name &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;王大木&amp;#39;&lt;/span&gt;
console.log(person1.name) &lt;span style=&#34;color:#6272a4&#34;&gt;// &amp;#39;王大木&amp;#39; ——————来自实例
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;console.log(person2.name) &lt;span style=&#34;color:#6272a4&#34;&gt;// &amp;#39;Nicholas&amp;#39; ——————来自原型
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在这个例子中，person1的name被一个新的值给屏蔽了。但无论访问person1.name还是访问person2.name都能正常的返回值，即分别是&amp;rsquo;王大木&amp;rsquo;（来自对象实例）和&amp;rsquo;Nicholas&amp;rsquo;（来自原型）。当console.log()中访问person1.name时，需要读取它的值，因此就会在这个实例上搜索一个名为name的属性。这个属性确实存在，于是就返回它的值而不必再搜搜索原型了。当以同样的方式访问person2.name时，并没有实例上发现该属性，因此就会继续搜索原型，结果在那里找到了name属性。&lt;/p&gt;
&lt;p&gt;当为对象实例添加一个属性时，这个属性就会屏蔽原型对象中保存的同名属性，换句话说，添加这个属性只会阻止我们访问原型中的属性，但不会修改那个属性。即使这个属性设置为null，也只会在实例中设置这个属性，而不会恢复其指向原型的连接&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h1 id=&#34;原型链&#34;&gt;原型链&lt;/h1&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h2 id=&#34;理解原型链&#34;&gt;理解原型链&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://damuwangs.github.io/img/JavaScript-%E5%8E%9F%E5%9E%8B%E9%93%BE/%E5%8E%9F%E5%9E%8B%E9%93%BE%E5%9B%BE%E7%A4%BA.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;每个构造函数都有一个原型对象，原型对象都包含一个指向构造函数的指针，而实例都包含一个指向原型对象的内部指针。那么，假如我们让原型对象等于另一个类型的实例，结果会怎么样呢？显然，此时的原型对象将包含一个指向另一个原型的指针，相应的，另一个原型中也包含指向另一个构造函数的指针。假如另一个原型又是另一个类型的实例，那么上述关系依然成立，如此层层递进，就够成了实例与原型的链条。这就是所谓原型链的基本概念&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; SuperType() {
    &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.property &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;SuperType&amp;#39;&lt;/span&gt;
}
  
SuperType.prototype.getSuperValue &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; () {
    &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.property
}
  
&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; SubType() {
    &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.subProperty &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;SubType&amp;#39;&lt;/span&gt;
}
  
&lt;span style=&#34;color:#6272a4&#34;&gt;// 继承了 SuperType
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;SubType.prototype &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; SuperType()
  
SubType.prototype.getSubValue &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; () {
    &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.subProperty
}
  
&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; instancce &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; SubType()
console.log(instancce.getSuperValue()) &lt;span style=&#34;color:#6272a4&#34;&gt;// 输出：SuperType
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;以上代码定义了两个类型：SuperType和SubType。每个类型分别有一个属性和一个方法。它们的主要区别是SubType继承了SuperType，而继承时通过创建SuperType的实例，并将实例赋值给SubType.prototype实现的。实现的本质是重写原型对象，代之以一个新类型的实例。换句话说，原来存在于SuperType的实例中的所有属性和方法，现在也存在与于SubType中了。在确立了继承关系之后，我们给SubType.prototype添加了一个方法，这样就继承了SuperType的属性和方法的基础上又添加了一个新方法&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://damuwangs.github.io/img/JavaScript-%E5%8E%9F%E5%9E%8B%E9%93%BE/%E5%8E%9F%E5%9E%8B%E9%93%BE.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;在上面代码中，我们没有使用SubType默认提供的原型，而是给它换了一个新的原型，这个新原型就是SuperType的实例。于是，新原型不仅具有作为一个SuperType的实例所拥有的全部属性和方法，而且内部还有一个指针，指向了SuperType的原型。最终结果就是这样：instance指向SubType的原型，SubType的原型又指向了SuperType的原型。getSuperValue()方法仍然还在SuperType.prototype中，但prototype则位于subType.prototype中。这是因为prototype是一个实例属性，而getSuperValue()则时一个原型方法。既然SubType.prototype现在是superType的实例，那么prototype当然就位于该实例中了&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h2 id=&#34;原型链搜索机制&#34;&gt;原型链搜索机制&lt;/h2&gt;
&lt;p&gt;原型链本质上扩展了原型搜索机制。当以读取模式访问一个实例属性时，首先在会实例中搜索该属性。如果没有找到该属性，则会继续搜索实例的原型。在通过原型链实现继承的情况下，搜索过程就得以沿着原型链继续向上。拿上面的例子来说，调用instance.getSuperValue()会经历三个搜索步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;搜索实例&lt;/li&gt;
&lt;li&gt;搜索SubType.prototype&lt;/li&gt;
&lt;li&gt;搜索SuperType.prototype，最后一步才会找到该方法。在找不到该属性或方法的情况下，搜索过程总要一环一环地前行到原型链末端才会停下来&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h2 id=&#34;默认的原型&#34;&gt;默认的原型&lt;/h2&gt;
&lt;p&gt;所有引用类型默认都继承了Object，而这个继承也是通过原型链实现的。所有函数的默认原型都是Object的实例，因此默认原型都会包含一个内部指针，指向Object.prototype。这也正是所有自定义类型都会继承toString()、valueOf()等默认方法的根本原因。所以上面展示的原型链中还应包括另外一个继承层次&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://damuwangs.github.io/img/JavaScript-%E5%8E%9F%E5%9E%8B%E9%93%BE/%E9%BB%98%E8%AE%A4%E5%8E%9F%E5%9E%8B.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;一句话，SubType继承了SuperType，而SuperType继承了Object。当调用instance.toString()时，实际上调用的时保存在Object.prototype中的那个方法&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h2 id=&#34;注意事项-1&#34;&gt;注意事项&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;子类型有时候需要重写超类型中的某个方法，或者添加超类型中不存在的某个方法。但不管怎样，给原型添加方法的代码一定要放在替换原型的语句之后&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; SuperType() {
    &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.property &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;SuperType&amp;#39;&lt;/span&gt;
}
     
SuperType.prototype.getSuperValue &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; () {
    &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.property
}
     
&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; SubType() {
    &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.subProperty &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;SubType&amp;#39;&lt;/span&gt;
}
     
&lt;span style=&#34;color:#6272a4&#34;&gt;// 继承了 SuperType
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;SubType.prototype &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; SuperType()
     
&lt;span style=&#34;color:#6272a4&#34;&gt;// 添加新方法
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;SubType.prototype.getSubValue &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; () {
    &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.subProperty
}
     
&lt;span style=&#34;color:#6272a4&#34;&gt;// 重写超类型中的方法
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;SubType.prototype.getSuperValue &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; () {
    &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;重写SuperType&amp;#39;&lt;/span&gt;
}
     
     
&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; instancce &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; SubType()
console.log(instancce.getSuperValue()) &lt;span style=&#34;color:#6272a4&#34;&gt;// 输出： 重写SuperType
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;以上代码中，第一个方法getSubValue()被添加到了SubType中，第二个方法getSuperValue是原型中已经存在的一个方法，但重写这个方法会屏蔽原来的那个方法。换句话说，当通过SubType的实例调用getSuperValue()时，调用的就是这个重新定义的方法，但通过SuperType的实例调用getSuperValue()时，还会继续调用原来的那个方法。这里要格外注意的时，必须在用SuperType的实例替换原型之后，再定义这两个方法&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;通过原型链实现继承时，不能使用对象字面量创建原型方法。因为这样做就会重写原型链&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; SuperType() {
    &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.property &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;SuperType&amp;#39;&lt;/span&gt;
}
     
SuperType.prototype.getSuperValue &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; () {
    &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.property
}
     
&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; SubType() {
    &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.subProperty &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;SubType&amp;#39;&lt;/span&gt;
}
     
&lt;span style=&#34;color:#6272a4&#34;&gt;// 继承了 SuperType
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;SubType.prototype &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; SuperType()
     
&lt;span style=&#34;color:#6272a4&#34;&gt;// 使用字面量添加新方法，会导致上一行代码无效
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;SubType.prototype  &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; {
    getSubValue &lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; () {
       &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.subProperty
   }
} 
     
&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; instancce &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; SubType()
console.log(instancce.getSuperValue()) &lt;span style=&#34;color:#6272a4&#34;&gt;// 输出： error
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;以上代码展示了刚刚把SuperType的实例赋值给原型，接着又将原型替换成一个对象字面量而导致报错。由于现在的原型包含的是一个Object的实例，而非SuperType的实例，因此我们设想中的原型链已经被切断，SubType和SuperType之间已经没有关系了&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在通过原型实现继承时，原型实际上会变成另一个类型的实例。于是原先的实例属性也就顺理成章的变成了现在的原型属性了&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; SuperType() {
    &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.color &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;red&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;blue&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;green&amp;#39;&lt;/span&gt;]
}
     
&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; SubType() {
         
}
     
&lt;span style=&#34;color:#6272a4&#34;&gt;// 继承了 SuperType
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;SubType.prototype &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; SuperType()
     
&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; instance1 &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; SubType()
instance1.color.push(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;black&amp;#39;&lt;/span&gt;)
console.log(instance1.color) &lt;span style=&#34;color:#6272a4&#34;&gt;// 输出：[ &amp;#39;red&amp;#39;, &amp;#39;blue&amp;#39;, &amp;#39;green&amp;#39;, &amp;#39;black&amp;#39; ]
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;     
&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; instance2 &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; SubType()
console.log(instance2.color) &lt;span style=&#34;color:#6272a4&#34;&gt;// 输出：[ &amp;#39;red&amp;#39;, &amp;#39;blue&amp;#39;, &amp;#39;green&amp;#39;, &amp;#39;black&amp;#39; ]
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这个例子中SuberType构造函数定义了一个color属性，该属性包含一个数组（引用类型值）SuperType的每个实例都会又各自包含自己数组的color属性。当SubType通过原型链继承了SuperType之后，SuperType.prototype就变成了SuperType的一个实例，因此它也拥有了一个它自己的color属性，就跟专门创建了一个SubType.prototype.color属性一样。但结果是什么呢？结果是SubType的所有实例都会共享这一个color属性。而我们对instance1.color的修改能够通过instance2.color反应出来，这就充分证实了这一点&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在创建子类型的实例时，不能向超类型的构造函数中传递参数。实际上，应该说是没有办法在不影响所有对象实例的情况下，给超类型的构造函数传递参数&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
- https://damuwangs.github.io/posts/%E7%BC%96%E7%A8%8B/javascript-%E5%8E%9F%E5%9E%8B%E9%93%BE/ - </description>
        </item>
    
    
    
        <item>
        <title>JavaScript-闭包</title>
        <link>https://damuwangs.github.io/posts/%E7%BC%96%E7%A8%8B/javascript-%E9%97%AD%E5%8C%85/</link>
        <pubDate>Mon, 21 Jun 2021 00:00:00 +0000</pubDate>
        
        <guid>https://damuwangs.github.io/posts/%E7%BC%96%E7%A8%8B/javascript-%E9%97%AD%E5%8C%85/</guid>
        <description>DaMuWang https://damuwangs.github.io/posts/%E7%BC%96%E7%A8%8B/javascript-%E9%97%AD%E5%8C%85/ -&lt;h1 id=&#34;概念&#34;&gt;概念&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h2 id=&#34;变量的作用域&#34;&gt;变量的作用域&lt;/h2&gt;
&lt;p&gt;要理解闭包，首先必须理解Javascript特殊的变量作用域&lt;/p&gt;
&lt;p&gt;变量的作用域无非就是两种：全局变量和局部变量&lt;/p&gt;
&lt;p&gt;Javascript语言的特殊之处，就在于函数内部可以直接读取全局变量&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; n&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;999&lt;/span&gt;
&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; f1(){
  alert(n)
}
f1() &lt;span style=&#34;color:#6272a4&#34;&gt;// 999
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在函数外部无法读取函数内的局部变量&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; f1(){
  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; n&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;999&lt;/span&gt;
}
alert(n); &lt;span style=&#34;color:#6272a4&#34;&gt;// error
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;h2 id=&#34;闭包的描述&#34;&gt;闭包的描述&lt;/h2&gt;
&lt;p&gt;闭包就是能够读取其他函数内部变量的函数&lt;/p&gt;
&lt;p&gt;由于在Javascript语言中，只有函数内部的子函数才能读取局部变量，因此可以把闭包简单理解成&amp;quot;定义在一个函数内部的函数&amp;rdquo;&lt;/p&gt;
&lt;p&gt;所以，在本质上，闭包就是将函数内部和函数外部连接起来的一座桥梁，f2函数，就是闭包&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; f1(){
  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; n&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;999&lt;/span&gt;
  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; f2(){
      alert(n)
    }
　　&lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; f2
}
&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; result &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; f1()
result() &lt;span style=&#34;color:#6272a4&#34;&gt;// 999
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;h2 id=&#34;闭包优缺点&#34;&gt;闭包优缺点&lt;/h2&gt;
&lt;p&gt;优点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;希望一个变量长期驻扎在内存中&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;避免全局变量的污染&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;私有成员的存在&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;缺点：闭包会使变量始终保存在内存中，如果不当使用会增大内存消耗&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;应用场景&#34;&gt;应用场景&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h2 id=&#34;匿名自执行函数&#34;&gt;匿名自执行函数&lt;/h2&gt;
&lt;p&gt;我们知道所有的变量，如果不加上var关键字，则默认的会添加到全局对象的属性上去，这样的临时变量加入全局对象有很多坏处，比如：别的函数可能误用这些变量；造成全局对象过于庞大，影响访问速度(因为变量的取值是需要从原型链上遍历的)。除了每次使用变量都是用var关键字外，我们在实际情况下经常遇到这样一种情况，即有的函数只需要执行一次，其内部变量无需维护，比如UI的初始化，那么我们可以使用闭包&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; data&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; {    
    table &lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; [],    
    tree &lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; {}    
};    
       
(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;(dm){    
    &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; i &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt; dm.table.rows; i&lt;span style=&#34;color:#ff79c6&#34;&gt;++&lt;/span&gt;){    
       &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; row &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; dm.table.rows[i]  
       &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; j &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;; j &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt; row.cells; i&lt;span style=&#34;color:#ff79c6&#34;&gt;++&lt;/span&gt;){    
           drawCell(i, j)
       }    
    }    
         
})(data);   
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们创建了一个匿名的函数，并立即执行它，由于外部无法引用它内部的变量，因此在函数执行完后会立刻释放资源，关键是不污染全局对象&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h2 id=&#34;结果缓存&#34;&gt;结果缓存&lt;/h2&gt;
&lt;p&gt;我们开发中会碰到很多情况，设想我们有一个处理过程很耗时的函数对象，每次调用都会花费很长时间，那么我们就需要将计算出来的值存储起来，当调用这个函数的时候，首先在缓存中查找，如果找不到，则进行计算，然后更新缓存并返回值，如果找到了，直接返回查找到的值即可。闭包正是可以做到这一点，因为它不会释放外部的引用，从而函数内部的值可以得以保留&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; CachedSearchBox &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;(){    
    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; cache &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; {}
    &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; {    
       attachSearchBox &lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;(dsid){    
         &lt;span style=&#34;color:#6272a4&#34;&gt;//如果结果在缓存中
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;           &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt;(dsid &lt;span style=&#34;color:#ff79c6&#34;&gt;in&lt;/span&gt; cache){   
              &lt;span style=&#34;color:#6272a4&#34;&gt;//直接返回缓存中的对象
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;              &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; cache[dsid]    
           }    
           &lt;span style=&#34;color:#6272a4&#34;&gt;//新建 
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;           &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; fsb &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; uikit.webctrl.SearchBox(dsid)   
        &lt;span style=&#34;color:#6272a4&#34;&gt;//更新缓存
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;           cache[dsid] &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; fsb
           &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; fsb     
       }  
    }
})()
CachedSearchBox.attachSearchBox(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;input&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这样我们在第二次调用的时候，就会从缓存中读取到该对象&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h2 id=&#34;减少全局变量的污染&#34;&gt;减少全局变量的污染&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;//abc为外部匿名函数的返回值
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; abc &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;(){      
    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; a &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;
    &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;(){
        a&lt;span style=&#34;color:#ff79c6&#34;&gt;++&lt;/span&gt;
        alert(a)
    }
})()
&lt;span style=&#34;color:#6272a4&#34;&gt;//2 调用一次abc函数，其实是调用里面内部函数的返回值  
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;abc()  
&lt;span style=&#34;color:#6272a4&#34;&gt;//3
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;abc() 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;h2 id=&#34;封装&#34;&gt;封装&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; person &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;(){    
    &lt;span style=&#34;color:#6272a4&#34;&gt;//变量作用域为函数内部，外部无法访问    
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; name &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;default&amp;#34;&lt;/span&gt;;              
    &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; {    
       getName &lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;(){    
           &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; name;    
       },    
       setName &lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;(newName){    
           name &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; newName  
       }    
    }    
}() 
&lt;span style=&#34;color:#6272a4&#34;&gt;// 直接访问，结果为undefined         
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;print(person.name) 
print(person.getName())  
person.setName(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;abruzzi&amp;#34;&lt;/span&gt;)   
print(person.getName()) 
     
得到结果如下：  
&lt;span style=&#34;color:#ff79c6&#34;&gt;undefined&lt;/span&gt;  
&lt;span style=&#34;color:#ff79c6&#34;&gt;default&lt;/span&gt;  
abruzzi  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;h2 id=&#34;实现类和继承&#34;&gt;实现类和继承&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; Person(){    
    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; name &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;default&amp;#34;&lt;/span&gt;       
    &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; {    
       getName &lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;(){    
           &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; name;    
       },    
       setName &lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;(newName){    
           name &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; newName;    
       }    
    }    
}   
  
&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; p &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; Person()
p.setName(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Tom&amp;#34;&lt;/span&gt;)
alert(p.getName())
  
&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; Jack &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;(){}
&lt;span style=&#34;color:#6272a4&#34;&gt;//继承自Person
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;Jack.prototype &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; Person()
&lt;span style=&#34;color:#6272a4&#34;&gt;//添加私有方法
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;Jack.prototype.Say &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;(){
  alert(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Hello,my name is Jack&amp;#34;&lt;/span&gt;)
}
&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; j &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; Jack()
j.setName(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Jack&amp;#34;&lt;/span&gt;)
j.Say()
alert(j.getName())
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们定义了Person，它就像一个类，我们new一个Person对象，访问它的方法。下面我们定义了Jack，继承Person，并添加自己的方法。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h2 id=&#34;settimeout传参&#34;&gt;setTimeout传参&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;setTimeout(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;(param){
    alert(param)
},&lt;span style=&#34;color:#bd93f9&#34;&gt;1000&lt;/span&gt;)
  
&lt;span style=&#34;color:#6272a4&#34;&gt;//通过闭包可以实现传参效果
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; func(param){
  &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;(){
      alert(param)
  }
}
&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; f1 &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; func(&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;)
setTimeout(f1,&lt;span style=&#34;color:#bd93f9&#34;&gt;1000&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;h2 id=&#34;为节点循环绑定click事件&#34;&gt;为节点循环绑定click事件&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; count() {
    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; arr &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; []
    &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; i&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;; i&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;=&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt;; i&lt;span style=&#34;color:#ff79c6&#34;&gt;++&lt;/span&gt;) {
        arr.push(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; () {
            &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; i &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt; i
        })
    }
    &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; arr
}
  
&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; results &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; count()
&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; f1 &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; results[&lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;]
&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; f2 &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; results[&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;]
&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; f3 &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; results[&lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在上面的例子中，每次循环，都创建了一个新的函数，然后，把创建的3个函数都添加到一个Array中返回了。&lt;/p&gt;
&lt;p&gt;你可能认为调用f1()，f2()和f3()结果应该是 &lt;code&gt;1 4 9&lt;/code&gt;， 但实际结果是：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;f1() &lt;span style=&#34;color:#6272a4&#34;&gt;// 16
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;f2() &lt;span style=&#34;color:#6272a4&#34;&gt;// 16
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;f3() &lt;span style=&#34;color:#6272a4&#34;&gt;// 16
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;全部都是16！原因就在于返回的函数引用了变量i，但它并非立刻执行。等到3个函数都返回时，它们所引用的变量i已经变成了4，因此最终结果为16&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;返回闭包时牢记的一点就是：返回函数不要引用任何循环变量，或者后续会发生变化的变量&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果一定要引用循环变量怎么办？方法是再创建一个函数，用该函数的参数绑定循环变量当前的值，无论该循环变量后续如何更改，已绑定到函数参数的值不变：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; count() {
    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; arr &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; []
    &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; i&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;; i&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;=&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt;; i&lt;span style=&#34;color:#ff79c6&#34;&gt;++&lt;/span&gt;) {
        arr.push((&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; (n) {
            &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; () {
                &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; n &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt; n
            }
        })(i))
    }
    &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; arr
}
  
&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; results &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; count()
&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; f1 &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; results[&lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;]
&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; f2 &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; results[&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;]
&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; f3 &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; results[&lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;]
  
f1() &lt;span style=&#34;color:#6272a4&#34;&gt;// 1
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;f2() &lt;span style=&#34;color:#6272a4&#34;&gt;// 4
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;f3() &lt;span style=&#34;color:#6272a4&#34;&gt;// 9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;注意这里用了一个“创建一个匿名函数并立刻执行”的语法：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; (x) {
    &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; x &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt; x
})(&lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt;) &lt;span style=&#34;color:#6272a4&#34;&gt;// 9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;参考资料&#34;&gt;参考资料&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;http://www.ruanyifeng.com/blog/2009/08/learning_javascript_closures.html&#34;&gt;学习Javascript闭包（Closure）&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://segmentfault.com/a/1190000000652891&#34;&gt;详解JS闭包&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/yunfeifei/p/4019504.html&#34;&gt;全面理解Javascript闭包和闭包的几种写法及用途&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://juejin.cn/post/6844903910902087688&#34;&gt;javascript之闭包七（闭包的应用场景）&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://juejin.cn/post/6844903841888993287&#34;&gt;闭包与setTimeout&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/qq_21132509/article/details/80694517&#34;&gt;对JS闭包的理解及常见应用场景&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
- https://damuwangs.github.io/posts/%E7%BC%96%E7%A8%8B/javascript-%E9%97%AD%E5%8C%85/ - </description>
        </item>
    
    
    
        <item>
        <title>面试-2021年2月</title>
        <link>https://damuwangs.github.io/posts/%E7%BC%96%E7%A8%8B/%E9%9D%A2%E8%AF%95-2021%E5%B9%B42%E6%9C%88/</link>
        <pubDate>Wed, 16 Jun 2021 00:00:00 +0000</pubDate>
        
        <guid>https://damuwangs.github.io/posts/%E7%BC%96%E7%A8%8B/%E9%9D%A2%E8%AF%95-2021%E5%B9%B42%E6%9C%88/</guid>
        <description>DaMuWang https://damuwangs.github.io/posts/%E7%BC%96%E7%A8%8B/%E9%9D%A2%E8%AF%95-2021%E5%B9%B42%E6%9C%88/ -&lt;h1 id=&#34;javascript&#34;&gt;JavaScript&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h2 id=&#34;跨域&#34;&gt;跨域&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;../javascript-%E8%B7%A8%E5%9F%9F/&#34;&gt;JavaScript-跨域&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h2 id=&#34;getpost区别&#34;&gt;get、post区别&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;get参数url可见，post参数url不可见&lt;/li&gt;
&lt;li&gt;通过拼接url进行传递参数，post通过body体传递参数&lt;/li&gt;
&lt;li&gt;get请求可以缓存，post请求不可以缓存&lt;/li&gt;
&lt;li&gt;get请求页面后退时不产生影响、post请求页面后退时会重新提交请求&lt;/li&gt;
&lt;li&gt;get一般传输数据大小不超过2k-4k，post请求传输数据的大小可配置&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h2 id=&#34;数据类型&#34;&gt;数据类型&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;单类型：String、Number、boolean、null、undefined&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;引用类型：object、function、array、Date、RegExp&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h2 id=&#34;值传递和引用传递&#34;&gt;值传递和引用传递&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;基本类型复制后两个变量完全独立，一方改变都不会影响另一方&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;引用类型复制的时引用，之后的任何一方改变都会映射到另一方&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h2 id=&#34;闭包&#34;&gt;闭包&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;../javascript-%E9%97%AD%E5%8C%85&#34;&gt;JavaScript-闭包&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h2 id=&#34;箭头函数的好处&#34;&gt;箭头函数的好处&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;简洁&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;不会改变this本来的绑定&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h2 id=&#34;事件的冒泡和捕获&#34;&gt;事件的冒泡和捕获&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;../javascript-%E4%BA%8B%E4%BB%B6%E5%86%92%E6%B3%A1%E4%BA%8B%E4%BB%B6%E6%8D%95%E8%8E%B7%E5%92%8C%E4%BA%8B%E4%BB%B6%E5%A7%94%E6%89%98&#34;&gt;JavaScript-事件冒泡、事件捕获和事件委托&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h2 id=&#34;节流和防抖&#34;&gt;节流和防抖&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;../javascript-%E9%98%B2%E6%8A%96%E8%8A%82%E6%B5%81&#34;&gt;JavaScript-防抖、节流&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h2 id=&#34;dom加载过程中ready和load的区别&#34;&gt;dom加载过程中ready和load的区别&lt;/h2&gt;
&lt;p&gt;Ready：页面HTML文档解析完成但图片等媒体文件加载完成之前执行
load：完全加载完成之后执行&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h2 id=&#34;字符串反转&#34;&gt;字符串反转&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://codepen.io/damuwangs/pen/NWwdXJL?editors=0012&#34;&gt;面试-2021年2月-字符串反转&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h2 id=&#34;slicesplice的区别&#34;&gt;slice、splice的区别&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://codepen.io/damuwangs/pen/RwjKQKM?editors=0012&#34;&gt;面试-2021年2月-slice、splice的区别&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h2 id=&#34;深拷贝和浅拷贝&#34;&gt;深拷贝和浅拷贝&lt;/h2&gt;
&lt;p&gt;概念：深拷贝和浅拷贝是只针对Object和Array这样的引用数据类型的。&lt;/p&gt;
&lt;p&gt;浅拷贝只复制指向某个对象的指针，而不复制对象本身，新旧对象还是共享同一块内存。但深拷贝会另外创造一个一模一样的对象，新对象跟原对象不共享内存，修改新对象不会改到原对象。&lt;/p&gt;
&lt;p&gt;浅拷贝：assign()、concat()、slice()&lt;/p&gt;
&lt;p&gt;深拷贝：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;JSON.parse(JSON.stringify())&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;手写递归方法&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;递归方法实现深度克隆原理：遍历对象、数组直到里边都是基本数据类型，然后再去复制，就是深度拷贝&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://codepen.io/damuwangs/pen/XWzpZBp?editors=0012&#34;&gt;面试-2021年2月-深拷贝&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h2 id=&#34;同步和异步&#34;&gt;同步和异步&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;../javascript-%E5%BC%82%E6%AD%A5%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88&#34;&gt;JavaScript-异步解决方案&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h2 id=&#34;缓存&#34;&gt;缓存&lt;/h2&gt;
&lt;p&gt;cookie sessionStorage和localstorage&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;存储大小&lt;/p&gt;
&lt;p&gt;cookie数据大小不能超过4K&lt;/p&gt;
&lt;p&gt;sessionStorage和localStorage可以达到5M或更大&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;有效时间&lt;/p&gt;
&lt;p&gt;localstorage：浏览器关闭后数据不丢失除非主动删除数据&lt;/p&gt;
&lt;p&gt;sessionStorage：数据在当前浏览器窗口关闭后自动删除&lt;/p&gt;
&lt;p&gt;cookie： 过期时间未到一直有效，即使窗口或浏览器关闭&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;数据与服务器之间的交互方式&lt;/p&gt;
&lt;p&gt;cookie：数据会自动传递到服务器，服务器也可以写cookie到客户端&lt;/p&gt;
&lt;p&gt;sessionStorage和localstorage：仅本地保存，不会发给服务端&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h2 id=&#34;统计数组中出现最多字符&#34;&gt;统计数组中出现最多字符&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://codepen.io/damuwangs/pen/ZEaLxQK?editors=0012&#34;&gt;面试-2021年2月-统计数组中出现最多字符&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h2 id=&#34;判断是不是数组&#34;&gt;判断是不是数组&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://codepen.io/damuwangs/pen/bGYgMgY?editors=0012&#34;&gt;面试-2021年2月-判断是不是数组&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h2 id=&#34;promise&#34;&gt;Promise&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;概念：解决异步编程的一种方法，替代多层嵌套的回调，Promise是一个构造函数，用域封装异步操作并可以获得成功或失败的结果&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Promise all：将多个Promise实例包装成一个新的Promise实例，当所有状态都变成成功时all的状态才变为成功，如果其中一个状态为失败则返回失败结果&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;执行顺序问题&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://codepen.io/damuwangs/pen/zYPNjPV?editors=0012&#34;&gt;面试-2021年2月-Promise&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h2 id=&#34;原型链&#34;&gt;原型链&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;../javascript-%E5%8E%9F%E5%9E%8B%E9%93%BE&#34;&gt;JavaScript-原型链&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h2 id=&#34;this指向&#34;&gt;this指向&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;../javascript-this%E6%8C%87%E5%90%91&#34;&gt;JavaScript-this指向&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h2 id=&#34;小程序api&#34;&gt;小程序API&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://developers.weixin.qq.com/miniprogram/dev/api/&#34;&gt;微信开放文档&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h2 id=&#34;jquery选择器&#34;&gt;Jquery选择器&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;元素选择器&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;$(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;p&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#6272a4&#34;&gt;// 选取 &amp;lt;p&amp;gt; 元素
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;$(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;p.intro&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#6272a4&#34;&gt;// 选取所有 class=&amp;#34;intro&amp;#34; 的 &amp;lt;p&amp;gt; 元素
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;$(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;p#demo&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#6272a4&#34;&gt;// 选取所有 id=&amp;#34;demo&amp;#34; 的 &amp;lt;p&amp;gt; 元素
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;属性选择器&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;$(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;[href]&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#6272a4&#34;&gt;// 选取所有带有 href 属性的元素
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;$(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;[href=&amp;#39;#&amp;#39;]&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#6272a4&#34;&gt;// 选取所有带有 href 值等于 &amp;#34;#&amp;#34; 的元素
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;$(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;[href!=&amp;#39;#&amp;#39;]&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#6272a4&#34;&gt;// 选取所有带有 href 值不等于 &amp;#34;#&amp;#34; 的元素
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;$(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;[href$=&amp;#39;.jpg&amp;#39;]&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#6272a4&#34;&gt;// 选取所有 href 值以 &amp;#34;.jpg&amp;#34; 结尾的元素
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;CSS 选择器&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;$(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;p&amp;#34;&lt;/span&gt;).css(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;background-color&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;red&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#6272a4&#34;&gt;// 把所有 p 元素的背景颜色更改为红色
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h2 id=&#34;递归计算1100求和&#34;&gt;递归计算1~100求和&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; num(n) {
    &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; (n &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;
    &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; num(n &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; n
}
&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; sum &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; num(&lt;span style=&#34;color:#bd93f9&#34;&gt;100&lt;/span&gt;)
console.log(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;求和1~100 = &amp;#39;&lt;/span&gt;, sum) &lt;span style=&#34;color:#6272a4&#34;&gt;// 输出5050
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1 id=&#34;css&#34;&gt;Css&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h2 id=&#34;pxrememvwvh区别&#34;&gt;px,rem,em,vw,vh区别&lt;/h2&gt;
&lt;p&gt;px：绝对单位，页面按精确像素展示&lt;/p&gt;
&lt;p&gt;em：相对单位，基准点为父节点字体的大小，如果自身定义了font-size按自身来计算&lt;/p&gt;
&lt;p&gt;em 字号表示倍数，表示当前字体实际大小是根元素字体大小的多少多少倍，比如0.8em、1.4em，表示当前元素字体是根元素字体的0.8倍、1.4倍。实际大小会根据设备屏幕的不同，而动态适应不同的屏幕分辨率。px是写死的像素值，不随分辨率而改变。&lt;/p&gt;
&lt;p&gt;rem：相对单位，可理解为“root em”相对根节点html的字体大小来计算&lt;/p&gt;
&lt;p&gt;vw：视窗宽度，1vw等于视窗宽度的1%&lt;/p&gt;
&lt;p&gt;vh：视窗高度，1vh相当于视窗高度的1%&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h2 id=&#34;box-sizing属性&#34;&gt;box-sizing属性&lt;/h2&gt;
&lt;p&gt;在标准模式下的盒模型下，盒子总宽度/高度 = width/height+padding+border+margin&lt;/p&gt;
&lt;p&gt;在怪异模式下的盒模型下，盒子的总宽度和高度是包含内边距padding和边框border宽度在内的，盒子总宽度/高度=width/height + margin = 内容区宽度/高度 + padding + border + margin;&lt;/p&gt;
&lt;p&gt;box-sizing有两个值一个是content-box，另一个是border-box&lt;/p&gt;
&lt;p&gt;当设置为box-sizing:content-box时，将采用标准模式解析计算&lt;/p&gt;
&lt;p&gt;当设置为box-sizing:border-box时，将采用怪异模式解析计算&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h2 id=&#34;元素居中&#34;&gt;元素居中&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;margin和width实现
在容器上定义一个固定的宽度，然后配合margin左右的值为auto&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;inline-block和父元素text-align&lt;/p&gt;
&lt;p&gt;仅inline-block属性是无法让元素水平居中，他的关键之处要在元素的父容器中设置text-align的属性为“center”，这样才能达到效果：&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h2 id=&#34;自适应方案&#34;&gt;自适应方案&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;固定一个某些宽度，使用一个模式，加上少许的媒体查询&lt;/li&gt;
&lt;li&gt;使用flexbox&lt;/li&gt;
&lt;li&gt;使用百分比加媒体查询&lt;/li&gt;
&lt;li&gt;使用rem&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1 id=&#34;vue&#34;&gt;Vue&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h2 id=&#34;计算属性侦听器区别&#34;&gt;计算属性,侦听器区别&lt;/h2&gt;
&lt;p&gt;【计算属性】
概念：计算属性是一个函数，最后函数返回的结果就是计算属性得到的结果
当我们第一次使用计算属性的时候，会执行计算属性并进行计算，然后将计算的结果缓存起来，后续当外面再去使用计算属性的时候，如果计算属性中使用到的数据没有发生变化，那么就直接读取缓存的结果，不会重新计算&lt;/p&gt;
&lt;p&gt;场景：计算的内容需要依赖多个属性，如果一个数据反复会被使用，但它计算以来的内容很少发生变化时&lt;/p&gt;
&lt;p&gt;【侦听器】
概念：侦听器与data中的属性同名，当属性值发生改变的时候侦听器触发执行&lt;/p&gt;
&lt;p&gt;场景：在计算开销比较大（计算多次数或者异步处理）的时候&lt;/p&gt;
&lt;p&gt;补充：immediate: true 刷新加载 立马触发一次handler&lt;/p&gt;
&lt;p&gt;deep: true 可以深度检测到 person 对象的属性值的变化&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h2 id=&#34;keep-live&#34;&gt;keep-live&lt;/h2&gt;
&lt;p&gt;概念：缓存某个组件，或者某个路由。所有在keep-alive标签下的路由都会被缓存。当组件在 &lt;!-- raw HTML omitted --&gt; 内被切换，它的 activated 和 deactivated 这两个生命周期钩子函数将会被对应执行&lt;/p&gt;
&lt;p&gt;用法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;在路由meta配置isKeepAlive:true&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;inlcude/exclude&lt;/p&gt;
&lt;p&gt;inlcude包含该组件就缓存，exclude不包含该组件就缓存&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;场景：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;节省性能消耗，避免一个组件频繁重新渲染，节省开支&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;保存用户状态&lt;/p&gt;
&lt;p&gt;比如说：我们在填写收货地址的页面，需要跳转到另一个页面通过定位选择地址信息再返回继续填写，这时候需要缓存收货地址页面，避免跳转页面导致用户数据丢失&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h2 id=&#34;v-if和v-show的区别&#34;&gt;v-if和v-show的区别&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;v-show 只是简单的控制元素的 display 属性，v-if 条件为真，元素将会被渲染，条件为假，元素会被销毁&lt;/li&gt;
&lt;li&gt;v-show 有更高的首次渲染开销，而 v-if 的首次渲染开销要小的多&lt;/li&gt;
&lt;li&gt;v-if 有更高的切换开销，v-show 切换开销小&lt;/li&gt;
&lt;li&gt;v-if 有配套的 v-else-if 和 v-else，而 v-show 没有&lt;/li&gt;
&lt;li&gt;v-if 可以搭配 template 使用，而 v-show 不行&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h2 id=&#34;route和router的区别&#34;&gt;route和router的区别&lt;/h2&gt;
&lt;p&gt;route相当于当前正在跳转的路由对象，可以从里面获取name,path,params,query等&lt;/p&gt;
&lt;p&gt;router为VueRouter的实例，相当于一个全局的路由器对象，里面含有很多属性和子对象，例如history对象，经常用的跳转链接就可以用this.$router.push&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h2 id=&#34;hashhistory路由区别&#34;&gt;hash,history路由区别&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;hash路由在地址栏URL上有#，而history路由没有会好看一点&lt;/li&gt;
&lt;li&gt;我们进行回车刷新操作，hash路由会加载到地址栏对应的页面，而history路由一般就404报错了（刷新是网络请求，没有后端准备时会报错）。&lt;/li&gt;
&lt;li&gt;hash路由支持低版本的浏览器，而history路由是HTML5新增的API。&lt;/li&gt;
&lt;li&gt;hash的特点在于它虽然出现在了URL中，但是不包括在http请求中，所以对于后端是没有一点影响的，所以改变hash不会重新加载页面，所以这也是单页面应用的必备。&lt;/li&gt;
&lt;li&gt;history运用了浏览器的历史记录栈，之前有back,forward,go方法&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h2 id=&#34;组件传参方式&#34;&gt;组件传参方式&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;父传子：父组件把数据绑定在引用子组件处的自定义属性上，在子组件中通过props引用&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;子传父：在父组件标签处定义自定义事件，在子组件中通过$emit发送自定义事件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$ref&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;vuex&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;provider inject&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h2 id=&#34;vuex&#34;&gt;vuex&lt;/h2&gt;
&lt;p&gt;概念描述：vuex是vue框架的状态管理器，单页面应用组件之间的状态&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;state：对应vue的data，数据是响应式的，组件从store中读取数据，若store发生改变，依赖这个数据的组件也会更新，通过mapState把全局的state和getter映射到当前组件的computed中&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;getter：对state进行计算操作，他就是store的计算属性。防止多次计算降低性能。可以在多组件之间复用，若一个状态只在一个组件内使用就可以不用getters&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Mutation：更改store中状态的唯一方法且必须是同步函数。在组件中使用 this.$store.commit(&amp;lsquo;xxx&amp;rsquo;) 提交 mutation，或者使用 mapMutations 辅助函数将组件中的 methods 映射为 store.commit 调用&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Action：提交的是 mutation，可以包含任意异步操作。在组件中使用 this.$store.dispatch(&amp;lsquo;xxx&amp;rsquo;) 分发 action，或者使用 mapActions 辅助函数将组件的 methods 映射为 store.dispatch 调用&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Module：将 store 分割成模块，每个模块拥有自己的 state、mutation、action、getter&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h2 id=&#34;过滤器&#34;&gt;过滤器&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://damuwangs.github.io/img/%E9%9D%A2%E8%AF%95-2021%E5%B9%B42%E6%9C%88/%E8%BF%87%E6%BB%A4%E5%99%A8.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h2 id=&#34;避免v-ifv-for同时用&#34;&gt;避免v-if,v-for同时用&lt;/h2&gt;
&lt;p&gt;v-for 比 v-if 具有更高的优先级，哪怕我们只渲染出一小部分用户的元素,也得在每次重渲染的时候遍历整个列表。&lt;/p&gt;
&lt;p&gt;因此倾向于将v-if放在容器元素上，先判断再循环&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h2 id=&#34;vue双向绑定原理&#34;&gt;Vue双向绑定原理&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;../vue2-%E5%93%8D%E5%BA%94%E5%BC%8F%E5%8E%9F%E7%90%86&#34;&gt;Vue2-响应式原理&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h2 id=&#34;修改数据不重发请求&#34;&gt;修改数据不重发请求&lt;/h2&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1 id=&#34;参考资料&#34;&gt;参考资料&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/143929973&#34;&gt;CSS3面试题2020 - 知乎 (zhihu.com)&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
- https://damuwangs.github.io/posts/%E7%BC%96%E7%A8%8B/%E9%9D%A2%E8%AF%95-2021%E5%B9%B42%E6%9C%88/ - </description>
        </item>
    
    
  </channel>
</rss> 