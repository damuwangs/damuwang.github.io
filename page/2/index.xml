<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>DaMuWang</title>
    <link>https://damuwangs.github.io/</link>
    <description>Recent content on DaMuWang</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 04 Aug 2021 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="https://damuwangs.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    
        <item>
        <title>Vue2-nextTick</title>
        <link>https://damuwangs.github.io/posts/vue2-nexttick/</link>
        <pubDate>Mon, 28 Jun 2021 00:00:00 +0000</pubDate>
        
        <guid>https://damuwangs.github.io/posts/vue2-nexttick/</guid>
        <description>DaMuWang https://damuwangs.github.io/posts/vue2-nexttick/ -&lt;h1 id=&#34;概念&#34;&gt;概念&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;官方文档说明：在下次 DOM 更新循环结束之后执行延迟回调。在修改数据之后立即使用这个方法，获取更新后的 DOM&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;异步解析&#34;&gt;异步解析&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Vue 实现响应式并不是数据发生变化之后 DOM 立即变化，而是按一定的策略进行 DOM 的更新&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;​	简而言之，异步接信息的运行机制如下&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;所有同步任务都在主线程上执行，形成一个&lt;a href=&#34;https://www.ruanyifeng.com/blog/2013/11/stack.html&#34;&gt;执行栈&lt;/a&gt;（execution context stack）&lt;/li&gt;
&lt;li&gt;主线程之外，还存在一个&amp;quot;任务队列&amp;rdquo;（task queue）。只要异步任务有了运行结果，就在&amp;quot;任务队列&amp;quot;之中放置一个事件&lt;/li&gt;
&lt;li&gt;一旦&amp;quot;执行栈&amp;quot;中的所有同步任务执行完毕，系统就会读取&amp;quot;任务队列&amp;rdquo;，看看里面有哪些事件。那些对应的异步任务，于是结束等待状态，进入执行栈，开始执行&lt;/li&gt;
&lt;li&gt;主线程不断重复上面的第三步&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;事件循环说明&#34;&gt;事件循环说明&lt;/h2&gt;
&lt;p&gt;简单来说，Vue 在修改数据后，视图不会立刻更新，而是等&lt;strong&gt;同一事件循环&lt;/strong&gt;中的所有数据变化完成之后，再统一进行视图更新&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;//改变数据
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;vm.message &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;changed&amp;#39;&lt;/span&gt;

&lt;span style=&#34;color:#6272a4&#34;&gt;//想要立即使用更新后的DOM。这样不行，因为设置message后DOM还没有更新
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;console.log(vm.$el.textContent) &lt;span style=&#34;color:#6272a4&#34;&gt;// 并不会得到&amp;#39;changed&amp;#39;
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#6272a4&#34;&gt;//这样可以，nextTick里面的代码会在DOM更新后执行
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;Vue.nextTick(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;(){
    console.log(vm.$el.textContent) &lt;span style=&#34;color:#6272a4&#34;&gt;// 可以得到&amp;#39;changed&amp;#39;
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://damuwangs.github.io/img/Vue2-nextTick/%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;本次更新循环&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;首先修改数据，这是同步任务。同一事件循环的所有同步任务都在主线程上执行，形成一个执行栈，此时还未设计DOM&lt;/li&gt;
&lt;li&gt;Vue开启一个异步队列，并缓冲再次事件循环中发生的所有数据改变。如果同一个watcher被多次执行，只会被推入到队列中一次&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;下次更新循环&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;同步任务执行完毕，开始执行异步watcher队列的任务，更新DOM。Vue在内部尝试对异步队列使用原生的Promise.then和messageChannel方法，如果执行环境不支持，会采用setTimeOut(fn,0)代替&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;下次更新循环结束之后&lt;/p&gt;
&lt;p&gt;此时通过Vue.nextTick获取到改变后的DOM。通过setTimeOut(fn,0)也可以同样获取到&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;简单总结事件循环：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;同步代码执行&lt;/li&gt;
&lt;li&gt;查找异步队列，推入执行栈，执行Vue.nextTick[事件1]&lt;/li&gt;
&lt;li&gt;查找异步队列，推入执行栈，执行Vue.nextTick[事件2]&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;总之，异步是单独的一个tick，不会和同步在同一个tick里发生，也是DOM不会马上改变的原有&lt;/p&gt;
&lt;h1 id=&#34;应用场景&#34;&gt;应用场景&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;在 created 和 mounted 阶段，如果需要操作渲染后的试图，也要使用 nextTick 方法。&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;官方文档说明：注意 mounted 不会承诺所有的子组件也都一起被挂载。如果你希望等到整个视图都渲染完毕，可以用 vm.$nextTick 替换掉 mounted&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;created(){
    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; that&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;
    that.$nextTick(
    	&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;(){  
    		&lt;span style=&#34;color:#6272a4&#34;&gt;//不使用this.$nextTick()方法会报错
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;        	that.$refs.aa.innerHTML &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;created中更改了按钮内容&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#6272a4&#34;&gt;// 写入到DOM元素
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;        }
    })
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;当项目中你想在改变 DOM 元素的数据后基于新的 dom 做点什么，对新 DOM 一系列的 js 操作都需要放进 Vue.nextTick()的回调函数中；通俗的理解是：更改数据后当你想立即使用 js 操作新的视图的时候需要使用它&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-vue&#34; data-lang=&#34;vue&#34;&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;template&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;app&amp;#34;&lt;/span&gt;&amp;gt;
        &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;ref&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;msgDiv&amp;#34;&lt;/span&gt;&amp;gt;{{msg}}&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
      	&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;v-if&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;=&amp;#34;msg1&amp;#34;&lt;/span&gt;&amp;gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;Message&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;got&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;outside&lt;/span&gt; $&lt;span style=&#34;color:#50fa7b&#34;&gt;nextTick&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; {{&lt;span style=&#34;color:#50fa7b&#34;&gt;msg1&lt;/span&gt;}}&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
      	&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;v-if&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;=&amp;#34;msg2&amp;#34;&lt;/span&gt;&amp;gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;Message&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;got&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;inside&lt;/span&gt; $&lt;span style=&#34;color:#50fa7b&#34;&gt;nextTick&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; {{&lt;span style=&#34;color:#50fa7b&#34;&gt;msg2&lt;/span&gt;}}&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
      	&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;v-if&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;=&amp;#34;msg3&amp;#34;&lt;/span&gt;&amp;gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;Message&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;got&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;outside&lt;/span&gt; $&lt;span style=&#34;color:#50fa7b&#34;&gt;nextTick&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; {{&lt;span style=&#34;color:#50fa7b&#34;&gt;msg3&lt;/span&gt;}}&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
      	&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;button&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;@click&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;=&amp;#34;changeMsg&amp;#34;&lt;/span&gt;&amp;gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;Change&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;the&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;Message&lt;/span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;button&lt;/span&gt;&amp;gt;
    &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;template&lt;/span&gt;&amp;gt;
 
&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;span style=&#34;color:#ff79c6&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;default&lt;/span&gt; {
    data () {
        &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; {
            msg&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Hello Vue.&amp;#39;&lt;/span&gt;,
            msg1&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;,
            msg2&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;,
            msg3&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;
        }
    },
    methods&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt;{
        changeMsg() {
            &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.msg &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Hello world.&amp;#34;&lt;/span&gt;
            &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.msg1 &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.$refs.msgDiv.innerHTML
            &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.$nextTick(() =&amp;gt; {
                &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.msg2 &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.$refs.msgDiv.innerHTML
            })
            &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.msg3 &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.$refs.msgDiv.innerHTML
        }
    }
}    
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;点击前&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://damuwangs.github.io/img/Vue2-nextTick/%E7%82%B9%E5%87%BB%E5%89%8D.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;点击后&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://damuwangs.github.io/img/Vue2-nextTick/%E7%82%B9%E5%87%BB%E5%90%8E.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;从图中可以得知：msg1和msg3显示的内容还是变换之前的，而msg2显示的内容是变换之后的&lt;/p&gt;
&lt;h1 id=&#34;通过一个实例理解nexttick&#34;&gt;通过一个实例理解nextTick&lt;/h1&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-vue&#34; data-lang=&#34;vue&#34;&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;template&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;content&amp;#34;&lt;/span&gt;&amp;gt;
        &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;ul&lt;/span&gt;&amp;gt;
            &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;v-for&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;=&amp;#34;item in list1&amp;#34; :key=&amp;#34;item&amp;#34;&amp;gt;{{item}}&amp;lt;/li&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;        &amp;lt;/ul&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;        &amp;lt;ul&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;       	    &amp;lt;li v-for=&amp;#34;item in list2&amp;#34; :key=&amp;#34;item&amp;#34;&amp;gt;{{item}}&amp;lt;/li&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;        &amp;lt;/ul&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;        &amp;lt;ol&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;            &amp;lt;li v-for=&amp;#34;item in list3&amp;#34; :key=&amp;#34;item&amp;#34;&amp;gt;{{item}}&amp;lt;/li&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;        &amp;lt;/ol&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;        &amp;lt;ol&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;            &amp;lt;li v-for=&amp;#34;item in list4&amp;#34; :key=&amp;#34;item&amp;#34;&amp;gt;{{item}}&amp;lt;/li&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;        &amp;lt;/ol&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;        &amp;lt;ol&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;            &amp;lt;li v-for=&amp;#34;item in list5&amp;#34; &lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:key&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;=&amp;#34;item&amp;#34;&lt;/span&gt;&amp;gt;{{&lt;span style=&#34;color:#50fa7b&#34;&gt;item&lt;/span&gt;}}&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt;&amp;gt;
        &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;ol&lt;/span&gt;&amp;gt;
    &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;template&lt;/span&gt;&amp;gt;

&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; {dateFormat} from &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;@/components/JS方法库/util/common.js&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#ff79c6&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;default&lt;/span&gt; {
  data () {
        &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; {
            list1&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; [],
            list2&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; [],
            list3&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; [],
            list4&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; [],
            list5&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; []
        }
    },
    created(){
        &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.composeList12()
        &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.composeList34()
        &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.composeList5()
        &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.$nextTick(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;() {
            &lt;span style=&#34;color:#6272a4&#34;&gt;// DOM 更新了
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;            console.log(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;[7]同步视图更新 - &amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; dateFormat(&lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Date&lt;/span&gt;() ,&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;yyyy-MM-dd hh:mm:ss&amp;#39;&lt;/span&gt;),&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.querySelectorAll(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;li&amp;#39;&lt;/span&gt;).length)
            console.log(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;——————————同步视图更新完成——————————&amp;#39;&lt;/span&gt;)
        })
    },
 
    methods&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; {
        composeList12() {
            &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; i &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;10000&lt;/span&gt;; i&lt;span style=&#34;color:#ff79c6&#34;&gt;++&lt;/span&gt;) {
                &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.$set(&lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.list1, i, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;I am a 测试信息～～啦啦啦&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; i)
            }
            console.log(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;——————————开始更新同步数据——————————&amp;#39;&lt;/span&gt;)
            console.log(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;[1]同步数据更新 - &amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; dateFormat(&lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Date&lt;/span&gt;() ,&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;yyyy-MM-dd hh:mm:ss&amp;#39;&lt;/span&gt;),&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.querySelectorAll(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;li&amp;#39;&lt;/span&gt;).length)

            &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; i &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;10000&lt;/span&gt;; i&lt;span style=&#34;color:#ff79c6&#34;&gt;++&lt;/span&gt;) {
                &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.$set(&lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.list2, i, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;I am a 测试信息～～啦啦啦&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; i)
            }
            console.log(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;[2]同步数据更新 - &amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; dateFormat(&lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Date&lt;/span&gt;() ,&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;yyyy-MM-dd hh:mm:ss&amp;#39;&lt;/span&gt;),&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.querySelectorAll(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;li&amp;#39;&lt;/span&gt;).length)

            &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.$nextTick(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;() {
                &lt;span style=&#34;color:#6272a4&#34;&gt;// DOM 更新了
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;                console.log(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;[1][2]同步视图更新 - &amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; dateFormat(&lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Date&lt;/span&gt;() ,&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;yyyy-MM-dd hh:mm:ss&amp;#39;&lt;/span&gt;),&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.querySelectorAll(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;li&amp;#39;&lt;/span&gt;).length)
            })
        },
        composeList34() {
            &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; i &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;10000&lt;/span&gt;; i&lt;span style=&#34;color:#ff79c6&#34;&gt;++&lt;/span&gt;) {
                &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.$set(&lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.list3, i, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;I am a 测试信息～～啦啦啦&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; i)
            }
            console.log(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;[3]同步数据更新 - &amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; dateFormat(&lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Date&lt;/span&gt;() ,&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;yyyy-MM-dd hh:mm:ss&amp;#39;&lt;/span&gt;),&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.querySelectorAll(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;li&amp;#39;&lt;/span&gt;).length)

            &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.$nextTick(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;() {
                &lt;span style=&#34;color:#6272a4&#34;&gt;// DOM 更新了
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;                console.log(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;[3]同步视图更新 - &amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; dateFormat(&lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Date&lt;/span&gt;() ,&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;yyyy-MM-dd hh:mm:ss&amp;#39;&lt;/span&gt;),&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.querySelectorAll(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;li&amp;#39;&lt;/span&gt;).length)
            })

            setTimeout(&lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.setTimeout1, &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;)
        },
        setTimeout1() {
            &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; i &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;10000&lt;/span&gt;; i&lt;span style=&#34;color:#ff79c6&#34;&gt;++&lt;/span&gt;) {
                &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.$set(&lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.list4, i, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;I am a 测试信息～～啦啦啦&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; i)
            }
            console.log(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;——————————开始更新异步数据——————————&amp;#39;&lt;/span&gt;)
            console.log(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;[4]异步数据更新 - &amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; dateFormat(&lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Date&lt;/span&gt;() ,&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;yyyy-MM-dd hh:mm:ss&amp;#39;&lt;/span&gt;),&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.querySelectorAll(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;li&amp;#39;&lt;/span&gt;).length)

            &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.$nextTick(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;() {
                &lt;span style=&#34;color:#6272a4&#34;&gt;// DOM 更新了
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;                console.log(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;[4]异步视图更新 - &amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; dateFormat(&lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Date&lt;/span&gt;() ,&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;yyyy-MM-dd hh:mm:ss&amp;#39;&lt;/span&gt;),&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.querySelectorAll(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;li&amp;#39;&lt;/span&gt;).length)
            })
        },
        composeList5() {
            &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.$nextTick(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;() {
                &lt;span style=&#34;color:#6272a4&#34;&gt;// DOM 更新了
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;                console.log(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;[5]同步视图更新 - &amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; dateFormat(&lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Date&lt;/span&gt;() ,&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;yyyy-MM-dd hh:mm:ss&amp;#39;&lt;/span&gt;),&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.querySelectorAll(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;li&amp;#39;&lt;/span&gt;).length)
            })

            setTimeout(&lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.setTimeout2, &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;)
        },
        setTimeout2() {
            &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; i &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;10000&lt;/span&gt;; i&lt;span style=&#34;color:#ff79c6&#34;&gt;++&lt;/span&gt;) {
                &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.$set(&lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.list5, i, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;I am a 测试信息～～啦啦啦&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; i)
            }
            console.log(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;[6]异步数据更新 - &amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; dateFormat(&lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Date&lt;/span&gt;() ,&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;yyyy-MM-dd hh:mm:ss&amp;#39;&lt;/span&gt;),&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.querySelectorAll(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;li&amp;#39;&lt;/span&gt;).length)

            &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.$nextTick(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;() {
                &lt;span style=&#34;color:#6272a4&#34;&gt;// DOM 更新了
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;                console.log(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;[6]异步视图更新 - &amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; dateFormat(&lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Date&lt;/span&gt;() ,&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;yyyy-MM-dd hh:mm:ss&amp;#39;&lt;/span&gt;),&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.querySelectorAll(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;li&amp;#39;&lt;/span&gt;).length)
                console.log(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;——————————异步视图更新完成——————————&amp;#39;&lt;/span&gt;)
            })
        },
    }
}
&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;运行结果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://damuwangs.github.io/img/Vue2-nextTick/%E5%AE%9E%E4%BE%8B.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;通过list1、2、3验证，处在同步代码中的DOM更新情况及nextTick的触发时机&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;通过list3、list4验证，同步代码及异步代码中Dom更新及nextTick触发的区别&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;list4、list5对比验证，多个异步代码中nextTick触发的区别&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;通过在视图更新后获取DOM中&lt;!-- raw HTML omitted --&gt;的数量，判断nextTick序列渲染的时间点&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;参考资料&#34;&gt;参考资料&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://segmentfault.com/a/1190000012861862&#34;&gt;Vue.nextTick 的原理和用途&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.ruanyifeng.com/blog/2014/10/event-loop.html&#34;&gt;JavaScript 运行机制详解：再谈Event Loop&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://segmentfault.com/a/1190000017204460&#34;&gt;浏览器进程线程、Web Workers、Event Loop 图解&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
- https://damuwangs.github.io/posts/vue2-nexttick/ - </description>
        </item>
    
    
    
        <item>
        <title>Vue2-刷新组件</title>
        <link>https://damuwangs.github.io/posts/vue2-%E5%88%B7%E6%96%B0%E7%BB%84%E4%BB%B6/</link>
        <pubDate>Mon, 28 Jun 2021 00:00:00 +0000</pubDate>
        
        <guid>https://damuwangs.github.io/posts/vue2-%E5%88%B7%E6%96%B0%E7%BB%84%E4%BB%B6/</guid>
        <description>DaMuWang https://damuwangs.github.io/posts/vue2-%E5%88%B7%E6%96%B0%E7%BB%84%E4%BB%B6/ -&lt;h1 id=&#34;刷新组件&#34;&gt;刷新组件&lt;/h1&gt;
&lt;h2 id=&#34;provideinject-结合-v-if&#34;&gt;provide、inject 结合 v-if&lt;/h2&gt;
&lt;p&gt;这对选项需要一起使用，以允许一个根组件向其所有子组件注入一个依赖，实现原理就是通过控制router-view 的显示与隐藏，来重渲染路由区域，重而达到页面刷新的效果，show -&amp;gt; false -&amp;gt; show&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;修改app.vue，利用 v-if 可以刷新页面的属性，同时使用 provide 和 inject 将祖先节点的数据传递给子代节点&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-vue&#34; data-lang=&#34;vue&#34;&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;template&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;app&amp;#34;&lt;/span&gt;&amp;gt;
        &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;router-view&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;v-if&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;=&amp;#34;isRouterAlive&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#50fa7b&#34;&gt;router&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;-view&lt;/span&gt;&amp;gt;
    &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;template&lt;/span&gt;&amp;gt;
    
&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;span style=&#34;color:#ff79c6&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;default&lt;/span&gt; {
    name&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;App&amp;#39;&lt;/span&gt;,
    provide (){
        &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; {
            reload&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.reload
        }
    },
    data(){
        &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; {
            isRouterAlive&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt;
        }
    },
    methods&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt;{
        reload (){
            &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.isRouterAlive &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;false&lt;/span&gt;
            &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.$nextTick(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;(){
                &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.isRouterAlive &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt;
            })
        }
   }
}
&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在要刷新的子路由页面引入inject,然后执行reload事件即可刷新页面&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;default&lt;/span&gt; {    
    inject&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt;[&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;reload&amp;#39;&lt;/span&gt;],
    data() {
        &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; {}
    },
    methods&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; {
        reflesh(){
            &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.reload()
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;forceupdate&#34;&gt;forceUpdate&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;default&lt;/span&gt; {
    methods&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; {
        handleUpdateClick() {
            &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.$forceUpdate()
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;由于一些嵌套特别深的数据，导致数据更新了，但是页面却没有重新渲染。我遇到的一个情况是，v-for遍历数据渲染，当方法中处理相应数组数据时，数组改变了，但是页面却没有重新渲染&lt;/p&gt;
&lt;p&gt;解决方法：运用 &lt;code&gt;this.$forceUpdate()&lt;/code&gt;强制刷新，解决v-for更新数据不重新渲染页面&lt;/p&gt;
&lt;p&gt;官方解释：迫使 Vue 实例重新渲染。注意它仅仅影响实例本身和插入插槽内容的子组件，而不是所有子组件&lt;/p&gt;
&lt;h2 id=&#34;修改组件key值&#34;&gt;修改组件key值&lt;/h2&gt;
&lt;p&gt;key-changing的原理很简单，vue使用&lt;code&gt;key&lt;/code&gt;标记组件身份，当&lt;code&gt;key&lt;/code&gt;改变时就是释放原始组件，重新加载新的组件&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-vue&#34; data-lang=&#34;vue&#34;&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;template&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
        &lt;span style=&#34;color:#6272a4&#34;&gt;&amp;lt;!--&lt;/span&gt; 父组件 &lt;span style=&#34;color:#ff79c6&#34;&gt;--&amp;gt;&lt;/span&gt;
        &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
            &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;button&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;@click&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;=&amp;#34;reLoad&amp;#34;&lt;/span&gt;&amp;gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;点击重新渲染子组件&lt;/span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;button&lt;/span&gt;&amp;gt;
        &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
        &amp;lt;!-- &lt;span style=&#34;color:#50fa7b&#34;&gt;内容库子组件&lt;/span&gt; --&amp;gt;
        &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;lib-window&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;:key&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;=&amp;#34;time&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;:channelCode&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;=&amp;#34;searchChannelCode&amp;#34;&lt;/span&gt;&amp;gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;/lib-window&amp;gt;
    &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;template&lt;/span&gt;&amp;gt;
 
&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; children from &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;@/components/parent/children&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#ff79c6&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;default&lt;/span&gt; {
    name&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;contentLib&amp;#39;&lt;/span&gt;,
    components&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; { libWindow },
    data () {
        &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; {
            time&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;
        }
    },
    methods&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; {
        reLoad () {
            &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.time &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Date&lt;/span&gt;().getTime()
        }
    }
}
&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;eventhub&#34;&gt;eventHub&lt;/h2&gt;
&lt;p&gt;一般比较适合毫无关系的页面之间的刷新，如页面添加了keep-alive缓存，但是又需要在特定操作下重新初始化数据&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;main.js&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// 给Vue函数添加一个原型属性$eventHub
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;Vue.prototype.$eventHub &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; Vue.prototype.$eventHub &lt;span style=&#34;color:#ff79c6&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; Vue()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;页面A&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// 一般情况下为了避免重名需要给事件名后面加唯一标记
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; timestamp &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Date&lt;/span&gt;.parse(&lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Date&lt;/span&gt;())
&lt;span style=&#34;color:#6272a4&#34;&gt;// 通过路由传参将timestamp传给目标页面
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.$router.push({path&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;/xxx&amp;#39;&lt;/span&gt;, query&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; {timestamp&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; timestamp}})
&lt;span style=&#34;color:#6272a4&#34;&gt;// 父组件发送一个全局事件
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.$eventHub.$emit(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;refresh&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; timestamp)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;页面B&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// 接受路由参数
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; timestamp &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.$route.query.timestamp
&lt;span style=&#34;color:#6272a4&#34;&gt;// 接收全局事件
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.$eventHub.$on(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;refresh&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; timestamp, (params) =&amp;gt; {
  &lt;span style=&#34;color:#6272a4&#34;&gt;// 初始化数据方法
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.fetchData()
})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;参考资料&#34;&gt;参考资料&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/goloving/p/13941836.html&#34;&gt;vue项目刷新当前页面的几种解决方案对比：如何优雅的强制重新渲染子组件&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://cloud.tencent.com/developer/article/1637749&#34;&gt;Vue 数据更新了但页面没有更新的 7 种情况汇总及延伸&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
- https://damuwangs.github.io/posts/vue2-%E5%88%B7%E6%96%B0%E7%BB%84%E4%BB%B6/ - </description>
        </item>
    
    
    
        <item>
        <title>JavaScript-原型链</title>
        <link>https://damuwangs.github.io/posts/javascript-%E5%8E%9F%E5%9E%8B%E9%93%BE/</link>
        <pubDate>Thu, 24 Jun 2021 00:00:00 +0000</pubDate>
        
        <guid>https://damuwangs.github.io/posts/javascript-%E5%8E%9F%E5%9E%8B%E9%93%BE/</guid>
        <description>DaMuWang https://damuwangs.github.io/posts/javascript-%E5%8E%9F%E5%9E%8B%E9%93%BE/ -&lt;ul&gt;
&lt;li&gt;
&lt;h1 id=&#34;原型&#34;&gt;原型&lt;/h1&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h2 id=&#34;理解原型对象&#34;&gt;理解原型对象&lt;/h2&gt;
&lt;p&gt;无论什么时候，只要创建了一个新函数，就会根据一组特定的规则为该函数创建一个prototype属性，这个属性指向函数的原型对象。在默认情况下，所有原型对象都会自动获得一个constructor（构造函数）属性，这个属性包含一个指向prototype属性所在函数的指针。&lt;/p&gt;
&lt;p&gt;使用原型对象的好处是可以让所有对象实例共享它所包含的属性和方法。换句话说不必在构造函数中定义对象实例的信息，而是可以将这些信息直接添加到原型对象中&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; Person() {}
  
Person.prototype.name &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Nicholas&amp;#39;&lt;/span&gt;
Person.prototype.age &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;19&lt;/span&gt;
Person.prototype.sayName &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; () {
    console.log(&lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.name)
}
  
&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; person1 &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; Person()
person1.sayName() &lt;span style=&#34;color:#6272a4&#34;&gt;// 输出：Nicholas
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  
&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; person2 &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; Person()
person2.sayName() &lt;span style=&#34;color:#6272a4&#34;&gt;// 输出：Nicholas
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  
console.log(person1.sayName &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; person2.sayName) &lt;span style=&#34;color:#6272a4&#34;&gt;// 输出：true
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们将sayName()方法和所有属性直接添加到Person的prototype属性中，构造函数变成了空函数。即使如此，也仍然可以通过调用构造函数来创建新对象，而且新对象还会具有相同的属性和方法。但与构造函数模式不同的是，新对象的这些属性和方法是由所有实例共享的。换句话说，person1和person2访问的都是同一组属性和同一个sayName()函数&lt;/p&gt;
&lt;p&gt;创建了自定义构造函数之后，其原型对象默认只会取得constructor属性，至于其它方法，则都是从Object继承而来。当调用构造函数创建一个新实例后，该实例内部将包含一个指针（内部属性）____proto____指向构造函数的原型对象，需要明确的是，这个连接存在与实例和构造函数的原型之间，而不是存在与实例与构造函数之间&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://damuwangs.github.io/img/JavaScript-%E5%8E%9F%E5%9E%8B%E9%93%BE/%E5%8E%9F%E5%9E%8B%E5%85%B3%E7%B3%BB.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;上图展示了Person构造函数、Person的原型属性以及Person现有两个实例之间的关系。在此，Person.prototype指向了原型对象，而Person.prototype.constructor又指回了Person。原型对象中除了包含constructor属性之外，还包括后来添加的其它属性。Person的每个实例person1和person2都包含一个内部属性____proto____，该属性仅仅指向了Person.prototype，换句话说，它们与构造函数没有直接关系。此外，要格外注意的是，虽然这两个实例都不包含属性和方法，但我们却可以调用person1.sayName。这是通过查找对象属性的过程来实现的&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h2 id=&#34;原型搜索机制&#34;&gt;原型搜索机制&lt;/h2&gt;
&lt;p&gt;每当代码读取某个对象的某个属性时，都会执行一次搜索，目标是具有给定名字的属性。搜索首先从对象的实例本身开始。如果在实例中找到了具有给定名字的实现，则返回该属性的值，如果没有找到，则继续搜索指针指向的原型对象，在原型对象中查找给定名字的属性。如果在原型对象中找到了这个属性，则返回该属性的值。也就是说，在我们调用person.sayName()的时候，会先后执行两次搜索。首先，解析器会问：&amp;ldquo;实例person1有sayName属性吗？&amp;ldquo;答：&amp;ldquo;没有。&amp;ldquo;然后，它继续搜索，再问：&amp;ldquo;person1的原型有sayName属性吗？&amp;ldquo;答：&amp;ldquo;有。&amp;ldquo;于是，他就读取那个保存在原型对象中的函数。当我们调用person2.sayName()时，将会重现相同的搜索过程，得到相同的结果。而正是多个对象实例共享原型所保存的属性和方法的基本原理&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h2 id=&#34;注意事项&#34;&gt;注意事项&lt;/h2&gt;
&lt;p&gt;虽然可以通过对象实例访问保存在原型中的值，但却不能通过对象实例重写原型的值。如果我们在实例中添加了一个属性，而该属性与实例原型中的一个属性同名，那我们就在实例中创建该属性，该属性将会屏蔽原型中的那个属性&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; Person() {}
  
Person.prototype.name &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Nicholas&amp;#39;&lt;/span&gt;
Person.prototype.age &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;19&lt;/span&gt;
Person.prototype.sayName &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; () {
    console.log(&lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.name)
}
  
&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; person1 &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; Person()
&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; person2 &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; Person()
person1.name &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;王大木&amp;#39;&lt;/span&gt;
console.log(person1.name) &lt;span style=&#34;color:#6272a4&#34;&gt;// &amp;#39;王大木&amp;#39; ——————来自实例
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;console.log(person2.name) &lt;span style=&#34;color:#6272a4&#34;&gt;// &amp;#39;Nicholas&amp;#39; ——————来自原型
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在这个例子中，person1的name被一个新的值给屏蔽了。但无论访问person1.name还是访问person2.name都能正常的返回值，即分别是&amp;rsquo;王大木&amp;rsquo;（来自对象实例）和&amp;rsquo;Nicholas&amp;rsquo;（来自原型）。当console.log()中访问person1.name时，需要读取它的值，因此就会在这个实例上搜索一个名为name的属性。这个属性确实存在，于是就返回它的值而不必再搜搜索原型了。当以同样的方式访问person2.name时，并没有实例上发现该属性，因此就会继续搜索原型，结果在那里找到了name属性。&lt;/p&gt;
&lt;p&gt;当为对象实例添加一个属性时，这个属性就会屏蔽原型对象中保存的同名属性，换句话说，添加这个属性只会阻止我们访问原型中的属性，但不会修改那个属性。即使这个属性设置为null，也只会在实例中设置这个属性，而不会恢复其指向原型的连接&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h1 id=&#34;原型链&#34;&gt;原型链&lt;/h1&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h2 id=&#34;理解原型链&#34;&gt;理解原型链&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://damuwangs.github.io/img/JavaScript-%E5%8E%9F%E5%9E%8B%E9%93%BE/%E5%8E%9F%E5%9E%8B%E9%93%BE%E5%9B%BE%E7%A4%BA.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;每个构造函数都有一个原型对象，原型对象都包含一个指向构造函数的指针，而实例都包含一个指向原型对象的内部指针。那么，假如我们让原型对象等于另一个类型的实例，结果会怎么样呢？显然，此时的原型对象将包含一个指向另一个原型的指针，相应的，另一个原型中也包含指向另一个构造函数的指针。假如另一个原型又是另一个类型的实例，那么上述关系依然成立，如此层层递进，就够成了实例与原型的链条。这就是所谓原型链的基本概念&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; SuperType() {
    &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.property &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;SuperType&amp;#39;&lt;/span&gt;
}
  
SuperType.prototype.getSuperValue &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; () {
    &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.property
}
  
&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; SubType() {
    &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.subProperty &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;SubType&amp;#39;&lt;/span&gt;
}
  
&lt;span style=&#34;color:#6272a4&#34;&gt;// 继承了 SuperType
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;SubType.prototype &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; SuperType()
  
SubType.prototype.getSubValue &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; () {
    &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.subProperty
}
  
&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; instancce &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; SubType()
console.log(instancce.getSuperValue()) &lt;span style=&#34;color:#6272a4&#34;&gt;// 输出：SuperType
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;以上代码定义了两个类型：SuperType和SubType。每个类型分别有一个属性和一个方法。它们的主要区别是SubType继承了SuperType，而继承时通过创建SuperType的实例，并将实例赋值给SubType.prototype实现的。实现的本质是重写原型对象，代之以一个新类型的实例。换句话说，原来存在于SuperType的实例中的所有属性和方法，现在也存在与于SubType中了。在确立了继承关系之后，我们给SubType.prototype添加了一个方法，这样就继承了SuperType的属性和方法的基础上又添加了一个新方法&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://damuwangs.github.io/img/JavaScript-%E5%8E%9F%E5%9E%8B%E9%93%BE/%E5%8E%9F%E5%9E%8B%E9%93%BE.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;在上面代码中，我们没有使用SubType默认提供的原型，而是给它换了一个新的原型，这个新原型就是SuperType的实例。于是，新原型不仅具有作为一个SuperType的实例所拥有的全部属性和方法，而且内部还有一个指针，指向了SuperType的原型。最终结果就是这样：instance指向SubType的原型，SubType的原型又指向了SuperType的原型。getSuperValue()方法仍然还在SuperType.prototype中，但prototype则位于subType.prototype中。这是因为prototype是一个实例属性，而getSuperValue()则时一个原型方法。既然SubType.prototype现在是superType的实例，那么prototype当然就位于该实例中了&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h2 id=&#34;原型链搜索机制&#34;&gt;原型链搜索机制&lt;/h2&gt;
&lt;p&gt;原型链本质上扩展了原型搜索机制。当以读取模式访问一个实例属性时，首先在会实例中搜索该属性。如果没有找到该属性，则会继续搜索实例的原型。在通过原型链实现继承的情况下，搜索过程就得以沿着原型链继续向上。拿上面的例子来说，调用instance.getSuperValue()会经历三个搜索步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;搜索实例&lt;/li&gt;
&lt;li&gt;搜索SubType.prototype&lt;/li&gt;
&lt;li&gt;搜索SuperType.prototype，最后一步才会找到该方法。在找不到该属性或方法的情况下，搜索过程总要一环一环地前行到原型链末端才会停下来&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h2 id=&#34;默认的原型&#34;&gt;默认的原型&lt;/h2&gt;
&lt;p&gt;所有引用类型默认都继承了Object，而这个继承也是通过原型链实现的。所有函数的默认原型都是Object的实例，因此默认原型都会包含一个内部指针，指向Object.prototype。这也正是所有自定义类型都会继承toString()、valueOf()等默认方法的根本原因。所以上面展示的原型链中还应包括另外一个继承层次&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://damuwangs.github.io/img/JavaScript-%E5%8E%9F%E5%9E%8B%E9%93%BE/%E9%BB%98%E8%AE%A4%E5%8E%9F%E5%9E%8B.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;一句话，SubType继承了SuperType，而SuperType继承了Object。当调用instance.toString()时，实际上调用的时保存在Object.prototype中的那个方法&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h2 id=&#34;注意事项-1&#34;&gt;注意事项&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;子类型有时候需要重写超类型中的某个方法，或者添加超类型中不存在的某个方法。但不管怎样，给原型添加方法的代码一定要放在替换原型的语句之后&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; SuperType() {
    &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.property &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;SuperType&amp;#39;&lt;/span&gt;
}
     
SuperType.prototype.getSuperValue &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; () {
    &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.property
}
     
&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; SubType() {
    &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.subProperty &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;SubType&amp;#39;&lt;/span&gt;
}
     
&lt;span style=&#34;color:#6272a4&#34;&gt;// 继承了 SuperType
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;SubType.prototype &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; SuperType()
     
&lt;span style=&#34;color:#6272a4&#34;&gt;// 添加新方法
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;SubType.prototype.getSubValue &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; () {
    &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.subProperty
}
     
&lt;span style=&#34;color:#6272a4&#34;&gt;// 重写超类型中的方法
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;SubType.prototype.getSuperValue &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; () {
    &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;重写SuperType&amp;#39;&lt;/span&gt;
}
     
     
&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; instancce &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; SubType()
console.log(instancce.getSuperValue()) &lt;span style=&#34;color:#6272a4&#34;&gt;// 输出： 重写SuperType
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;以上代码中，第一个方法getSubValue()被添加到了SubType中，第二个方法getSuperValue是原型中已经存在的一个方法，但重写这个方法会屏蔽原来的那个方法。换句话说，当通过SubType的实例调用getSuperValue()时，调用的就是这个重新定义的方法，但通过SuperType的实例调用getSuperValue()时，还会继续调用原来的那个方法。这里要格外注意的时，必须在用SuperType的实例替换原型之后，再定义这两个方法&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;通过原型链实现继承时，不能使用对象字面量创建原型方法。因为这样做就会重写原型链&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; SuperType() {
    &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.property &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;SuperType&amp;#39;&lt;/span&gt;
}
     
SuperType.prototype.getSuperValue &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; () {
    &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.property
}
     
&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; SubType() {
    &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.subProperty &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;SubType&amp;#39;&lt;/span&gt;
}
     
&lt;span style=&#34;color:#6272a4&#34;&gt;// 继承了 SuperType
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;SubType.prototype &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; SuperType()
     
&lt;span style=&#34;color:#6272a4&#34;&gt;// 使用字面量添加新方法，会导致上一行代码无效
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;SubType.prototype  &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; {
    getSubValue &lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; () {
       &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.subProperty
   }
} 
     
&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; instancce &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; SubType()
console.log(instancce.getSuperValue()) &lt;span style=&#34;color:#6272a4&#34;&gt;// 输出： error
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;以上代码展示了刚刚把SuperType的实例赋值给原型，接着又将原型替换成一个对象字面量而导致报错。由于现在的原型包含的是一个Object的实例，而非SuperType的实例，因此我们设想中的原型链已经被切断，SubType和SuperType之间已经没有关系了&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在通过原型实现继承时，原型实际上会变成另一个类型的实例。于是原先的实例属性也就顺理成章的变成了现在的原型属性了&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; SuperType() {
    &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.color &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;red&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;blue&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;green&amp;#39;&lt;/span&gt;]
}
     
&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; SubType() {
         
}
     
&lt;span style=&#34;color:#6272a4&#34;&gt;// 继承了 SuperType
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;SubType.prototype &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; SuperType()
     
&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; instance1 &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; SubType()
instance1.color.push(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;black&amp;#39;&lt;/span&gt;)
console.log(instance1.color) &lt;span style=&#34;color:#6272a4&#34;&gt;// 输出：[ &amp;#39;red&amp;#39;, &amp;#39;blue&amp;#39;, &amp;#39;green&amp;#39;, &amp;#39;black&amp;#39; ]
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;     
&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; instance2 &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; SubType()
console.log(instance2.color) &lt;span style=&#34;color:#6272a4&#34;&gt;// 输出：[ &amp;#39;red&amp;#39;, &amp;#39;blue&amp;#39;, &amp;#39;green&amp;#39;, &amp;#39;black&amp;#39; ]
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这个例子中SuberType构造函数定义了一个color属性，该属性包含一个数组（引用类型值）SuperType的每个实例都会又各自包含自己数组的color属性。当SubType通过原型链继承了SuperType之后，SuperType.prototype就变成了SuperType的一个实例，因此它也拥有了一个它自己的color属性，就跟专门创建了一个SubType.prototype.color属性一样。但结果是什么呢？结果是SubType的所有实例都会共享这一个color属性。而我们对instance1.color的修改能够通过instance2.color反应出来，这就充分证实了这一点&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在创建子类型的实例时，不能向超类型的构造函数中传递参数。实际上，应该说是没有办法在不影响所有对象实例的情况下，给超类型的构造函数传递参数&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
- https://damuwangs.github.io/posts/javascript-%E5%8E%9F%E5%9E%8B%E9%93%BE/ - </description>
        </item>
    
    
    
        <item>
        <title>JavaScript-闭包</title>
        <link>https://damuwangs.github.io/posts/javascript-%E9%97%AD%E5%8C%85/</link>
        <pubDate>Mon, 21 Jun 2021 00:00:00 +0000</pubDate>
        
        <guid>https://damuwangs.github.io/posts/javascript-%E9%97%AD%E5%8C%85/</guid>
        <description>DaMuWang https://damuwangs.github.io/posts/javascript-%E9%97%AD%E5%8C%85/ -&lt;h1 id=&#34;概念&#34;&gt;概念&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h2 id=&#34;变量的作用域&#34;&gt;变量的作用域&lt;/h2&gt;
&lt;p&gt;要理解闭包，首先必须理解Javascript特殊的变量作用域&lt;/p&gt;
&lt;p&gt;变量的作用域无非就是两种：全局变量和局部变量&lt;/p&gt;
&lt;p&gt;Javascript语言的特殊之处，就在于函数内部可以直接读取全局变量&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; n&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;999&lt;/span&gt;
&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; f1(){
  alert(n)
}
f1() &lt;span style=&#34;color:#6272a4&#34;&gt;// 999
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在函数外部无法读取函数内的局部变量&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; f1(){
  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; n&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;999&lt;/span&gt;
}
alert(n); &lt;span style=&#34;color:#6272a4&#34;&gt;// error
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;h2 id=&#34;闭包的描述&#34;&gt;闭包的描述&lt;/h2&gt;
&lt;p&gt;闭包就是能够读取其他函数内部变量的函数&lt;/p&gt;
&lt;p&gt;由于在Javascript语言中，只有函数内部的子函数才能读取局部变量，因此可以把闭包简单理解成&amp;quot;定义在一个函数内部的函数&amp;rdquo;&lt;/p&gt;
&lt;p&gt;所以，在本质上，闭包就是将函数内部和函数外部连接起来的一座桥梁，f2函数，就是闭包&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; f1(){
  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; n&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;999&lt;/span&gt;
  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; f2(){
      alert(n)
    }
　　&lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; f2
}
&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; result &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; f1()
result() &lt;span style=&#34;color:#6272a4&#34;&gt;// 999
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;h2 id=&#34;闭包优缺点&#34;&gt;闭包优缺点&lt;/h2&gt;
&lt;p&gt;优点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;希望一个变量长期驻扎在内存中&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;避免全局变量的污染&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;私有成员的存在&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;缺点：闭包会使变量始终保存在内存中，如果不当使用会增大内存消耗&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;应用场景&#34;&gt;应用场景&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h2 id=&#34;匿名自执行函数&#34;&gt;匿名自执行函数&lt;/h2&gt;
&lt;p&gt;我们知道所有的变量，如果不加上var关键字，则默认的会添加到全局对象的属性上去，这样的临时变量加入全局对象有很多坏处，比如：别的函数可能误用这些变量；造成全局对象过于庞大，影响访问速度(因为变量的取值是需要从原型链上遍历的)。除了每次使用变量都是用var关键字外，我们在实际情况下经常遇到这样一种情况，即有的函数只需要执行一次，其内部变量无需维护，比如UI的初始化，那么我们可以使用闭包&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; data&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; {    
    table &lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; [],    
    tree &lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; {}    
};    
       
(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;(dm){    
    &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; i &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt; dm.table.rows; i&lt;span style=&#34;color:#ff79c6&#34;&gt;++&lt;/span&gt;){    
       &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; row &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; dm.table.rows[i]  
       &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; j &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;; j &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt; row.cells; i&lt;span style=&#34;color:#ff79c6&#34;&gt;++&lt;/span&gt;){    
           drawCell(i, j)
       }    
    }    
         
})(data);   
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们创建了一个匿名的函数，并立即执行它，由于外部无法引用它内部的变量，因此在函数执行完后会立刻释放资源，关键是不污染全局对象&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h2 id=&#34;结果缓存&#34;&gt;结果缓存&lt;/h2&gt;
&lt;p&gt;我们开发中会碰到很多情况，设想我们有一个处理过程很耗时的函数对象，每次调用都会花费很长时间，那么我们就需要将计算出来的值存储起来，当调用这个函数的时候，首先在缓存中查找，如果找不到，则进行计算，然后更新缓存并返回值，如果找到了，直接返回查找到的值即可。闭包正是可以做到这一点，因为它不会释放外部的引用，从而函数内部的值可以得以保留&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; CachedSearchBox &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;(){    
    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; cache &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; {},count &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; [];    
    &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; {    
       attachSearchBox &lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;(dsid){    
         &lt;span style=&#34;color:#6272a4&#34;&gt;//如果结果在缓存中
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;           &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt;(dsid &lt;span style=&#34;color:#ff79c6&#34;&gt;in&lt;/span&gt; cache){   
              &lt;span style=&#34;color:#6272a4&#34;&gt;//直接返回缓存中的对象
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;              &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; cache[dsid]    
           }    
           &lt;span style=&#34;color:#6272a4&#34;&gt;//新建 
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;           &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; fsb &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; uikit.webctrl.SearchBox(dsid)   
        &lt;span style=&#34;color:#6272a4&#34;&gt;//更新缓存
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;           cache[dsid] &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; fsb
           &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; fsb     
       }  
    }
})()
CachedSearchBox.attachSearchBox(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;input&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这样我们在第二次调用的时候，就会从缓存中读取到该对象&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h2 id=&#34;减少全局变量的污染&#34;&gt;减少全局变量的污染&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;//abc为外部匿名函数的返回值
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; abc &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;(){      
    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; a &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;
    &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;(){
        a&lt;span style=&#34;color:#ff79c6&#34;&gt;++&lt;/span&gt;
        alert(a)
    }
})()
&lt;span style=&#34;color:#6272a4&#34;&gt;//2 调用一次abc函数，其实是调用里面内部函数的返回值  
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;abc()  
&lt;span style=&#34;color:#6272a4&#34;&gt;//3
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;abc() 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;h2 id=&#34;封装&#34;&gt;封装&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; person &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;(){    
    &lt;span style=&#34;color:#6272a4&#34;&gt;//变量作用域为函数内部，外部无法访问    
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; name &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;default&amp;#34;&lt;/span&gt;;              
    &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; {    
       getName &lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;(){    
           &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; name;    
       },    
       setName &lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;(newName){    
           name &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; newName  
       }    
    }    
}() 
&lt;span style=&#34;color:#6272a4&#34;&gt;// 直接访问，结果为undefined         
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;print(person.name) 
print(person.getName())  
person.setName(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;abruzzi&amp;#34;&lt;/span&gt;)   
print(person.getName()) 
     
得到结果如下：  
&lt;span style=&#34;color:#ff79c6&#34;&gt;undefined&lt;/span&gt;  
&lt;span style=&#34;color:#ff79c6&#34;&gt;default&lt;/span&gt;  
abruzzi  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;h2 id=&#34;实现类和继承&#34;&gt;实现类和继承&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; Person(){    
    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; name &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;default&amp;#34;&lt;/span&gt;       
    &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; {    
       getName &lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;(){    
           &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; name;    
       },    
       setName &lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;(newName){    
           name &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; newName;    
       }    
    }    
}   
  
&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; p &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; Person()
p.setName(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Tom&amp;#34;&lt;/span&gt;)
alert(p.getName())
  
&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; Jack &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;(){}
&lt;span style=&#34;color:#6272a4&#34;&gt;//继承自Person
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;Jack.prototype &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; Person()
&lt;span style=&#34;color:#6272a4&#34;&gt;//添加私有方法
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;Jack.prototype.Say &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;(){
  alert(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Hello,my name is Jack&amp;#34;&lt;/span&gt;)
}
&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; j &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; Jack()
j.setName(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Jack&amp;#34;&lt;/span&gt;)
j.Say()
alert(j.getName())
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们定义了Person，它就像一个类，我们new一个Person对象，访问它的方法。下面我们定义了Jack，继承Person，并添加自己的方法。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h2 id=&#34;settimeout传参&#34;&gt;setTimeout传参&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;setTimeout(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;(param){
    alert(param)
},&lt;span style=&#34;color:#bd93f9&#34;&gt;1000&lt;/span&gt;)
  
&lt;span style=&#34;color:#6272a4&#34;&gt;//通过闭包可以实现传参效果
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; func(param){
  &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;(){
      alert(param)
  }
}
&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; f1 &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; func(&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;)
setTimeout(f1,&lt;span style=&#34;color:#bd93f9&#34;&gt;1000&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;h2 id=&#34;为节点循环绑定click事件&#34;&gt;为节点循环绑定click事件&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; count() {
    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; arr &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; []
    &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; i&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;; i&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;=&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt;; i&lt;span style=&#34;color:#ff79c6&#34;&gt;++&lt;/span&gt;) {
        arr.push(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; () {
            &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; i &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt; i
        })
    }
    &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; arr
}
  
&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; results &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; count()
&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; f1 &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; results[&lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;]
&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; f2 &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; results[&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;]
&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; f3 &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; results[&lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在上面的例子中，每次循环，都创建了一个新的函数，然后，把创建的3个函数都添加到一个Array中返回了。&lt;/p&gt;
&lt;p&gt;你可能认为调用f1()，f2()和f3()结果应该是 &lt;code&gt;1 4 9&lt;/code&gt;， 但实际结果是：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;f1() &lt;span style=&#34;color:#6272a4&#34;&gt;// 16
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;f2() &lt;span style=&#34;color:#6272a4&#34;&gt;// 16
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;f3() &lt;span style=&#34;color:#6272a4&#34;&gt;// 16
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;全部都是16！原因就在于返回的函数引用了变量i，但它并非立刻执行。等到3个函数都返回时，它们所引用的变量i已经变成了4，因此最终结果为16&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;返回闭包时牢记的一点就是：返回函数不要引用任何循环变量，或者后续会发生变化的变量&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果一定要引用循环变量怎么办？方法是再创建一个函数，用该函数的参数绑定循环变量当前的值，无论该循环变量后续如何更改，已绑定到函数参数的值不变：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; count() {
    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; arr &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; []
    &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; i&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;; i&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;=&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt;; i&lt;span style=&#34;color:#ff79c6&#34;&gt;++&lt;/span&gt;) {
        arr.push((&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; (n) {
            &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; () {
                &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; n &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt; n
            }
        })(i))
    }
    &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; arr
}
  
&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; results &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; count()
&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; f1 &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; results[&lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;]
&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; f2 &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; results[&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;]
&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; f3 &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; results[&lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;]
  
f1() &lt;span style=&#34;color:#6272a4&#34;&gt;// 1
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;f2() &lt;span style=&#34;color:#6272a4&#34;&gt;// 4
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;f3() &lt;span style=&#34;color:#6272a4&#34;&gt;// 9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;注意这里用了一个“创建一个匿名函数并立刻执行”的语法：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; (x) {
    &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; x &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt; x
})(&lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt;) &lt;span style=&#34;color:#6272a4&#34;&gt;// 9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;参考资料&#34;&gt;参考资料&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;http://www.ruanyifeng.com/blog/2009/08/learning_javascript_closures.html&#34;&gt;学习Javascript闭包（Closure）&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://segmentfault.com/a/1190000000652891&#34;&gt;详解JS闭包&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/yunfeifei/p/4019504.html&#34;&gt;全面理解Javascript闭包和闭包的几种写法及用途&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://juejin.cn/post/6844903910902087688&#34;&gt;javascript之闭包七（闭包的应用场景）&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://juejin.cn/post/6844903841888993287&#34;&gt;闭包与setTimeout&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/qq_21132509/article/details/80694517&#34;&gt;对JS闭包的理解及常见应用场景&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
- https://damuwangs.github.io/posts/javascript-%E9%97%AD%E5%8C%85/ - </description>
        </item>
    
    
    
        <item>
        <title>2021-面试总结</title>
        <link>https://damuwangs.github.io/posts/2021-%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/</link>
        <pubDate>Wed, 16 Jun 2021 00:00:00 +0000</pubDate>
        
        <guid>https://damuwangs.github.io/posts/2021-%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/</guid>
        <description>DaMuWang https://damuwangs.github.io/posts/2021-%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/ -&lt;h1 id=&#34;javascript&#34;&gt;JavaScript&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h2 id=&#34;跨域&#34;&gt;跨域&lt;/h2&gt;
&lt;p&gt;概念：跨域指浏览器同源策略不允许当前页面所在的源去请求另一个源的数据只要协议，端口，域名中有一个不同就是跨域&lt;/p&gt;
&lt;p&gt;解决：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;服务端更改header，允许跨域&lt;/li&gt;
&lt;li&gt;设置代理服务器
因为客户端请求服务端的数据是存在跨域问题的，而服务器和服务器之间 可以相互请求数据，是没有跨域的概念（如果服务器没有设置禁止跨域的权限问题），也就是说，可以配置一个代理的服务器请求另一个服务器中的数据，然后把请求出来的数据返回到代理服务器中，代理服务器再返回数据给客户端，这样就可以实现跨域访问数据&lt;/li&gt;
&lt;li&gt;jsonp
利用script标签的src属性来实现跨域。 通过将前端方法作为参数传递到服务器端，然后由服务器端注入参数之后再返回，实现服务器端向客户端通信。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h2 id=&#34;getpost区别&#34;&gt;get、post区别&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;get参数url可见，post参数url不可见&lt;/li&gt;
&lt;li&gt;通过拼接url进行传递参数，post通过body体传递参数&lt;/li&gt;
&lt;li&gt;get请求可以缓存，post请求不可以缓存&lt;/li&gt;
&lt;li&gt;get请求页面后退时不产生影响、post请求页面后退时会重新提交请求&lt;/li&gt;
&lt;li&gt;get一般传输数据大小不超过2k-4k，post请求传输数据的大小可配置&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h2 id=&#34;数据类型&#34;&gt;数据类型&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;单类型：String、Number、boolean、null、undefined&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;引用类型：object、function、array、Date、RegExp&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h2 id=&#34;值传递和引用传递&#34;&gt;值传递和引用传递&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;基本类型复制后两个变量完全独立，一方改变都不会影响另一方&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;引用类型复制的时引用，之后的任何一方改变都会映射到另一方&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h2 id=&#34;闭包&#34;&gt;闭包&lt;/h2&gt;
&lt;p&gt;定义：当一个函数的返回值是另外一个函数，而返回的那个函数如果调用了父函数内部的变量，且返回的这个函数在外部被执行，就产生了闭包。说白了就是一个函数，能够读取其它函数的内部变量&lt;/p&gt;
&lt;p&gt;优点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;读取函数内部的变量&lt;/li&gt;
&lt;li&gt;变量长期保存在内存中，不会再外层函数调用后被自动清除&lt;/li&gt;
&lt;li&gt;避免全局变量的污染&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;缺点：常驻内存会增大内存使用量，使用不当会造成内存泄漏&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h2 id=&#34;箭头函数的好处&#34;&gt;箭头函数的好处&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;简洁&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;不会改变this本来的绑定&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h2 id=&#34;事件的冒泡和捕获&#34;&gt;事件的冒泡和捕获&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://damuwangs.github.io/img/2021-%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/%E4%BA%8B%E4%BB%B6%E5%86%92%E6%B3%A1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h2 id=&#34;节流和防抖&#34;&gt;节流和防抖&lt;/h2&gt;
&lt;p&gt;防抖：防抖就是将一段时间内连续的多次触发转化为一次触发。一般可以使用在用户输入停止一段时间过后再去获取数据，而不是每次输入都去获取&lt;/p&gt;
&lt;p&gt;节流：高频事件触发，但在n秒内只会执行一次，如验证码登录时利用setTimeout做的倒计时&lt;/p&gt;
&lt;p&gt;区别：防抖是将多次执行变为最后一次执行，节流是将多次执行变成每隔一段时间执行&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h2 id=&#34;dom加载过程中ready和load的区别&#34;&gt;dom加载过程中ready和load的区别&lt;/h2&gt;
&lt;p&gt;Ready：页面HTML文档解析完成但图片等媒体文件加载完成之前执行
load：完全加载完成之后执行&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h2 id=&#34;字符串反转&#34;&gt;字符串反转&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://damuwangs.github.io/img/2021-%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8F%8D%E8%BD%AC.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h2 id=&#34;slicesplice的区别&#34;&gt;slice、splice的区别&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://damuwangs.github.io/img/2021-%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/slice.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://damuwangs.github.io/img/2021-%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/splice.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h2 id=&#34;深拷贝和浅拷贝&#34;&gt;深拷贝和浅拷贝&lt;/h2&gt;
&lt;p&gt;概念：深拷贝和浅拷贝是只针对Object和Array这样的引用数据类型的。&lt;/p&gt;
&lt;p&gt;浅拷贝只复制指向某个对象的指针，而不复制对象本身，新旧对象还是共享同一块内存。但深拷贝会另外创造一个一模一样的对象，新对象跟原对象不共享内存，修改新对象不会改到原对象。&lt;/p&gt;
&lt;p&gt;浅拷贝：assign()、concat()、slice()&lt;/p&gt;
&lt;p&gt;深拷贝：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;JSON.parse(JSON.stringify())&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;手写递归方法&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;递归方法实现深度克隆原理：遍历对象、数组直到里边都是基本数据类型，然后再去复制，就是深度拷贝&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://damuwangs.github.io/img/2021-%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/%E6%B7%B1%E6%8B%B7%E8%B4%9D.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h2 id=&#34;同步和异步&#34;&gt;同步和异步&lt;/h2&gt;
&lt;p&gt;同步：所有的任务都处在同一队列中，不可以插队，一个任务执行完接着开始执行下一个，相对于浏览器而言，同步的效率过低，一些耗费时间比较长的任务应该用异步来执行。&lt;/p&gt;
&lt;p&gt;异步：将一个任务放入到异步队列中，当这个任务执行完成之后，再从异步队列中提取出来，插队到同步队列中，拿到异步任务的结果，可以提升代码执行的效率，不需要因为一个耗时长的代码而一直等待&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h2 id=&#34;缓存&#34;&gt;缓存&lt;/h2&gt;
&lt;p&gt;cookie sessionStorage和localstorage&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;存储大小&lt;/p&gt;
&lt;p&gt;cookie数据大小不能超过4K&lt;/p&gt;
&lt;p&gt;sessionStorage和localStorage可以达到5M或更大&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;有效时间&lt;/p&gt;
&lt;p&gt;localstorage：浏览器关闭后数据不丢失除非主动删除数据&lt;/p&gt;
&lt;p&gt;sessionStorage：数据在当前浏览器窗口关闭后自动删除&lt;/p&gt;
&lt;p&gt;cookie： 过期时间未到一直有效，即使窗口或浏览器关闭&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;数据与服务器之间的交互方式&lt;/p&gt;
&lt;p&gt;cookie：数据会自动传递到服务器，服务器也可以写cookie到客户端&lt;/p&gt;
&lt;p&gt;sessionStorage和localstorage：仅本地保存，不会发给服务端&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h2 id=&#34;统计出现最多字符&#34;&gt;统计出现最多字符&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://damuwangs.github.io/img/2021-%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/%E7%BB%9F%E8%AE%A1%E6%9C%80%E5%A4%9A%E5%87%BA%E7%8E%B0%E7%9A%84%E5%AD%97%E7%AC%A6.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h2 id=&#34;判断是不是数组&#34;&gt;判断是不是数组&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;instanceof&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://damuwangs.github.io/img/2021-%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/instanceof.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;constructor&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://damuwangs.github.io/img/2021-%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/constructor.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Object.prototype.toString.call&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://damuwangs.github.io/img/2021-%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/prototype.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Array.isArray&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://damuwangs.github.io/img/2021-%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/isArray.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h2 id=&#34;promise&#34;&gt;Promise&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;概念：解决异步编程的一种方法，替代多层嵌套的回调，Promise是一个构造函数，用域封装异步操作并可以获得成功或失败的结果&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Promise all：将多个Promise实例包装成一个新的Promise实例，当所有状态都变成成功时all的状态才变为成功，如果其中一个状态为失败则返回失败结果&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;执行顺序问题&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://damuwangs.github.io/img/2021-%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/Promise.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h2 id=&#34;原型链&#34;&gt;原型链&lt;/h2&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h2 id=&#34;this指向&#34;&gt;this指向&lt;/h2&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h2 id=&#34;ajax&#34;&gt;ajax&lt;/h2&gt;
&lt;p&gt;原理：&lt;/p&gt;
&lt;p&gt;好处：&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h2 id=&#34;小程序api&#34;&gt;小程序API&lt;/h2&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h2 id=&#34;jquery选择器&#34;&gt;Jquery选择器&lt;/h2&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h2 id=&#34;递归计算1100求和&#34;&gt;递归计算1~100求和&lt;/h2&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1 id=&#34;css&#34;&gt;Css&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h2 id=&#34;pxrememvwvh区别&#34;&gt;px,rem,em,vw,vh区别&lt;/h2&gt;
&lt;p&gt;px：绝对单位，页面按精确像素展示&lt;/p&gt;
&lt;p&gt;em：相对单位，基准点为父节点字体的大小，如果自身定义了font-size按自身来计算&lt;/p&gt;
&lt;p&gt;rem：相对单位，可理解为“root em”相对根节点html的字体大小来计算&lt;/p&gt;
&lt;p&gt;vw：视窗宽度，1vw等于视窗宽度的1%&lt;/p&gt;
&lt;p&gt;vh：视窗高度，1vh相当于视窗高度的1%&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h2 id=&#34;box-sizing属性&#34;&gt;box-sizing属性&lt;/h2&gt;
&lt;p&gt;在标准模式下的盒模型下，盒子总宽度/高度 = width/height+padding+border+margin&lt;/p&gt;
&lt;p&gt;在怪异模式下的盒模型下，盒子的总宽度和高度是包含内边距padding和边框border宽度在内的，盒子总宽度/高度=width/height + margin = 内容区宽度/高度 + padding + border + margin;&lt;/p&gt;
&lt;p&gt;box-sizing有两个值一个是content-box，另一个是border-box&lt;/p&gt;
&lt;p&gt;当设置为box-sizing:content-box时，将采用标准模式解析计算&lt;/p&gt;
&lt;p&gt;当设置为box-sizing:border-box时，将采用怪异模式解析计算&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h2 id=&#34;元素居中&#34;&gt;元素居中&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;margin和width实现
在容器上定义一个固定的宽度，然后配合margin左右的值为auto&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;inline-block和父元素text-align&lt;/p&gt;
&lt;p&gt;仅inline-block属性是无法让元素水平居中，他的关键之处要在元素的父容器中设置text-align的属性为“center”，这样才能达到效果：&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h2 id=&#34;自适应方案&#34;&gt;自适应方案&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;固定一个某些宽度，使用一个模式，加上少许的媒体查询&lt;/li&gt;
&lt;li&gt;使用flexbox&lt;/li&gt;
&lt;li&gt;使用百分比加媒体查询&lt;/li&gt;
&lt;li&gt;使用rem&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1 id=&#34;vue&#34;&gt;Vue&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h2 id=&#34;计算属性侦听器区别&#34;&gt;计算属性,侦听器区别&lt;/h2&gt;
&lt;p&gt;【计算属性】
概念：计算属性是一个函数，最后函数返回的结果就是计算属性得到的结果
当我们第一次使用计算属性的时候，会执行计算属性并进行计算，然后将计算的结果缓存起来，后续当外面再去使用计算属性的时候，如果计算属性中使用到的数据没有发生变化，那么就直接读取缓存的结果，不会重新计算&lt;/p&gt;
&lt;p&gt;场景：计算的内容需要依赖多个属性，如果一个数据反复会被使用，但它计算以来的内容很少发生变化时&lt;/p&gt;
&lt;p&gt;【侦听器】
概念：侦听器与data中的属性同名，当属性值发生改变的时候侦听器触发执行&lt;/p&gt;
&lt;p&gt;场景：在计算开销比较大（计算多次数或者异步处理）的时候&lt;/p&gt;
&lt;p&gt;补充：immediate: true 刷新加载 立马触发一次handler&lt;/p&gt;
&lt;p&gt;deep: true 可以深度检测到 person 对象的属性值的变化&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h2 id=&#34;keep-live&#34;&gt;keep-live&lt;/h2&gt;
&lt;p&gt;概念：缓存某个组件，或者某个路由。所有在keep-alive标签下的路由都会被缓存。当组件在 &lt;!-- raw HTML omitted --&gt; 内被切换，它的 activated 和 deactivated 这两个生命周期钩子函数将会被对应执行&lt;/p&gt;
&lt;p&gt;用法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;在路由meta配置isKeepAlive:true&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;inlcude/exclude&lt;/p&gt;
&lt;p&gt;inlcude包含该组件就缓存，exclude不包含该组件就缓存&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;场景：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;节省性能消耗，避免一个组件频繁重新渲染，节省开支&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;保存用户状态&lt;/p&gt;
&lt;p&gt;比如说：我们在填写收货地址的页面，需要跳转到另一个页面通过定位选择地址信息再返回继续填写，这时候需要缓存收货地址页面，避免跳转页面导致用户数据丢失&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h2 id=&#34;v-if和v-show的区别&#34;&gt;v-if和v-show的区别&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;v-show 只是简单的控制元素的 display 属性，v-if 条件为真，元素将会被渲染，条件为假，元素会被销毁&lt;/li&gt;
&lt;li&gt;v-show 有更高的首次渲染开销，而 v-if 的首次渲染开销要小的多&lt;/li&gt;
&lt;li&gt;v-if 有更高的切换开销，v-show 切换开销小&lt;/li&gt;
&lt;li&gt;v-if 有配套的 v-else-if 和 v-else，而 v-show 没有&lt;/li&gt;
&lt;li&gt;v-if 可以搭配 template 使用，而 v-show 不行&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h2 id=&#34;route和router的区别&#34;&gt;route和router的区别&lt;/h2&gt;
&lt;p&gt;route相当于当前正在跳转的路由对象，可以从里面获取name,path,params,query等&lt;/p&gt;
&lt;p&gt;router为VueRouter的实例，相当于一个全局的路由器对象，里面含有很多属性和子对象，例如history对象，经常用的跳转链接就可以用this.$router.push&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h2 id=&#34;hashhistory路由区别&#34;&gt;hash,history路由区别&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;hash路由在地址栏URL上有#，而history路由没有会好看一点&lt;/li&gt;
&lt;li&gt;我们进行回车刷新操作，hash路由会加载到地址栏对应的页面，而history路由一般就404报错了（刷新是网络请求，没有后端准备时会报错）。&lt;/li&gt;
&lt;li&gt;hash路由支持低版本的浏览器，而history路由是HTML5新增的API。&lt;/li&gt;
&lt;li&gt;hash的特点在于它虽然出现在了URL中，但是不包括在http请求中，所以对于后端是没有一点影响的，所以改变hash不会重新加载页面，所以这也是单页面应用的必备。&lt;/li&gt;
&lt;li&gt;history运用了浏览器的历史记录栈，之前有back,forward,go方法&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h2 id=&#34;组件传参方式&#34;&gt;组件传参方式&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;父传子：父组件把数据绑定在引用子组件处的自定义属性上，在子组件中通过props引用&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;子传父：在父组件标签处定义自定义事件，在子组件中通过$emit发送自定义事件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$ref&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;vuex&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;provider inject&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h2 id=&#34;vuex&#34;&gt;vuex&lt;/h2&gt;
&lt;p&gt;概念描述：vuex是vue框架的状态管理器，单页面应用组件之间的状态&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;state：对应vue的data，数据是响应式的，组件从store中读取数据，若store发生改变，依赖这个数据的组件也会更新，通过mapState把全局的state和getter映射到当前组件的computed中&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;getter：对state进行计算操作，他就是store的计算属性。防止多次计算降低性能。可以在多组件之间复用，若一个状态只在一个组件内使用就可以不用getters&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Mutation：更改store中状态的唯一方法且必须是同步函数。在组件中使用 this.$store.commit(&amp;lsquo;xxx&amp;rsquo;) 提交 mutation，或者使用 mapMutations 辅助函数将组件中的 methods 映射为 store.commit 调用&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Action：提交的是 mutation，可以包含任意异步操作。在组件中使用 this.$store.dispatch(&amp;lsquo;xxx&amp;rsquo;) 分发 action，或者使用 mapActions 辅助函数将组件的 methods 映射为 store.dispatch 调用&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Module：将 store 分割成模块，每个模块拥有自己的 state、mutation、action、getter&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h2 id=&#34;过滤器&#34;&gt;过滤器&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://damuwangs.github.io/img/2021-%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/%E8%BF%87%E6%BB%A4%E5%99%A8.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h2 id=&#34;避免v-ifv-for同时用&#34;&gt;避免v-if,v-for同时用&lt;/h2&gt;
&lt;p&gt;v-for 比 v-if 具有更高的优先级，哪怕我们只渲染出一小部分用户的元素,也得在每次重渲染的时候遍历整个列表。&lt;/p&gt;
&lt;p&gt;因此倾向于将v-if放在容器元素上，先判断再循环&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h2 id=&#34;vue双向绑定原理&#34;&gt;Vue双向绑定原理&lt;/h2&gt;
&lt;p&gt;Vue采用数据劫持结合发布者-订阅者模式的方式来实现数据的响应式，vue在初始化的时候，在initState方法中会调取initData方法初始化data数据，对data对象进行遍历，在这个方法中会调observe（监听器，观察者）对用户的数据进行监听，在observe中会对对象new Observe实例化创建监听，在observe中对数据进行判断，如果是数组执行observeArray深度进行监听，继续执行observe方法，如果当前传入的是对象则执行this.walk，对对象进行循环，重新定义对象的属性，这时使用的就是defineReactive，它是vue中的一个核心方法，用来定义响应式。在defineReactive方法中实例化了一个Dep（发布者），通过Object.defineProperty对数据进行拦截，把这些 property 全部转为 getter/setter。get数据的时候，通过dep.depend触发Watcher（订阅者）的依赖收集，收集订阅者，如果数据是数组，执行dependArray，对数组中的每个值通过depend都添加到依赖。set时，会对数据进行比较，如果数据发生了变化会通过dep.notify发布通知，通知watcher，更新视图&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://damuwangs.github.io/img/2021-%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h2 id=&#34;修改数据不重发请求&#34;&gt;修改数据不重发请求&lt;/h2&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1 id=&#34;参考资料&#34;&gt;参考资料&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/143929973&#34;&gt;CSS3面试题2020 - 知乎 (zhihu.com)&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
- https://damuwangs.github.io/posts/2021-%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/ - </description>
        </item>
    
    
    
        <item>
        <title>GitHub Pages&#43;Hugo构建个人博客</title>
        <link>https://damuwangs.github.io/posts/github-pages&#43;hugo%E6%9E%84%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</link>
        <pubDate>Tue, 15 Jun 2021 00:00:00 +0000</pubDate>
        
        <guid>https://damuwangs.github.io/posts/github-pages&#43;hugo%E6%9E%84%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</guid>
        <description>DaMuWang https://damuwangs.github.io/posts/github-pages&#43;hugo%E6%9E%84%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/ -&lt;h1 id=&#34;hugo配置&#34;&gt;hugo配置&lt;/h1&gt;
&lt;h2 id=&#34;1安装&#34;&gt;1、安装&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;下载地址：&lt;a href=&#34;https://github.com/gohugoio/hugo/releases&#34;&gt;https://github.com/gohugoio/hugo/releases&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;我使用的版本：&lt;img src=&#34;https://damuwangs.github.io/img/GitHubPages+Hugo%E6%9E%84%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/hugo%E4%B8%8B%E8%BD%BD%E7%89%88%E6%9C%AC.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;解压后即可使用hugo命令，不过只能在当前文件夹下使用，所以需要配置环境变量&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://damuwangs.github.io/img/GitHubPages+Hugo%E6%9E%84%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/%E6%9F%A5%E7%9C%8Bhugo%E7%89%88%E6%9C%AC.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2配置环境变量&#34;&gt;2、配置环境变量&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;在系统变量Path后面追加一条，为hugo.exe的解压地址我的在D盘&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;D:&lt;span style=&#34;color:#f1fa8c&#34;&gt;\h&lt;/span&gt;ugo_0.83.1_Windows-64bit
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;3项目创建&#34;&gt;3、项目创建&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;通过hugo命令创建站点目录并切换到该目录&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;hugo new site hugo-blog
&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;cd&lt;/span&gt; hugo-blog
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;目录结构如下，此时如果运行的话浏览器会白屏，因为此时只是一个空的站点需要下载主题后才能看到内容&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://damuwangs.github.io/img/GitHubPages+Hugo%E6%9E%84%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/hugo%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;4主题配置&#34;&gt;4、主题配置&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;主题网站：&lt;a href=&#34;https://themes.gohugo.io/&#34;&gt;https://themes.gohugo.io/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;我用的是这个主题：&lt;a href=&#34;https://github.com/AmazingRise/hugo-theme-diary&#34;&gt;https://github.com/AmazingRise/hugo-theme-diary&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;选好主题一般都会直接指向GitHub仓库，下载zip到本地就行&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;将下载好的主题解压移动到项目目录下的themes文件夹&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;配置站点根目录下的config.toml文件&lt;/p&gt;
&lt;p&gt;我用的主题里面有作者提供的实例网站配置，把里面的内容复制到站点根目录的config.toml就完美运行了&lt;/p&gt;
&lt;p&gt;这里需要注意config.toml配置的theme名称必须和themes下的文件夹名称保持一致&lt;/p&gt;
&lt;p&gt;&lt;code&gt;具体hugo的配置还没仔细研究，本篇就简单介绍一下大体的搭建流程，以后可能会写一篇hugo配置/开发相关的&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;5本地预览&#34;&gt;5、本地预览&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;启动 Hugo 预览服务器，构建站点内容到内存中并在检测到文件更改后重新渲染&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;hugo server
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;6内容发布&#34;&gt;6、内容发布&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;在站点目录下有一个content文件夹，在该文件夹下创建一个posts，posts下创建.md格式的文章就可以自动识别发布了&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://damuwangs.github.io/img/GitHubPages+Hugo%E6%9E%84%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/hugo%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%842.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;同理图片静态资源需要放在站点根目录static下，内容中图片引用也是以static为根目录进行读取的&lt;/p&gt;
&lt;p&gt;&lt;code&gt;目前没有处理图片在typora中不能显示，只能在网页预览站点中显示的问题&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;github配置&#34;&gt;GitHub配置&lt;/h1&gt;
&lt;h2 id=&#34;1创建仓库&#34;&gt;1、创建仓库&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;创建一个新仓库，仓库需要命名为xxx.github.io，一个账户只能创建一个GitHub Pages&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://damuwangs.github.io/img/GitHubPages+Hugo%E6%9E%84%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/%E5%88%9B%E5%BB%BA%E5%8D%9A%E5%AE%A2%E9%A1%B9%E7%9B%AE.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;创建好之后顶部点击settings，左侧菜单栏选择pages，点击choose a theme选择一个官方指定主题&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://damuwangs.github.io/img/GitHubPages+Hugo%E6%9E%84%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/%E5%88%9B%E5%BB%BA%E5%8D%9A%E5%AE%A2%E9%A1%B9%E7%9B%AE2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;选择完主题后，访问仓库名就可以访问GitHub Pages主页了&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2github加速&#34;&gt;2、GitHub加速&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;因为同步GitHub经常会出现网络超时的错误，所以在谷歌找了个GitHub加速插件&lt;/p&gt;
&lt;p&gt;这个插件就是在GitHub仓库下载旁边新增了一个加速的按钮，选择国内镜像的仓库地址就不会出现网络超时的问题了&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;插件地址：&lt;a href=&#34;https://chrome.google.com/webstore/detail/github%E5%8A%A0%E9%80%9F/mfnkflidjnladnkldfonnaicljppahpg&#34;&gt;https://chrome.google.com/webstore/detail/github%E5%8A%A0%E9%80%9F/mfnkflidjnladnkldfonnaicljppahpg&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;GitHub地址：&lt;a href=&#34;https://github.com/fhefh2015/Fast-GitHub&#34;&gt;https://github.com/fhefh2015/Fast-GitHub&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;3提交和版本同步&#34;&gt;3、提交和版本同步&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;进入站点根目录执行命令执行编译，创建public目录生成静态html项目&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# 默认在当前文件夹下生成public文件夹&lt;/span&gt;
hugo
&lt;span style=&#34;color:#6272a4&#34;&gt;# 参数d可以自定义生成路径&lt;/span&gt;
hugo -d ../damuwangs.github.io
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;将生成后的静态html项目提交到xxx.github.io仓库，访问xxx.github.io就可以看到更新好的网页了&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;参考资料&#34;&gt;参考资料&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://www.waynerv.com/posts/setup-blog-with-hugo-and-github-pages/&#34;&gt;使用 Hugo 和 GitHub Pages 部署个人博客 | Shall We Code? (waynerv.com)&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
- https://damuwangs.github.io/posts/github-pages&#43;hugo%E6%9E%84%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/ - </description>
        </item>
    
    
  </channel>
</rss> 