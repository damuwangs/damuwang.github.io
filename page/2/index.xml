<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>DaMuWang</title>
    <link>https://damuwangs.github.io/</link>
    <description>Recent content on DaMuWang</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 23 Sep 2021 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="https://damuwangs.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    
        <item>
        <title>重绘、回流</title>
        <link>https://damuwangs.github.io/posts/%E7%BC%96%E7%A8%8B/css-%E9%87%8D%E7%BB%98%E5%9B%9E%E6%B5%81/</link>
        <pubDate>Mon, 09 Aug 2021 00:00:00 +0000</pubDate>
        
        <guid>https://damuwangs.github.io/posts/%E7%BC%96%E7%A8%8B/css-%E9%87%8D%E7%BB%98%E5%9B%9E%E6%B5%81/</guid>
        <description>DaMuWang https://damuwangs.github.io/posts/%E7%BC%96%E7%A8%8B/css-%E9%87%8D%E7%BB%98%E5%9B%9E%E6%B5%81/ -&lt;h1 id=&#34;浏览器渲染&#34;&gt;浏览器渲染&lt;/h1&gt;
&lt;p&gt;浏览器在渲染页面的时候，大致是以下几个步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;解析html生成DOM树，解析css，生成CSSOM树，将DOM树和CSSOM树结合，生成渲染树；&lt;/li&gt;
&lt;li&gt;根据渲染树，浏览器可以计算出网页中有哪些节点，各节点的CSS以及从属关系 - 【回流】&lt;/li&gt;
&lt;li&gt;根据渲染树以及回流得到的节点信息，计算出每个节点在屏幕中的位置 - 【重绘】&lt;/li&gt;
&lt;li&gt;最后将得到的节点位置信息交给浏览器的图形处理程序，让浏览器中显示页面&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;回流&#34;&gt;回流&lt;/h1&gt;
&lt;h2 id=&#34;概念&#34;&gt;概念&lt;/h2&gt;
&lt;p&gt;英文叫reflow，指的是当渲染树中的节点信息发生了大小、边距等问题，需要重新计算各节点和css具体的大小和位置&lt;/p&gt;
&lt;p&gt;例：在css中对一个div修饰的样式中，使用了宽度50%，此时需要将50%转换为具体的像素，这个计算的过程，就是回流的过程&lt;/p&gt;
&lt;h2 id=&#34;容易造成回流的操作&#34;&gt;容易造成回流的操作&lt;/h2&gt;
&lt;h3 id=&#34;1布局流相关操作&#34;&gt;1、布局流相关操作&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;盒模型的相关操作会触发重新布局&lt;/li&gt;
&lt;li&gt;定位相关操作会触发重新布局&lt;/li&gt;
&lt;li&gt;浮动相关操作会触发重新布局&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2改变节点内的内容&#34;&gt;2、改变节点内的内容&lt;/h3&gt;
&lt;p&gt;改变节点的结构或其中的文本结构会触发重新布局&lt;/p&gt;
&lt;h3 id=&#34;3css&#34;&gt;3、css&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;width&lt;/li&gt;
&lt;li&gt;height&lt;/li&gt;
&lt;li&gt;padding&lt;/li&gt;
&lt;li&gt;border&lt;/li&gt;
&lt;li&gt;margin&lt;/li&gt;
&lt;li&gt;position&lt;/li&gt;
&lt;li&gt;top&lt;/li&gt;
&lt;li&gt;left&lt;/li&gt;
&lt;li&gt;bottom&lt;/li&gt;
&lt;li&gt;right&lt;/li&gt;
&lt;li&gt;float&lt;/li&gt;
&lt;li&gt;clear&lt;/li&gt;
&lt;li&gt;text-align&lt;/li&gt;
&lt;li&gt;vertical-align&lt;/li&gt;
&lt;li&gt;line-height&lt;/li&gt;
&lt;li&gt;font-weight&lt;/li&gt;
&lt;li&gt;font-size&lt;/li&gt;
&lt;li&gt;font-family&lt;/li&gt;
&lt;li&gt;overflow&lt;/li&gt;
&lt;li&gt;white-space&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;重绘&#34;&gt;重绘&lt;/h1&gt;
&lt;h2 id=&#34;概念-1&#34;&gt;概念&lt;/h2&gt;
&lt;p&gt;重绘：英文叫repaint，当节点的部分属性发生变化，但不影响布局，只需要重新计算节点在屏幕中的绝对位置并渲染的过程，就叫重绘&lt;/p&gt;
&lt;p&gt;例：改变元素的背景颜色、字体颜色等操作会造成重绘&lt;/p&gt;
&lt;h2 id=&#34;容易造成重绘操作的css&#34;&gt;容易造成重绘操作的CSS&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;color&lt;/li&gt;
&lt;li&gt;border-style&lt;/li&gt;
&lt;li&gt;border-radius&lt;/li&gt;
&lt;li&gt;text-decoration&lt;/li&gt;
&lt;li&gt;box-shadow&lt;/li&gt;
&lt;li&gt;outline&lt;/li&gt;
&lt;li&gt;background&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;优化机制&#34;&gt;优化机制&lt;/h1&gt;
&lt;h2 id=&#34;1浏览器优化&#34;&gt;1、浏览器优化&lt;/h2&gt;
&lt;p&gt;每次回流都会对浏览器造成额外的计算消耗，所以浏览器对于回流和重绘有一定的优化机制&lt;/p&gt;
&lt;p&gt;浏览器通常都会将多次回流操作放入一个队列中，等过了一段时间或操作达到了一定的临界值，然后才会挨个执行，这样能节省一些计算消耗。&lt;/p&gt;
&lt;p&gt;但是在获取布局信息操作的时候，会强制将队列清空，也就是强制回流，比如访问或操作以下或方法时：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;offsetTop&lt;/li&gt;
&lt;li&gt;offsetLeft&lt;/li&gt;
&lt;li&gt;offsetWidth&lt;/li&gt;
&lt;li&gt;offsetHeight&lt;/li&gt;
&lt;li&gt;scrollTop&lt;/li&gt;
&lt;li&gt;scrollLeft&lt;/li&gt;
&lt;li&gt;scrollWidth&lt;/li&gt;
&lt;li&gt;scrollHeight&lt;/li&gt;
&lt;li&gt;clientTop&lt;/li&gt;
&lt;li&gt;clientLeft&lt;/li&gt;
&lt;li&gt;clientWidth&lt;/li&gt;
&lt;li&gt;clientHeight&lt;/li&gt;
&lt;li&gt;getComputedStyle()&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这些属性或方法都需要得到最新的布局信息，所以浏览器必须去回流执行。因此，在项目中，尽量避免使用上述属性或方法，如果非要使用的时候，也尽量将值缓存起来，而不是一直获取&lt;/p&gt;
&lt;h2 id=&#34;2合并样式修改&#34;&gt;2、合并样式修改&lt;/h2&gt;
&lt;p&gt;减少造成回流的次数，如果要给一个节点操作多个css属性，而每一个都会造成回流的话，尽量将多次操作合并成一个，例：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; oDiv &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.querySelector(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;.box&amp;#39;&lt;/span&gt;)
oDiv.style.padding &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;5px&amp;#39;&lt;/span&gt;
oDiv.style.border &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;1px solid #000&amp;#39;&lt;/span&gt;
oDiv.style.margin &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;5px&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;操作div的3个css属性，分别是padding、border、margin，此时就可以考虑将多次操作合并为一次&lt;/p&gt;
&lt;p&gt;方法一：使用style的cssText&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;oDiv.style.cssText &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;padding:5px; border:1px solid #000; margin:5px;&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;方法二：将这几个样式定义给一个类名，然后给标签添加类名&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;style&lt;/span&gt;&amp;gt;
    .&lt;span style=&#34;color:#50fa7b&#34;&gt;pbm&lt;/span&gt;{
        &lt;span style=&#34;color:#ff79c6&#34;&gt;padding&lt;/span&gt;:&lt;span style=&#34;color:#bd93f9&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;; 
        &lt;span style=&#34;color:#ff79c6&#34;&gt;border&lt;/span&gt;:&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;solid&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;#000&lt;/span&gt;; 
        &lt;span style=&#34;color:#ff79c6&#34;&gt;margin&lt;/span&gt;:&lt;span style=&#34;color:#bd93f9&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;
    }
&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;style&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; oDiv &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.querySelector(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;.box&amp;#39;&lt;/span&gt;);
    oDiv.classList.add(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;pbm&amp;#39;&lt;/span&gt;);
&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;3批量操作dom&#34;&gt;3、批量操作DOM&lt;/h2&gt;
&lt;p&gt;当对DOM有多次操作的时候，需要使用一些特殊处理减少触发回流，其实就是对DOM的多次操作，在脱离标准流后，对元素进行的多次操作，不会触发回流，等操作完成后，再将元素放回标准流&lt;/p&gt;
&lt;p&gt;脱离标准流的操作有以下3中：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;隐藏元素&lt;/li&gt;
&lt;li&gt;使用文档碎片&lt;/li&gt;
&lt;li&gt;拷贝节点&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;例：下面对DOM节点的多次操作，每次都会触发回流&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; data &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; [
    {
        id&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;,
        name&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;商品1&amp;#34;&lt;/span&gt;
    },
    {
        id&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;,
        name&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;商品1&amp;#34;&lt;/span&gt;
    },
    {
        id&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt;,
        name&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;商品1&amp;#34;&lt;/span&gt;
    },
    {
        id&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;4&lt;/span&gt;,
        name&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;商品1&amp;#34;&lt;/span&gt;
    }
    &lt;span style=&#34;color:#6272a4&#34;&gt;// 假设后面还有很多
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;]
&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; oUl &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.querySelector(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;ul&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; i&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;;i&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;data.length;i&lt;span style=&#34;color:#ff79c6&#34;&gt;++&lt;/span&gt;){
    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; oLi &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.createElement(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;li&amp;#34;&lt;/span&gt;)
    oLi.innerText &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; data[i].name
    oUl.appendChild(oLi)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这样每次给ul中新增一个li的操作，每次都会触发回流。&lt;/p&gt;
&lt;p&gt;方法一：隐藏ul后，给ul添加节点，添加完成后再将ul显示&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;oUl.style.display &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;none&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; i&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;;i&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;data.length;i&lt;span style=&#34;color:#ff79c6&#34;&gt;++&lt;/span&gt;){
    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; oLi &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.createElement(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;li&amp;#34;&lt;/span&gt;)
    oLi.innerText &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; data[i].name
    oUl.appendChild(oLi)
}
oUl.style.display &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;block&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;此时，在隐藏ul和显示ul的时候，触发了两次回流，给ul添加每个li的时候没有触发回流。&lt;/p&gt;
&lt;p&gt;方法二：创建文档碎片，将所有li先放在文档碎片中，等都放进去以后，再将文档碎片放在ul中&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; fragment &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.createDocumentFragment()
&lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; i&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;;i&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;data.length;i&lt;span style=&#34;color:#ff79c6&#34;&gt;++&lt;/span&gt;){
    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; oLi &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.createElement(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;li&amp;#34;&lt;/span&gt;)
    oLi.innerText &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; data[i].name
    fragment.appendChild(oLi)
}
oUl.appendChild(fragment)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;方法三：将ul拷贝一份，将所有li放在拷贝中，等都放进去以后，使用拷贝替换掉ul&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; newUL &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; oUl.cloneNode(&lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt;);
&lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; i&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;;i&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;data.length;i&lt;span style=&#34;color:#ff79c6&#34;&gt;++&lt;/span&gt;){
    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; oLi &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.createElement(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;li&amp;#34;&lt;/span&gt;);
    oLi.innerText &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; data[i].name;
    newUL.appendChild(oLi);
}
oUl.parentElement.replaceChild(newUl, oUl);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;4避免多次触发布局&#34;&gt;4、避免多次触发布局&lt;/h2&gt;
&lt;p&gt;例：如下回到顶部的操作&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;goBack.onclick &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;(){
    setInterval(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;(){
        &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; t &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.documentElement.scrollTop &lt;span style=&#34;color:#ff79c6&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.body.scrollTop
        t &lt;span style=&#34;color:#ff79c6&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;10&lt;/span&gt;
        &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.documentElement.scrollTop &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.body.scrollTop &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; t
    },&lt;span style=&#34;color:#bd93f9&#34;&gt;20&lt;/span&gt;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;每隔20毫秒都会重新获取滚动过的距离，每次都会触发回流，代码优化如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;goBack.onclick &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;(){
    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; t &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.documentElement.scrollTop &lt;span style=&#34;color:#ff79c6&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.body.scrollTop
    setInterval(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;(){
        t &lt;span style=&#34;color:#ff79c6&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;10&lt;/span&gt;
        &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.documentElement.scrollTop &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.body.scrollTop &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; t
    },&lt;span style=&#34;color:#bd93f9&#34;&gt;20&lt;/span&gt;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;只获取一次，每次都让数字递增，避免每次都获取滚动过的距离&lt;/p&gt;
&lt;p&gt;对于页面中比较复杂的动画，尽量将元素设置为绝对定位，操作元素的定位属性，这样只有这一个元素会回流，如果不是定位的话，容易引起其父元素以及子元素的回流&lt;/p&gt;
&lt;h1 id=&#34;参考资料&#34;&gt;参考资料&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/342371522&#34;&gt;讲清楚重排或回流、重绘&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
- https://damuwangs.github.io/posts/%E7%BC%96%E7%A8%8B/css-%E9%87%8D%E7%BB%98%E5%9B%9E%E6%B5%81/ - </description>
        </item>
    
    
    
        <item>
        <title>Vue2-token</title>
        <link>https://damuwangs.github.io/posts/%E7%BC%96%E7%A8%8B/vue2-token/</link>
        <pubDate>Fri, 06 Aug 2021 00:00:00 +0000</pubDate>
        
        <guid>https://damuwangs.github.io/posts/%E7%BC%96%E7%A8%8B/vue2-token/</guid>
        <description>DaMuWang https://damuwangs.github.io/posts/%E7%BC%96%E7%A8%8B/vue2-token/ -&lt;h1 id=&#34;token的含义&#34;&gt;token的含义&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;1、Token的引入：
Token是在客户端频繁向服务端请求数据，服务端频繁的去数据库查询用户名和密码并进行对比，判断用户名和密码正确与否，并作出相应提示，在这样的背景下，Token便应运而生。&lt;/p&gt;
&lt;p&gt;2、Token的定义：
Token是服务端生成的一串字符串，以作客户端进行请求的一个令牌，当第一次登录后，服务器生成一个Token便将此Token返回给客户端，以后客户端只需带上这个Token前来请求数据即可，无需再次带上用户名和密码。&lt;/p&gt;
&lt;p&gt;3、使用Token的目的：
Token的目的是为了减轻服务器的压力，减少频繁的查询数据库，使服务器更加健壮。&lt;/p&gt;
&lt;p&gt;4、Token 的优点：
扩展性更强，也更安全点，非常适合用在 Web 应用或者移动应用上。Token 的中文有人翻译成 “令牌”，我觉得挺好，意思就是，你拿着这个令牌，才能过一些关卡。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;项目中使用token&#34;&gt;项目中使用token&lt;/h1&gt;
&lt;p&gt;说明&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;文件名称&lt;/th&gt;
&lt;th&gt;功能描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;auth.js&lt;/td&gt;
&lt;td&gt;设置、获取以及清空cookie&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;http.js&lt;/td&gt;
&lt;td&gt;接口请求封装&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;store.js&lt;/td&gt;
&lt;td&gt;对接业务的状态管理，负责登录、登出状态的保存和移除&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;流程梳理&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;用户输入信息点击登录，调用store.js中的Login方法请求登录接口，调用成功返回200回传token值&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;接着调用SaveLoginInfo方法，将token值state中保存一份，再调用setToken将token在cookie中也保存一份&lt;/p&gt;
&lt;p&gt;因为vuex刷新页面数据会丢，所以在cookie里面也放了一份，使用的时候只需要通过getter方法获取state就可以，state默认值为调用getToken获取的cookie中的token值&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;此时token对象就可以全局使用了，除登录以外的所有接口请求都要传token，否则会报505错误&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;token由服务端生成，设置了失效时间为24小时&lt;/p&gt;
&lt;p&gt;当token过期，前端再发送请求，服务端会返回505，此响应会被http.js的拦截器捕获&lt;/p&gt;
&lt;p&gt;捕获后先弹框提示‘登录信息已过期，请重新登录&amp;rsquo;，接着调用store.js中的ClearLoginInfo方法清空state中全局token，再调用removeToken移除cookie&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;清空完之后会执行跳转，重新回到登录页面重复步骤一&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;退出登录与登录操作类似，用户点击退出登录按钮，调用store.js里的ClearLoginInfo方法。先清空state中全局token，再调用removeToken移除cookie&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;代码&lt;/p&gt;
&lt;p&gt;auth.js&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; Cookies from &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;js-cookie&amp;#39;&lt;/span&gt;

&lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; TokenKey &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;sxmanage-auth-token&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// tokenKey为固定字符串
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#6272a4&#34;&gt;// 根据TokenKey获取cookie中的token信息
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; getToken () {
  &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; Cookies.get(TokenKey)
}
&lt;span style=&#34;color:#6272a4&#34;&gt;// 设置将token设置到cookie中
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; setToken (token) {
  &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; Cookies.set(TokenKey, token)
}
&lt;span style=&#34;color:#6272a4&#34;&gt;// 根据tTokenKey移除cookie中的token信息
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; removeToken () {
  &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; Cookies.remove(TokenKey)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;http.js&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; axios from &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;axios&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; store from &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;@/store&amp;#39;&lt;/span&gt;

&lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; service &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; axios.create({
    timeout&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;30000&lt;/span&gt;, &lt;span style=&#34;color:#6272a4&#34;&gt;// request timeout
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    withCredentials&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt;
})

&lt;span style=&#34;color:#6272a4&#34;&gt;// resposne interceptor
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;service.interceptors.response.use(
    response =&amp;gt; {
        &lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; res &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; response.data
        &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; (res.c &lt;span style=&#34;color:#ff79c6&#34;&gt;===&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;505&lt;/span&gt;)  {
            alert(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;登录信息已过期，请重新登录&amp;#39;&lt;/span&gt;)
            &lt;span style=&#34;color:#6272a4&#34;&gt;// 清除数据
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;            store.dispatch(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;ClearLoginInfo&amp;#39;&lt;/span&gt;).then(() =&amp;gt; {
                &lt;span style=&#34;color:#6272a4&#34;&gt;// 跳转到登录页面
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;                router.push(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;/login&amp;#39;&lt;/span&gt;)
            })
        }
        &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; response
    }, error =&amp;gt; {
        &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Promise&lt;/span&gt;.reject(error)
    }
)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;store.js&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; Vuex from &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;vuex&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; Vue from &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;vue&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; { base } from &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;@/api/base&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; { getToken, setToken, removeToken} from &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;@/utils/auth&amp;#39;&lt;/span&gt;

Vue.use(Vuex)

&lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; state &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; {
  token&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; getToken()
}

&lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; getters &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; {
  token&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; state =&amp;gt; state.token
}

&lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; mutations &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; {
  SET_TOKEN&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; (state, token) =&amp;gt; {
    state.token &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; token
  }
}

&lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; actions &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; {
  &lt;span style=&#34;color:#6272a4&#34;&gt;/** 登录 */&lt;/span&gt;
  Login&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; ({ commit, dispatch }, userInfo) =&amp;gt; {
    &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Promise&lt;/span&gt;((resolve, reject) =&amp;gt; {
      base.login(userInfo).then(response =&amp;gt; {
        &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; (response.data.c &lt;span style=&#34;color:#ff79c6&#34;&gt;===&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;200&lt;/span&gt;) {
          &lt;span style=&#34;color:#6272a4&#34;&gt;// 先清除数据
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;          dispatch(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;ClearLoginInfo&amp;#39;&lt;/span&gt;)
          &lt;span style=&#34;color:#6272a4&#34;&gt;// 再保存数据
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;          dispatch(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;SaveLoginInfo&amp;#39;&lt;/span&gt;, response.data)
          resolve(response.data)
        } &lt;span style=&#34;color:#ff79c6&#34;&gt;else&lt;/span&gt; {
          reject(response.data.c)
        }
      })
    })
  },
  &lt;span style=&#34;color:#6272a4&#34;&gt;// 保存登录信息
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  SaveLoginInfo&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; ({ commit }, data) =&amp;gt; {
    &lt;span style=&#34;color:#6272a4&#34;&gt;// state保存token
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    commit(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;SET_TOKEN&amp;#39;&lt;/span&gt;, data.v.token)
    &lt;span style=&#34;color:#6272a4&#34;&gt;// 保存token到cookie中
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    setToken(data.v.token)
  },
  &lt;span style=&#34;color:#6272a4&#34;&gt;/** 清除数据 */&lt;/span&gt;
  ClearLoginInfo&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; ({ commit }) =&amp;gt; {
    &lt;span style=&#34;color:#6272a4&#34;&gt;// 清除数据
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    commit(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;SET_TOKEN&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;)
    &lt;span style=&#34;color:#6272a4&#34;&gt;// 清除cookie中的token
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    removeToken()
  }
}

&lt;span style=&#34;color:#ff79c6&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;default&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; Vuex.Store({
  state,
  getters,
  mutations,
  actions
})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;参考资料&#34;&gt;参考资料&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/cmj6706/article/details/79032703&#34;&gt;token详解以及应用原理&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
- https://damuwangs.github.io/posts/%E7%BC%96%E7%A8%8B/vue2-token/ - </description>
        </item>
    
    
    
        <item>
        <title>JavaScript-跨域</title>
        <link>https://damuwangs.github.io/posts/%E7%BC%96%E7%A8%8B/javascript-%E8%B7%A8%E5%9F%9F/</link>
        <pubDate>Wed, 04 Aug 2021 00:00:00 +0000</pubDate>
        
        <guid>https://damuwangs.github.io/posts/%E7%BC%96%E7%A8%8B/javascript-%E8%B7%A8%E5%9F%9F/</guid>
        <description>DaMuWang https://damuwangs.github.io/posts/%E7%BC%96%E7%A8%8B/javascript-%E8%B7%A8%E5%9F%9F/ -&lt;h1 id=&#34;概述&#34;&gt;概述&lt;/h1&gt;
&lt;h2 id=&#34;含义&#34;&gt;含义&lt;/h2&gt;
&lt;p&gt;1995年，同源政策由 Netscape 公司引入浏览器。目前，所有浏览器都实行这个政策&lt;/p&gt;
&lt;p&gt;最初，它的含义是指，A网页设置的 Cookie，B网页不能打开，除非这两个网页&amp;quot;同源&amp;rdquo;&lt;/p&gt;
&lt;p&gt;所谓&amp;quot;同源&amp;quot;指的是&amp;quot;三个相同&amp;rdquo;&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;协议相同&lt;/li&gt;
&lt;li&gt;域名相同&lt;/li&gt;
&lt;li&gt;端口相同&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;常见跨域场景&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://damuwangs.github.io/img/JavaScript-%E8%B7%A8%E5%9F%9F/%E5%9C%BA%E6%99%AF.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;目的&#34;&gt;目的&lt;/h2&gt;
&lt;p&gt;同源政策的目的，是为了保证用户信息的安全，防止恶意的网站窃取数据。&lt;/p&gt;
&lt;p&gt;设想这样一种情况：A网站是一家银行，用户登录以后，又去浏览其他网站。如果其他网站可以读取A网站的 Cookie，会发生什么？&lt;/p&gt;
&lt;p&gt;很显然，如果 Cookie 包含隐私（比如存款总额），这些信息就会泄漏。更可怕的是，Cookie 往往用来保存用户的登录状态，如果用户没有退出登录，其他网站就可以冒充用户，为所欲为。因为浏览器同时还规定，提交表单不受同源政策的限制&lt;/p&gt;
&lt;p&gt;由此可见，&amp;ldquo;同源政策&amp;quot;是必需的，否则 Cookie 可以共享，互联网就毫无安全可言了&lt;/p&gt;
&lt;h2 id=&#34;限制范围&#34;&gt;限制范围&lt;/h2&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Cookie、LocalStorage 和 IndexDB 无法读取&lt;/li&gt;
&lt;li&gt;DOM 无法获得&lt;/li&gt;
&lt;li&gt;AJAX 请求不能发送&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;解决方案&#34;&gt;解决方案&lt;/h1&gt;
&lt;h2 id=&#34;cors&#34;&gt;CORS&lt;/h2&gt;
&lt;p&gt;CORS 即是指跨域资源共享。它允许浏览器向非同源服务器，发出 Ajax 请求，从而克服了 Ajax 只能同源使用的限制。这种方式的跨域主要是在后端进行设置&lt;/p&gt;
&lt;p&gt;这种方式的关键是后端进行设置，即是后端开启 Access-Control-Allow-Origin 为*或对应的origin就可以实现跨域&lt;/p&gt;
&lt;p&gt;cors.html&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; xhr &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; XMLHttpRequest() xhr.open(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;GET&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;http://localhost:8002/request&amp;#39;&lt;/span&gt;)
xhr.send(&lt;span style=&#34;color:#ff79c6&#34;&gt;null&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;server.js&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; express &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; require(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;express&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; app &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; express()

app.use((req, res, next) =&amp;gt; {
  res.header(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Access-Control-Allow-Origin&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;http://127.0.0.1:5500&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#6272a4&#34;&gt;// 设置允许哪个域访问
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  next()
})

app.get(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;/request&amp;#39;&lt;/span&gt;, (req, res) =&amp;gt; {
  res.end(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;server ok&amp;#39;&lt;/span&gt;)
})

app.listen(&lt;span style=&#34;color:#bd93f9&#34;&gt;8002&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;jsonp&#34;&gt;Jsonp&lt;/h2&gt;
&lt;p&gt;说明：利用了 script 标签可跨域的特性，在客户端定义一个回调函数（全局函数），请求服务端返回该回调函数的调用，并将服务端的数据以该回调函数参数的形式传递过来，然后该函数就被执行了。该方法需要服务端配合完成&lt;/p&gt;
&lt;p&gt;优点：兼容性好&lt;/p&gt;
&lt;p&gt;缺点：由于 script 本身的限制，该跨域方式仅支持 get 请求，且不安全可能遭受 XSS 攻击&lt;/p&gt;
&lt;p&gt;实现步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;声明一个全局回调函数，参数为服务端返回的 data。&lt;/li&gt;
&lt;li&gt;创建一个 script 标签，拼接整个请求 api 的地址（要传入回调函数名称如 ?callback=getInfo ），赋值给 script 的 src 属性&lt;/li&gt;
&lt;li&gt;服务端接受到请求后处理数据，然后将函数名和需要返回的数据拼接成字符串，拼装完成是执行函数的形式。（getInfo(&amp;lsquo;server data&amp;rsquo;)）&lt;/li&gt;
&lt;li&gt;浏览器接收到服务端的返回结果，调用了声明的回调函数&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;jsonp.html&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; getInfo(data) {
  console.log(data) &lt;span style=&#34;color:#6272a4&#34;&gt;// 告诉你一声， jsonp跨域成功
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;}

&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; script &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.createElement(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;script&amp;#39;&lt;/span&gt;)
script.src &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;http://localhost:3000?callback=getInfo&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.body.appendChild(script)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;server.js&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; express &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; require(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;express&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; app &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; express()

app.get(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;/&amp;#39;&lt;/span&gt;, (req, res) =&amp;gt; {
  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; { callback } &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; req.query
  res.end(&lt;span style=&#34;color:#f1fa8c&#34;&gt;`&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;${&lt;/span&gt;callback&lt;span style=&#34;color:#f1fa8c&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;(&amp;#39;告诉你一声， jsonp跨域成功&amp;#39;)`&lt;/span&gt;)
})

app.listen(&lt;span style=&#34;color:#bd93f9&#34;&gt;3000&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;封装了一个 jsonp 函数&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; jsonp({ url, params, callback }) {
  &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Promise&lt;/span&gt;((resolve, reject) =&amp;gt; {
    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; script &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.createElement(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;script&amp;#39;&lt;/span&gt;)
    &lt;span style=&#34;color:#6272a4&#34;&gt;// 定义全局回调函数
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;window&lt;/span&gt;[callback] &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; (data) {
      resolve(data)
      &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.body.removeChild(script) &lt;span style=&#34;color:#6272a4&#34;&gt;// 调用完毕即删除
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    }

    params &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; { callback, ...params } &lt;span style=&#34;color:#6272a4&#34;&gt;// {callback: &amp;#34;getInfo&amp;#34;, name: &amp;#34;jacky&amp;#34;}
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; paramsArr &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; []
    &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; key &lt;span style=&#34;color:#ff79c6&#34;&gt;in&lt;/span&gt; params) {
      paramsArr.push(&lt;span style=&#34;color:#f1fa8c&#34;&gt;`&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;${&lt;/span&gt;key&lt;span style=&#34;color:#f1fa8c&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;${&lt;/span&gt;params[key]&lt;span style=&#34;color:#f1fa8c&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;`&lt;/span&gt;)
    }
    &lt;span style=&#34;color:#6272a4&#34;&gt;// http://localhost:3000/?callback=getInfo&amp;amp;name=jacky
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    script.src &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;`&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;${&lt;/span&gt;url&lt;span style=&#34;color:#f1fa8c&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;?&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;${&lt;/span&gt;paramsArr.join(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;&amp;amp;&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#f1fa8c&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;`&lt;/span&gt; 
    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.body.appendChild(script)
  })
}

jsonp({
  url&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;http://localhost:3000&amp;#39;&lt;/span&gt;,
  params&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; {
    name&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;jacky&amp;#39;&lt;/span&gt;,
  },
  callback&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;getInfo&amp;#39;&lt;/span&gt;,
}).then(res =&amp;gt; {
  console.log(res) &lt;span style=&#34;color:#6272a4&#34;&gt;// 告诉你一声， jsonp跨域成功
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;node-中间件代理&#34;&gt;Node 中间件代理&lt;/h2&gt;
&lt;p&gt;说明：同源策略是浏览器需要遵循的标准，而如果是服务器向服务器请求就没有跨域一说。&lt;/p&gt;
&lt;p&gt;这次我们使用 express 中间件 http-proxy-middleware 来代理跨域, 转发请求和响应&lt;/p&gt;
&lt;p&gt;实现步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;接受客户端请求&lt;/li&gt;
&lt;li&gt;将请求转发给服务器&lt;/li&gt;
&lt;li&gt;拿到服务器响应数据&lt;/li&gt;
&lt;li&gt;将响应转发给客户端&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;index.html&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; xhr &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; XMLHttpRequest()
xhr.open(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;GET&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;/api/request&amp;#39;&lt;/span&gt;)
xhr.onreadystatechange &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; () =&amp;gt; {
  &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; (xhr.readyState &lt;span style=&#34;color:#ff79c6&#34;&gt;===&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; xhr.status &lt;span style=&#34;color:#ff79c6&#34;&gt;===&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;200&lt;/span&gt;) {
    console.log(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;请求成功，结果是：&amp;#39;&lt;/span&gt;, xhr.responseText) &lt;span style=&#34;color:#6272a4&#34;&gt;// request success
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  }
}
xhr.send(&lt;span style=&#34;color:#ff79c6&#34;&gt;null&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;nodeMdServer.js&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; express &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; require(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;express&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; { createProxyMiddleware } &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; require(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;http-proxy-middleware&amp;#39;&lt;/span&gt;)

&lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; app &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; express()

&lt;span style=&#34;color:#6272a4&#34;&gt;// 设置静态资源
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;app.use(express.&lt;span style=&#34;color:#ff79c6&#34;&gt;static&lt;/span&gt;(__dirname))

&lt;span style=&#34;color:#6272a4&#34;&gt;// 使用代理
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;app.use(
  &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;/api&amp;#39;&lt;/span&gt;,
  createProxyMiddleware({
    target&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;http://localhost:8002&amp;#39;&lt;/span&gt;,
    pathRewrite&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; {
      &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;^/api&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#6272a4&#34;&gt;// 重写路径
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    },
    changeOrigin&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt;,
  })
)

app.listen(&lt;span style=&#34;color:#bd93f9&#34;&gt;8001&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;nodeServer.js&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; express &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; require(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;express&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; app &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; express()

app.get(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;/request&amp;#39;&lt;/span&gt;, (req, res) =&amp;gt; {
  res.end(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;request success&amp;#39;&lt;/span&gt;)
})

app.listen(&lt;span style=&#34;color:#bd93f9&#34;&gt;8002&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;nginx-反向代理&#34;&gt;Nginx 反向代理&lt;/h2&gt;
&lt;p&gt;说明：实现原理类似于 Node 中间件代理，需要你搭建一个中转 nginx 服务器，用于转发请求。这种方式只需修改 Nginx 的配置即可解决跨域问题，前端除了接口换成对应形式，然后前后端不需要修改作其他修改。&lt;/p&gt;
&lt;p&gt;实现思路：通过 nginx 配置一个代理服务器（同域不同端口）做跳板机，反向代理要跨域的域名，这样可以修改 cookie 中 domain 信息，方便当前域 cookie 写入，实现跨域登录&lt;/p&gt;
&lt;p&gt;nginx 目录下修改 nginx.conf&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;// proxy服务器
server {
    listen &lt;span style=&#34;color:#bd93f9&#34;&gt;80&lt;/span&gt;;
    server_name  www.domain1.com;
    location / {
        proxy_pass   http://www.domain2.com:&lt;span style=&#34;color:#bd93f9&#34;&gt;8080&lt;/span&gt;;  &lt;span style=&#34;color:#6272a4&#34;&gt;# 反向代理&lt;/span&gt;
        proxy_cookie_domain www.domain2.com www.domain1.com; &lt;span style=&#34;color:#6272a4&#34;&gt;# 修改cookie里域名&lt;/span&gt;
        index  index.html index.htm;

        &lt;span style=&#34;color:#6272a4&#34;&gt;# 当用webpack-dev-server等中间件代理接口访问nignx时，此时无浏览器参与，故没有同源限制，下面的跨域配置可不启用&lt;/span&gt;
        add_header Access-Control-Allow-Origin http://www.domain1.com;  &lt;span style=&#34;color:#6272a4&#34;&gt;# 当前端只跨域不带cookie时，可为*&lt;/span&gt;
        add_header Access-Control-Allow-Credentials &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt;;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;启动 Nginx&lt;/p&gt;
&lt;p&gt;index.html&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; xhr &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; XMLHttpRequest()
&lt;span style=&#34;color:#6272a4&#34;&gt;// 前端开关：浏览器是否读写cookie
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;xhr.withCredentials &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt;
&lt;span style=&#34;color:#6272a4&#34;&gt;// 访问nginx中的代理服务器
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;xhr.open(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;get&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;http://www.domain1.com:81/?user=admin&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt;)
xhr.send()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;server.js&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; http &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; require(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;http&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; server &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; http.createServer()
&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; qs &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; require(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;querystring&amp;#39;&lt;/span&gt;)
server.on(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;request&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; (req, res) {
  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; params &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; qs.parse(req.url.substring(&lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;))
  &lt;span style=&#34;color:#6272a4&#34;&gt;// 向前台写cookie
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  res.writeHead(&lt;span style=&#34;color:#bd93f9&#34;&gt;200&lt;/span&gt;, {
    &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Set-Cookie&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;l=123456;Path=/;Domain=www.domain2.com;HttpOnly&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#6272a4&#34;&gt;// HttpOnly:脚本无法读取
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  })
  res.write(JSON.stringify(params))
  res.end()
})
server.listen(&lt;span style=&#34;color:#bd93f9&#34;&gt;8080&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;postmessage&#34;&gt;PostMessage&lt;/h2&gt;
&lt;p&gt;postMessage 是 HTML5 XMLHttpRequest Level 2 中的 API，且是为数不多可以跨域操作的 window 属性之一，它可用于解决以下方面的问题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;页面和其打开的新窗口的数据传递&lt;/li&gt;
&lt;li&gt;多窗口之间消息传递&lt;/li&gt;
&lt;li&gt;页面与嵌套的 iframe 消息传递&lt;/li&gt;
&lt;li&gt;上面三个场景的跨域数据传递&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;总之，它可以允许来自不同源的脚本采用异步方式进行有限的通信，可以实现跨文本档、多窗口、跨域消息传递。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;otherWindow.postMessage(message, targetOrigin, [transfer])&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;otherWindow：其他窗口的一个引用，比如 iframe 的 contentWindow 属性、执行 window.open 返回的窗口对象、或者是命名过或数值索引的 window.frames。&lt;/li&gt;
&lt;li&gt;message: 将要发送到其他 window 的数据。&lt;/li&gt;
&lt;li&gt;targetOrigin:通过窗口的 origin 属性来指定哪些窗口能接收到消息事件，其值可以是字符串&amp;rdquo;*&amp;quot;（表示无限制）或者一个 URI。在发送消息的时候，如果目标窗口的协议、主机地址或端口这三者的任意一项不匹配 targetOrigin 提供的值，那么消息就不会被发送；只有三者完全匹配，消息才会被发送。&lt;/li&gt;
&lt;li&gt;transfer(可选)：是一串和 message 同时传递的 Transferable 对象. 这些对象的所有权将被转移给消息的接收方，而发送一方将不再保有所有权。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这次我们把两个 html 文件挂到两个 server 下，采取 fs 读取的方式引入，运行两个 js 文件&lt;/p&gt;
&lt;p&gt;postMessage1.html&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;body&lt;/span&gt;&amp;gt;
  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;iframe&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;http://localhost:8002&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;frameborder&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;0&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;frame&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;onLoad&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;load()&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;iframe&lt;/span&gt;&amp;gt;
  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; load() {
      &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; frame &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.getElementById(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;frame&amp;#39;&lt;/span&gt;)
      frame.contentWindow.postMessage(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;你好，我是postMessage1&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;http://localhost:8002&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#6272a4&#34;&gt;//发送数据
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;      &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;window&lt;/span&gt;.onmessage &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; (e) {
        &lt;span style=&#34;color:#6272a4&#34;&gt;//接受返回数据
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;        console.log(e.data) &lt;span style=&#34;color:#6272a4&#34;&gt;// 你好，我是postMessage2
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;      }
    }
  &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;body&lt;/span&gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;postMsgServer1.js&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; express &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; require(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;express&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; fs &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; require(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;fs&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; app &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; express()

app.get(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;/&amp;#39;&lt;/span&gt;, (req, res) =&amp;gt; {
  &lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; html &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; fs.readFileSync(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;./postMessage1.html&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;utf8&amp;#39;&lt;/span&gt;)
  res.end(html)
})

app.listen(&lt;span style=&#34;color:#bd93f9&#34;&gt;8001&lt;/span&gt;, (req, res) =&amp;gt; {
  console.log(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;server listening on 8001&amp;#39;&lt;/span&gt;)
})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;postMessage2.html&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;body&lt;/span&gt;&amp;gt;
  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;window&lt;/span&gt;.onmessage &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; (e) {
      console.log(e.data) &lt;span style=&#34;color:#6272a4&#34;&gt;// 你好，我是postMessage1
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;      e.source.postMessage(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;你好，我是postMessage2&amp;#39;&lt;/span&gt;, e.origin)
    }
  &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;body&lt;/span&gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;postMsgServer2.js&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; express &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; require(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;express&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; fs &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; require(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;fs&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; app &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; express()

app.get(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;/&amp;#39;&lt;/span&gt;, (req, res) =&amp;gt; {
  &lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; html &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; fs.readFileSync(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;./postMessage2.html&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;utf8&amp;#39;&lt;/span&gt;)
  res.end(html)
})

app.listen(&lt;span style=&#34;color:#bd93f9&#34;&gt;8002&lt;/span&gt;, (req, res) =&amp;gt; {
  console.log(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;server listening on 8002&amp;#39;&lt;/span&gt;)
})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;websocket&#34;&gt;WebSocket&lt;/h2&gt;
&lt;p&gt;说明：WebSocket 是一种网络通信协议。它实现了浏览器与服务器全双工通信，同时允许跨域通讯，长连接方式不受跨域影响&lt;/p&gt;
&lt;p&gt;由于原生 WebSocket API 使用起来不太方便，我们一般都会使用第三方库如 ws&lt;/p&gt;
&lt;p&gt;Web 浏览器和服务器都必须实现 WebSockets 协议来建立和维护连接。由于 WebSockets 连接长期存在，与典型的 HTTP 连接不同，对服务器有重要的影响&lt;/p&gt;
&lt;p&gt;socket.html&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; socket &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; WebSocket(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;ws://localhost:8001&amp;#39;&lt;/span&gt;)
socket.onopen &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; () {
  socket.send(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;向服务端发送数据&amp;#39;&lt;/span&gt;)
}
socket.onmessage &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; (e) {
  console.log(e.data) &lt;span style=&#34;color:#6272a4&#34;&gt;// 服务端传给你的数据
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Server.js&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; express &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; require(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;express&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; WebSocket &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; require(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;ws&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; app &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; express()

&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; wsServer &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; WebSocket.Server({ port&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;8001&lt;/span&gt; })
wsServer.on(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;connection&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; (ws) {
  ws.on(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;message&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; (data) {
    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; buf &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; Buffer.from(data);
    console.log(buf.toString(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;)) &lt;span style=&#34;color:#6272a4&#34;&gt;// 向服务端发送数据
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    ws.send(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;服务端传给你的数据&amp;#39;&lt;/span&gt;)
  })
})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;documentdomain--iframe&#34;&gt;document.domain + iframe&lt;/h2&gt;
&lt;p&gt;说明：这种方式只能用于二级域名相同的情况下。&lt;/p&gt;
&lt;p&gt;比如 a.test.com 和 b.test.com 就属于二级域名，它们都是 test.com 的子域&lt;/p&gt;
&lt;p&gt;只需要给页面添加 document.domain =&#39;test.com&amp;rsquo; 表示二级域名都相同就可以实现跨域。&lt;/p&gt;
&lt;p&gt;比如：页面 a.test.com:3000/test1.html 获取页面 b.test.com:3000/test2.html 中 a 的值&lt;/p&gt;
&lt;p&gt;test1.html&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;body&lt;/span&gt;&amp;gt;
  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;iframe&lt;/span&gt;
    &lt;span style=&#34;color:#50fa7b&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;http://b.test.com:3000/test2.html&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#50fa7b&#34;&gt;frameborder&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;0&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#50fa7b&#34;&gt;onload&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;load()&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;iframe&amp;#34;&lt;/span&gt;
  &amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;iframe&lt;/span&gt;&amp;gt;
  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.domain &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;test.com&amp;#39;&lt;/span&gt;
    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; load() {
      console.log(iframe.contentWindow.a)
    }
  &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;body&lt;/span&gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;test2.html&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.domain &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;test.com&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; a &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;10&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;windowname--iframe&#34;&gt;window.name + iframe&lt;/h2&gt;
&lt;p&gt;浏览器具有这样一个特性：同一个标签页或者同一个 iframe 框架加载过的页面共享相同的 window.name 属性值。在同个标签页里，name 值在不同的页面加载后也依旧存在，这些页面上 window.name 属性值都是相同的&lt;/p&gt;
&lt;p&gt;利用这些特性，就可以将这个属性作为在不同页面之间传递数据的介质&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;由于安全原因，浏览器始终会保持 window.name 是 string 类型&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;a.html&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;body&lt;/span&gt;&amp;gt;
  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;iframe&lt;/span&gt;
    &lt;span style=&#34;color:#50fa7b&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;http://localhost:8002/c.html&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#50fa7b&#34;&gt;frameborder&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;0&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#50fa7b&#34;&gt;onload&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;load()&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;iframe&amp;#34;&lt;/span&gt;
  &amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;iframe&lt;/span&gt;&amp;gt;
  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; first &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt;
    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; load() {
      &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; (first) {
        &lt;span style=&#34;color:#6272a4&#34;&gt;// 第1次onload(跨域页)成功后，切换到同域代理页面
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; iframe &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.getElementById(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;iframe&amp;#39;&lt;/span&gt;)
        iframe.src &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;http://localhost:8001/b.html&amp;#39;&lt;/span&gt;
        first &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;false&lt;/span&gt;
      } &lt;span style=&#34;color:#ff79c6&#34;&gt;else&lt;/span&gt; {
        &lt;span style=&#34;color:#6272a4&#34;&gt;// 第2次onload(同域b.html页)成功后，读取同域window.name中数据
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;        console.log(iframe.contentWindow.name) &lt;span style=&#34;color:#6272a4&#34;&gt;// 我是c.html里的数据
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;      }
    }
  &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;body&lt;/span&gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;b.html（不需要往html加内容，默认html结构模板即可）&lt;/p&gt;
&lt;p&gt;c.html&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;body&lt;/span&gt;&amp;gt;
  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;window&lt;/span&gt;.name &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;我是c.html里的数据&amp;#39;&lt;/span&gt;
  &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;body&lt;/span&gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;c 页面给 window.name 设置了值, 即便 c 页面销毁，但 name 值不会被销毁；a 页面依旧能够得到 window.name&lt;/p&gt;
&lt;h2 id=&#34;locationhash--iframe&#34;&gt;location.hash + iframe&lt;/h2&gt;
&lt;p&gt;说明：实现原理： a.html 欲与 c.html 跨域相互通信，通过中间页 b.html 来实现。 三个页面，不同域之间利用 iframe 的 location.hash 传值，相同域之间直接 js 访问来通信。&lt;/p&gt;
&lt;p&gt;具体实现步骤：一开始 a.html 给 c.html 传一个 hash 值，然后 c.html 收到 hash 值后，再把 hash 值传递给 b.html，最后 b.html 将结果放到 a.html 的 hash 值中。&lt;/p&gt;
&lt;p&gt;同样的，a.html 和 b.html 是同域的，都是http://localhost:8001，也就是说 b 的 hash 值可以直接复制给 a 的 hash。c.html 为http://localhost:8002下的&lt;/p&gt;
&lt;p&gt;a.html&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;body&lt;/span&gt;&amp;gt;
  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;iframe&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;http://localhost:8002/c.html#jackylin&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;style&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;display: none;&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;iframe&lt;/span&gt;&amp;gt;
  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;window&lt;/span&gt;.onhashchange &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; () {
      &lt;span style=&#34;color:#6272a4&#34;&gt;// 检测hash的变化
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;      console.log(&lt;span style=&#34;color:#bd93f9&#34;&gt;456&lt;/span&gt;, location.hash) &lt;span style=&#34;color:#6272a4&#34;&gt;// #monkey
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    }
  &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;body&lt;/span&gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;b.html&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;window&lt;/span&gt;.parent.parent.location.hash &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; location.hash
&lt;span style=&#34;color:#6272a4&#34;&gt;// b.html将结果放到a.html的hash值中，b.html可通过parent.parent访问a.html页面
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;c.html&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;console.log(location.hash) &lt;span style=&#34;color:#6272a4&#34;&gt;//  #jackylin
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; iframe &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.createElement(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;iframe&amp;#39;&lt;/span&gt;)
iframe.src &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;http://localhost:8001/b.html#monkey&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.body.appendChild(iframe)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;参考资料&#34;&gt;参考资料&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://www.ruanyifeng.com/blog/2016/04/same-origin-policy.html&#34;&gt;浏览器同源政策及其规避方法&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://juejin.cn/post/6861553339994374157#heading-5&#34;&gt;前端跨域解决方案归纳整理&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
- https://damuwangs.github.io/posts/%E7%BC%96%E7%A8%8B/javascript-%E8%B7%A8%E5%9F%9F/ - </description>
        </item>
    
    
    
        <item>
        <title>【待补充】CSS3响应式布局</title>
        <link>https://damuwangs.github.io/posts/%E7%BC%96%E7%A8%8B/css3%E5%93%8D%E5%BA%94%E5%BC%8F%E5%B8%83%E5%B1%80/</link>
        <pubDate>Wed, 04 Aug 2021 00:00:00 +0000</pubDate>
        
        <guid>https://damuwangs.github.io/posts/%E7%BC%96%E7%A8%8B/css3%E5%93%8D%E5%BA%94%E5%BC%8F%E5%B8%83%E5%B1%80/</guid>
        <description>DaMuWang https://damuwangs.github.io/posts/%E7%BC%96%E7%A8%8B/css3%E5%93%8D%E5%BA%94%E5%BC%8F%E5%B8%83%E5%B1%80/ -- https://damuwangs.github.io/posts/%E7%BC%96%E7%A8%8B/css3%E5%93%8D%E5%BA%94%E5%BC%8F%E5%B8%83%E5%B1%80/ - </description>
        </item>
    
    
    
        <item>
        <title>【待补充】Less和Sass</title>
        <link>https://damuwangs.github.io/posts/%E7%BC%96%E7%A8%8B/less%E5%92%8Csass/</link>
        <pubDate>Wed, 04 Aug 2021 00:00:00 +0000</pubDate>
        
        <guid>https://damuwangs.github.io/posts/%E7%BC%96%E7%A8%8B/less%E5%92%8Csass/</guid>
        <description>DaMuWang https://damuwangs.github.io/posts/%E7%BC%96%E7%A8%8B/less%E5%92%8Csass/ -- https://damuwangs.github.io/posts/%E7%BC%96%E7%A8%8B/less%E5%92%8Csass/ - </description>
        </item>
    
    
    
        <item>
        <title>CSS-Demo</title>
        <link>https://damuwangs.github.io/posts/%E7%BC%96%E7%A8%8B/css-demo/</link>
        <pubDate>Tue, 03 Aug 2021 00:00:00 +0000</pubDate>
        
        <guid>https://damuwangs.github.io/posts/%E7%BC%96%E7%A8%8B/css-demo/</guid>
        <description>DaMuWang https://damuwangs.github.io/posts/%E7%BC%96%E7%A8%8B/css-demo/ -&lt;ul&gt;
&lt;li&gt;
&lt;h2 id=&#34;border拼接httpscodepeniodamuwangspenvymawzneditors1100&#34;&gt;&lt;a href=&#34;https://codepen.io/damuwangs/pen/vYmaWZN?editors=1100&#34;&gt;border拼接&lt;/a&gt;&lt;/h2&gt;
&lt;/li&gt;
&lt;/ul&gt;
- https://damuwangs.github.io/posts/%E7%BC%96%E7%A8%8B/css-demo/ - </description>
        </item>
    
    
    
        <item>
        <title>Vue-Demo</title>
        <link>https://damuwangs.github.io/posts/%E7%BC%96%E7%A8%8B/vue-demo/</link>
        <pubDate>Tue, 03 Aug 2021 00:00:00 +0000</pubDate>
        
        <guid>https://damuwangs.github.io/posts/%E7%BC%96%E7%A8%8B/vue-demo/</guid>
        <description>DaMuWang https://damuwangs.github.io/posts/%E7%BC%96%E7%A8%8B/vue-demo/ -&lt;ul&gt;
&lt;li&gt;
&lt;h1 id=&#34;组件&#34;&gt;组件&lt;/h1&gt;
&lt;h2 id=&#34;-element-ui表单httpscodepeniodamuwangspenjjnbybw&#34;&gt;-&lt;a href=&#34;https://codepen.io/damuwangs/pen/JjNByBW&#34;&gt;Element-UI表单&lt;/a&gt;&lt;/h2&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h1 id=&#34;自定义指令&#34;&gt;自定义指令&lt;/h1&gt;
&lt;h2 id=&#34;-防抖httpscodepeniodamuwangspenmdmjwre&#34;&gt;-&lt;a href=&#34;https://codepen.io/damuwangs/pen/mdmjwre&#34;&gt;防抖&lt;/a&gt;&lt;/h2&gt;
&lt;h2 id=&#34;-节流httpscodepeniodamuwangspenjompwgv&#34;&gt;-&lt;a href=&#34;https://codepen.io/damuwangs/pen/jOmpwgv&#34;&gt;节流&lt;/a&gt;&lt;/h2&gt;
&lt;/li&gt;
&lt;/ul&gt;
- https://damuwangs.github.io/posts/%E7%BC%96%E7%A8%8B/vue-demo/ - </description>
        </item>
    
    
    
        <item>
        <title>JavaScript-Demo</title>
        <link>https://damuwangs.github.io/posts/%E7%BC%96%E7%A8%8B/javascript-demo/</link>
        <pubDate>Mon, 02 Aug 2021 00:00:00 +0000</pubDate>
        
        <guid>https://damuwangs.github.io/posts/%E7%BC%96%E7%A8%8B/javascript-demo/</guid>
        <description>DaMuWang https://damuwangs.github.io/posts/%E7%BC%96%E7%A8%8B/javascript-demo/ -&lt;ul&gt;
&lt;li&gt;
&lt;h1 id=&#34;日期时间&#34;&gt;日期、时间&lt;/h1&gt;
&lt;h2 id=&#34;-日期格式化httpscodepeniodamuwangspenrwvjeyb&#34;&gt;-&lt;a href=&#34;https://codepen.io/damuwangs/pen/RwVJeYb&#34;&gt;日期格式化&lt;/a&gt;&lt;/h2&gt;
&lt;h2 id=&#34;-日期计算httpscodepeniodamuwangspenvymrqkneditors0012&#34;&gt;-&lt;a href=&#34;https://codepen.io/damuwangs/pen/vYmrQKN?editors=0012&#34;&gt;日期计算&lt;/a&gt;&lt;/h2&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h1 id=&#34;校验&#34;&gt;校验&lt;/h1&gt;
&lt;h2 id=&#34;-身份证校验httpscodepeniodamuwangspenjomkdqqeditors0012&#34;&gt;-&lt;a href=&#34;https://codepen.io/damuwangs/pen/jOmKdqq?editors=0012&#34;&gt;身份证校验&lt;/a&gt;&lt;/h2&gt;
&lt;h2 id=&#34;-邮箱校验httpscodepeniodamuwangspenzekjbvy&#34;&gt;-&lt;a href=&#34;https://codepen.io/damuwangs/pen/ZEKjBvy&#34;&gt;邮箱校验&lt;/a&gt;&lt;/h2&gt;
&lt;h2 id=&#34;-电话校验httpscodepeniodamuwangspenrwvbkapeditors0012&#34;&gt;-&lt;a href=&#34;https://codepen.io/damuwangs/pen/RwVBKaP?editors=0012&#34;&gt;电话校验&lt;/a&gt;&lt;/h2&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h1 id=&#34;字符串&#34;&gt;字符串&lt;/h1&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h1 id=&#34;数字&#34;&gt;数字&lt;/h1&gt;
&lt;h2 id=&#34;-数字转汉字大写httpscodepeniodamuwangspeneywjggpeditors0012&#34;&gt;-&lt;a href=&#34;https://codepen.io/damuwangs/pen/eYWjgGP?editors=0012&#34;&gt;数字转汉字大写&lt;/a&gt;&lt;/h2&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h1 id=&#34;数组&#34;&gt;数组&lt;/h1&gt;
&lt;h2 id=&#34;-数组去重httpscodepeniopeneditors0012&#34;&gt;-&lt;a href=&#34;https://codepen.io/pen/?editors=0012&#34;&gt;数组去重&lt;/a&gt;&lt;/h2&gt;
&lt;h2 id=&#34;-计算数组重复元素httpscodepeniodamuwangspenyzvjnmneditors0012&#34;&gt;-&lt;a href=&#34;https://codepen.io/damuwangs/pen/YzVjNmN?editors=0012&#34;&gt;计算数组重复元素&lt;/a&gt;&lt;/h2&gt;
&lt;h2 id=&#34;-深拷贝httpscodepeniodamuwangspennwjbjereditors0012&#34;&gt;-&lt;a href=&#34;https://codepen.io/damuwangs/pen/NWjBjer?editors=0012&#34;&gt;深拷贝&lt;/a&gt;&lt;/h2&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h1 id=&#34;算法&#34;&gt;算法&lt;/h1&gt;
&lt;/li&gt;
&lt;/ul&gt;
- https://damuwangs.github.io/posts/%E7%BC%96%E7%A8%8B/javascript-demo/ - </description>
        </item>
    
    
    
        <item>
        <title>CSS3动画</title>
        <link>https://damuwangs.github.io/posts/%E7%BC%96%E7%A8%8B/css3%E5%8A%A8%E7%94%BB/</link>
        <pubDate>Fri, 30 Jul 2021 00:00:00 +0000</pubDate>
        
        <guid>https://damuwangs.github.io/posts/%E7%BC%96%E7%A8%8B/css3%E5%8A%A8%E7%94%BB/</guid>
        <description>DaMuWang https://damuwangs.github.io/posts/%E7%BC%96%E7%A8%8B/css3%E5%8A%A8%E7%94%BB/ -&lt;h1 id=&#34;一素转换transform&#34;&gt;一、素转换transform&lt;/h1&gt;
&lt;h2 id=&#34;1元素位置移动translate&#34;&gt;1.元素位置移动translate()&lt;/h2&gt;
&lt;p&gt;参数：左(X轴)，顶部(Y轴)单位px&lt;/p&gt;
&lt;p&gt;样例：&lt;a href=&#34;https://codepen.io/damuwangs/pen/LYymGqJ&#34;&gt;元素位置移动&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;2元素旋转rotate&#34;&gt;2.元素旋转rotate()&lt;/h2&gt;
&lt;p&gt;参数：旋转度数(负值是允许的，这样是元素逆时针旋转)，单位deg&lt;/p&gt;
&lt;p&gt;样例：&lt;a href=&#34;https://codepen.io/damuwangs/pen/qBmYZdQ&#34;&gt;元素旋转&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;3元素缩放scale&#34;&gt;3.元素缩放scale()&lt;/h2&gt;
&lt;p&gt;参数：宽度缩放倍数、高度缩放倍数无参数&lt;/p&gt;
&lt;p&gt;样例：&lt;a href=&#34;https://codepen.io/damuwangs/pen/oNWdxGr&#34;&gt;元素缩放&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;4元素倾斜skew&#34;&gt;4.元素倾斜skew()&lt;/h2&gt;
&lt;p&gt;通过设置倾斜将正方形转化成菱形&lt;/p&gt;
&lt;p&gt;参数：X轴，Y轴单位deg&lt;/p&gt;
&lt;p&gt;样例：&lt;a href=&#34;https://codepen.io/damuwangs/pen/mdmLPKP&#34;&gt;元素倾斜&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;5元素转换matrix&#34;&gt;5.元素转换matrix()&lt;/h2&gt;
&lt;p&gt;方法：将上面的方法合并成一个，matrix 方法有六个参数，包含旋转，缩放，移动（平移）和倾斜功能&lt;/p&gt;
&lt;h1 id=&#34;二过渡transition&#34;&gt;二、过渡transition&lt;/h1&gt;
&lt;p&gt;属性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;transition-property：规定应用过渡的 CSS 属性的名称&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;transition-duration：定义过渡效果花费的时间。默认是 0&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;transition-timing-function：规定过渡效果的时间曲线。默认是 &amp;ldquo;ease&amp;rdquo;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;linear：规定以相同速度开始至结束的过渡效果（等于 cubic-bezier(0,0,1,1)）&lt;/li&gt;
&lt;li&gt;ease：规定慢速开始，然后变快，然后慢速结束的过渡效果（cubic-bezier(0.25,0.1,0.25,1)）&lt;/li&gt;
&lt;li&gt;ease-in：规定以慢速开始的过渡效果（等于 cubic-bezier(0.42,0,1,1)）&lt;/li&gt;
&lt;li&gt;ease-out：规定以慢速结束的过渡效果（等于 cubic-bezier(0,0,0.58,1)）&lt;/li&gt;
&lt;li&gt;ease-in-out：规定以慢速开始和结束的过渡效果（等于 cubic-bezier(0.42,0,0.58,1)）&lt;/li&gt;
&lt;li&gt;cubic-bezier(n,n,n,n)：在 cubic-bezier 函数中定义自己的值。可能的值是 0 至 1 之间的数值&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;transition-delay：规定过渡效果何时开始。默认是 0&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;样例：&lt;a href=&#34;https://codepen.io/damuwangs/pen/ExmLyJy&#34;&gt;blog - CSS3动画 - 过渡&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;三动画animation&#34;&gt;三、动画animation&lt;/h1&gt;
&lt;p&gt;属性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;@keyframes：声明动画&lt;/li&gt;
&lt;li&gt;animation-name：引入动画&lt;/li&gt;
&lt;li&gt;animation-duration： 规定动画完成一个周期所花费的秒或毫秒。默认是 0，单位s&lt;/li&gt;
&lt;li&gt;animation-timing-function：规定动画的速度曲线。默认是 &amp;ldquo;ease&amp;rdquo;，设置同上&lt;/li&gt;
&lt;li&gt;animation-fill-mode：规定当动画不播放时，要应用到元素的样式。&lt;/li&gt;
&lt;li&gt;animation-delay：规定动画何时开始。默认是 0，单位s&lt;/li&gt;
&lt;li&gt;animation-iteration-count：规定动画被播放的次数。
&lt;ul&gt;
&lt;li&gt;填写一个数字，默认是 1&lt;/li&gt;
&lt;li&gt;infinite指定动画应该播放无限次&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;animation-direction：规定动画是否在下一周期逆向地播放，默认是 &amp;ldquo;normal&amp;rdquo;
&lt;ul&gt;
&lt;li&gt;normal：默认值。动画按正常播放&lt;/li&gt;
&lt;li&gt;reverse：动画反向播放&lt;/li&gt;
&lt;li&gt;alternate：动画在奇数次（1、3、5&amp;hellip;）正向播放，在偶数次（2、4、6&amp;hellip;）反向播放&lt;/li&gt;
&lt;li&gt;reverse：动画在奇数次（1、3、5&amp;hellip;）反向播放，在偶数次（2、4、6&amp;hellip;）正向播放&lt;/li&gt;
&lt;li&gt;initial：设置该属性为它的默认值&lt;/li&gt;
&lt;li&gt;inherit：从父元素继承该属性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;animation-play-state：规定动画是否正在运行或暂停，默认是 &amp;ldquo;running&amp;rdquo;
&lt;ul&gt;
&lt;li&gt;paused：指定暂停动画&lt;/li&gt;
&lt;li&gt;running：指定正在运行的动画&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;样例：&lt;a href=&#34;https://codepen.io/damuwangs/pen/xxdjEoz&#34;&gt;blog - CSS3动画 - 动画&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;参考资料&#34;&gt;参考资料&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://segmentfault.com/q/1010000003867335&#34;&gt;如何理解animation-fill-mode及其使用？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://c.runoob.com/codedemo/5528&#34;&gt;HTML+CSS 绘制太阳系各个行星运行轨迹&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://c.runoob.com/codedemo/5645&#34;&gt;CSS 太极旋转图&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
- https://damuwangs.github.io/posts/%E7%BC%96%E7%A8%8B/css3%E5%8A%A8%E7%94%BB/ - </description>
        </item>
    
    
    
        <item>
        <title>JavaScript-防抖、节流</title>
        <link>https://damuwangs.github.io/posts/%E7%BC%96%E7%A8%8B/javascript-%E9%98%B2%E6%8A%96%E8%8A%82%E6%B5%81/</link>
        <pubDate>Fri, 16 Jul 2021 00:00:00 +0000</pubDate>
        
        <guid>https://damuwangs.github.io/posts/%E7%BC%96%E7%A8%8B/javascript-%E9%98%B2%E6%8A%96%E8%8A%82%E6%B5%81/</guid>
        <description>DaMuWang https://damuwangs.github.io/posts/%E7%BC%96%E7%A8%8B/javascript-%E9%98%B2%E6%8A%96%E8%8A%82%E6%B5%81/ -&lt;h1 id=&#34;防抖&#34;&gt;防抖&lt;/h1&gt;
&lt;h2 id=&#34;概念&#34;&gt;概念&lt;/h2&gt;
&lt;p&gt;任务频繁触发的情况下，只有任务触发的间隔超过制定的时间间隔的时候，任务才会被执行&lt;/p&gt;
&lt;p&gt;将一段时间内连续的多次触发转化为一次触发。&lt;/p&gt;
&lt;h2 id=&#34;应用场景&#34;&gt;应用场景&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;用户在输入框中连续输入一串字符后，只会在输入完后去执行最后一次的查询ajax请求，这样可以有效减少请求次数，节约请求资源；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;window的resize、scroll事件，不断地调整浏览器的窗口大小、或者滚动时会触发对应事件，防抖让其只触发一次；&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;实例&#34;&gt;实例&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h3 id=&#34;非立即执行版&#34;&gt;非立即执行版&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;html&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;lang&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;en&amp;#34;&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;head&lt;/span&gt;&amp;gt;
  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;meta&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;charset&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;UTF-8&amp;#34;&lt;/span&gt;&amp;gt;
  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;meta&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;viewport&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;content&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;width=device-width,initial-scale=1.0,maximum-scale=1.0,user-scalable=no&amp;#34;&lt;/span&gt;&amp;gt;
  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;meta&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;http-equiv&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;X-UA-Compatible&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;content&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;ie=edge&amp;#34;&lt;/span&gt;&amp;gt;
  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;title&lt;/span&gt;&amp;gt;防抖&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;title&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;head&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;body&lt;/span&gt;&amp;gt;
  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;button&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;debounce&amp;#34;&lt;/span&gt;&amp;gt;点我防抖！&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;button&lt;/span&gt;&amp;gt;
  
  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;window&lt;/span&gt;.onload &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;() {
      &lt;span style=&#34;color:#6272a4&#34;&gt;// 1、获取这个按钮，并绑定事件
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;      &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; myDebounce &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.getElementById(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;debounce&amp;#34;&lt;/span&gt;);
      myDebounce.addEventListener(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;click&amp;#34;&lt;/span&gt;, debounce(sayDebounce));
    }
  
    &lt;span style=&#34;color:#6272a4&#34;&gt;// 2、防抖功能函数，接受传参
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; debounce(fn) {
      &lt;span style=&#34;color:#6272a4&#34;&gt;// 4、创建一个标记用来存放定时器的返回值
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;      &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; timeout &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;null&lt;/span&gt;;
      &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;() {
        &lt;span style=&#34;color:#6272a4&#34;&gt;// 5、每次当用户点击/输入的时候，把前一个定时器清除
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;        clearTimeout(timeout);
        &lt;span style=&#34;color:#6272a4&#34;&gt;// 6、然后创建一个新的 setTimeout，
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#6272a4&#34;&gt;// 这样就能保证点击按钮后的 interval 间隔内
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#6272a4&#34;&gt;// 如果用户还点击了的话，就不会执行 fn 函数
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;        timeout &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; setTimeout(() =&amp;gt; {
          fn.call(&lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;, arguments);
        }, &lt;span style=&#34;color:#bd93f9&#34;&gt;1000&lt;/span&gt;);
      };
    }
  
    &lt;span style=&#34;color:#6272a4&#34;&gt;// 3、需要进行防抖的事件处理
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; sayDebounce() {
      &lt;span style=&#34;color:#6272a4&#34;&gt;// ... 有些需要防抖的工作，在这里执行
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;      console.log(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;防抖成功！&amp;#34;&lt;/span&gt;);
    }
  
  &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;body&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;html&lt;/span&gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;创建一个定时器，如果在规定时间内重复触发该事件，就会调用clearTimeout清除掉上一个定时器，重置定时器&lt;/p&gt;
&lt;p&gt;也就是说，这件事本来就是需要等待的，并非立即执行的，如果用户反复点击，那只好重新等待了&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3 id=&#34;立即执行版&#34;&gt;立即执行版&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;html&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;lang&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;en&amp;#34;&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;head&lt;/span&gt;&amp;gt;
  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;meta&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;charset&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;UTF-8&amp;#34;&lt;/span&gt;&amp;gt;
  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;meta&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;viewport&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;content&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;width=device-width,initial-scale=1.0,maximum-scale=1.0,user-scalable=no&amp;#34;&lt;/span&gt;&amp;gt;
  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;meta&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;http-equiv&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;X-UA-Compatible&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;content&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;ie=edge&amp;#34;&lt;/span&gt;&amp;gt;
  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;title&lt;/span&gt;&amp;gt;防抖&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;title&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;head&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;body&lt;/span&gt;&amp;gt;
  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;button&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;debounce&amp;#34;&lt;/span&gt;&amp;gt;点我防抖！&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;button&lt;/span&gt;&amp;gt;
  
  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;window&lt;/span&gt;.onload &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;() {
      &lt;span style=&#34;color:#6272a4&#34;&gt;// 1、获取这个按钮，并绑定事件
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;      &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; myDebounce &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.getElementById(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;debounce&amp;#34;&lt;/span&gt;);
      myDebounce.addEventListener(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;click&amp;#34;&lt;/span&gt;, debounce(sayDebounce));
    }
  
    &lt;span style=&#34;color:#6272a4&#34;&gt;// 2、防抖功能函数，接受传参
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; debounce(fn) {
      &lt;span style=&#34;color:#6272a4&#34;&gt;// 4、创建一个标记用来存放定时器的返回值
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;      &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; timeout &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;null&lt;/span&gt;;
      &lt;span style=&#34;color:#6272a4&#34;&gt;//5.创建一个判断是否可点击值
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;      &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; doit &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt;;
      &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;() {
        &lt;span style=&#34;color:#6272a4&#34;&gt;// 5、当doit为真，既用户重复点击时，清除定时器
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt;(doit)clearTimeout(timeout);
        &lt;span style=&#34;color:#6272a4&#34;&gt;//6.当doit为false时，既用户可点击，再将doit设为true，防止用户重复点击
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;else&lt;/span&gt;{
            fn();
            doit &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt;;
        }
        &lt;span style=&#34;color:#6272a4&#34;&gt;//7.设置定时器，这样就能保证点击按钮后的 interval 间隔内
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#6272a4&#34;&gt;// 如果用户还点击了的话，就不会执行 将doit设为false函数
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;        timeout &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; setTimeout(() =&amp;gt; {
          doit &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;false&lt;/span&gt;;
        }, &lt;span style=&#34;color:#bd93f9&#34;&gt;1000&lt;/span&gt;);
      };
    }
  
    &lt;span style=&#34;color:#6272a4&#34;&gt;// 3、需要进行防抖的事件处理
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; sayDebounce() {
      &lt;span style=&#34;color:#6272a4&#34;&gt;// ... 有些需要防抖的工作，在这里执行
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;      console.log(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;防抖成功！&amp;#34;&lt;/span&gt;);
    }
  
  &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;body&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;html&lt;/span&gt;&amp;gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;节流&#34;&gt;节流&lt;/h1&gt;
&lt;h2 id=&#34;概念-1&#34;&gt;概念&lt;/h2&gt;
&lt;p&gt;指定时间间隔内只会执行一次任务&lt;/p&gt;
&lt;h2 id=&#34;应用场景-1&#34;&gt;应用场景&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;这有点像我们刷抢购一样，当我们在某段时间间隔内触发了多次事件，其实，它只执行一次请求&lt;/li&gt;
&lt;li&gt;鼠标连续不断地触发某事件（如点击），只在单位时间内只触发一次&lt;/li&gt;
&lt;li&gt;在页面的无限加载场景下，需要用户在滚动页面时，每隔一段时间发一次 ajax 请求，而不是在用户停下滚动页面操作时才去请求数据&lt;/li&gt;
&lt;li&gt;监听滚动事件，比如是否滑到底部自动加载更多，用throttle来判断；&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;实例-1&#34;&gt;实例&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;html&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;lang&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;en&amp;#34;&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;head&lt;/span&gt;&amp;gt;
  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;meta&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;charset&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;UTF-8&amp;#34;&lt;/span&gt;&amp;gt;
  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;meta&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;viewport&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;content&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;width=device-width,initial-scale=1.0,maximum-scale=1.0,user-scalable=no&amp;#34;&lt;/span&gt;&amp;gt;
  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;meta&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;http-equiv&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;X-UA-Compatible&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;content&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;ie=edge&amp;#34;&lt;/span&gt;&amp;gt;
  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;title&lt;/span&gt;&amp;gt;节流&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;title&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;head&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;body&lt;/span&gt;&amp;gt;

  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;button&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;throttle&amp;#34;&lt;/span&gt;&amp;gt;点我节流！&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;button&lt;/span&gt;&amp;gt;

  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;window&lt;/span&gt;.onload &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;() {
      &lt;span style=&#34;color:#6272a4&#34;&gt;// 1、获取按钮，绑定点击事件
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;      &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; myThrottle &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.getElementById(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;throttle&amp;#34;&lt;/span&gt;);
      myThrottle.addEventListener(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;click&amp;#34;&lt;/span&gt;, throttle(sayThrottle));
    }

    &lt;span style=&#34;color:#6272a4&#34;&gt;// 2、节流函数体
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; throttle(fn) {
      &lt;span style=&#34;color:#6272a4&#34;&gt;// 4、通过闭包保存一个标记
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;      &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; canRun &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt;;
      &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;() {
        &lt;span style=&#34;color:#6272a4&#34;&gt;// 5、在函数开头判断标志是否为 true，不为 true 则中断函数
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#ff79c6&#34;&gt;!&lt;/span&gt;canRun) {
          &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt;;
        }
        &lt;span style=&#34;color:#6272a4&#34;&gt;// 6、将 canRun 设置为 false，防止执行之前再被执行
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;        canRun &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;false&lt;/span&gt;;
        &lt;span style=&#34;color:#6272a4&#34;&gt;// 7、定时器
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;        setTimeout( () =&amp;gt; {
          fn.call(&lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;, arguments);
          &lt;span style=&#34;color:#6272a4&#34;&gt;// 8、执行完事件（比如调用完接口）之后，重新将这个标志设置为 true
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;          canRun &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt;;
        }, &lt;span style=&#34;color:#bd93f9&#34;&gt;1000&lt;/span&gt;);
      };
    }

    &lt;span style=&#34;color:#6272a4&#34;&gt;// 3、需要节流的事件
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; sayThrottle() {
      console.log(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;节流成功！&amp;#34;&lt;/span&gt;);
    }

  &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;body&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;html&lt;/span&gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;从这个例子可以看出，节流可以防止在某时间间隔内重复发送请求！其和防抖有点相似，但其有本质的区别，虽然都是防止重复触发事件！&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;防抖是需要等待多久时间才能再触发一次事件！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;节流是多久时间内只能触发一次事件！&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&#34;参考资料&#34;&gt;参考资料&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/binguo666/p/10535948.html&#34;&gt;闲聊前端性能&amp;mdash;-防抖、节流、重绘与回流。&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
- https://damuwangs.github.io/posts/%E7%BC%96%E7%A8%8B/javascript-%E9%98%B2%E6%8A%96%E8%8A%82%E6%B5%81/ - </description>
        </item>
    
    
  </channel>
</rss> 