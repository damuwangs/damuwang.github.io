<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>DaMuWang</title>
    <link>https://damuwangs.github.io/</link>
    <description>Recent content on DaMuWang</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 09 Feb 2022 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="https://damuwangs.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    
        <item>
        <title>面试-2021年2月</title>
        <link>https://damuwangs.github.io/posts/%E7%BC%96%E7%A8%8B/%E9%9D%A2%E8%AF%95-2021%E5%B9%B42%E6%9C%88/</link>
        <pubDate>Wed, 16 Jun 2021 00:00:00 +0000</pubDate>
        
        <guid>https://damuwangs.github.io/posts/%E7%BC%96%E7%A8%8B/%E9%9D%A2%E8%AF%95-2021%E5%B9%B42%E6%9C%88/</guid>
        <description>DaMuWang https://damuwangs.github.io/posts/%E7%BC%96%E7%A8%8B/%E9%9D%A2%E8%AF%95-2021%E5%B9%B42%E6%9C%88/ -&lt;h1 id=&#34;javascript&#34;&gt;JavaScript&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h2 id=&#34;跨域&#34;&gt;跨域&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;../javascript-%E8%B7%A8%E5%9F%9F/&#34;&gt;JavaScript-跨域&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h2 id=&#34;getpost区别&#34;&gt;get、post区别&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;get参数url可见，post参数url不可见&lt;/li&gt;
&lt;li&gt;通过拼接url进行传递参数，post通过body体传递参数&lt;/li&gt;
&lt;li&gt;get请求可以缓存，post请求不可以缓存&lt;/li&gt;
&lt;li&gt;get请求页面后退时不产生影响、post请求页面后退时会重新提交请求&lt;/li&gt;
&lt;li&gt;get一般传输数据大小不超过2k-4k，post请求传输数据的大小可配置&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h2 id=&#34;数据类型&#34;&gt;数据类型&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;单类型：String、Number、boolean、null、undefined&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;引用类型：object、function、array、Date、RegExp&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h2 id=&#34;值传递和引用传递&#34;&gt;值传递和引用传递&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;基本类型复制后两个变量完全独立，一方改变都不会影响另一方&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;引用类型复制的时引用，之后的任何一方改变都会映射到另一方&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h2 id=&#34;闭包&#34;&gt;闭包&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;../javascript-%E9%97%AD%E5%8C%85&#34;&gt;JavaScript-闭包&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h2 id=&#34;箭头函数的好处&#34;&gt;箭头函数的好处&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;简洁&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;不会改变this本来的绑定&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h2 id=&#34;事件的冒泡和捕获&#34;&gt;事件的冒泡和捕获&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;../javascript-%E4%BA%8B%E4%BB%B6%E5%86%92%E6%B3%A1%E4%BA%8B%E4%BB%B6%E6%8D%95%E8%8E%B7%E5%92%8C%E4%BA%8B%E4%BB%B6%E5%A7%94%E6%89%98&#34;&gt;JavaScript-事件冒泡、事件捕获和事件委托&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h2 id=&#34;节流和防抖&#34;&gt;节流和防抖&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;../javascript-%E9%98%B2%E6%8A%96%E8%8A%82%E6%B5%81&#34;&gt;JavaScript-防抖、节流&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h2 id=&#34;dom加载过程中ready和load的区别&#34;&gt;dom加载过程中ready和load的区别&lt;/h2&gt;
&lt;p&gt;Ready：页面HTML文档解析完成但图片等媒体文件加载完成之前执行
load：完全加载完成之后执行&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h2 id=&#34;字符串反转&#34;&gt;字符串反转&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://codepen.io/damuwangs/pen/NWwdXJL?editors=0012&#34;&gt;面试-2021年2月-字符串反转&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h2 id=&#34;slicesplice的区别&#34;&gt;slice、splice的区别&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://codepen.io/damuwangs/pen/RwjKQKM?editors=0012&#34;&gt;面试-2021年2月-slice、splice的区别&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h2 id=&#34;深拷贝和浅拷贝&#34;&gt;深拷贝和浅拷贝&lt;/h2&gt;
&lt;p&gt;概念：深拷贝和浅拷贝是只针对Object和Array这样的引用数据类型的。&lt;/p&gt;
&lt;p&gt;浅拷贝只复制指向某个对象的指针，而不复制对象本身，新旧对象还是共享同一块内存。但深拷贝会另外创造一个一模一样的对象，新对象跟原对象不共享内存，修改新对象不会改到原对象。&lt;/p&gt;
&lt;p&gt;浅拷贝：assign()、concat()、slice()&lt;/p&gt;
&lt;p&gt;深拷贝：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;JSON.parse(JSON.stringify())&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;手写递归方法&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;递归方法实现深度克隆原理：遍历对象、数组直到里边都是基本数据类型，然后再去复制，就是深度拷贝&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://codepen.io/damuwangs/pen/XWzpZBp?editors=0012&#34;&gt;面试-2021年2月-深拷贝&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h2 id=&#34;同步和异步&#34;&gt;同步和异步&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;../javascript-%E5%BC%82%E6%AD%A5%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88&#34;&gt;JavaScript-异步解决方案&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h2 id=&#34;缓存&#34;&gt;缓存&lt;/h2&gt;
&lt;p&gt;cookie sessionStorage和localstorage&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;存储大小&lt;/p&gt;
&lt;p&gt;cookie数据大小不能超过4K&lt;/p&gt;
&lt;p&gt;sessionStorage和localStorage可以达到5M或更大&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;有效时间&lt;/p&gt;
&lt;p&gt;localstorage：浏览器关闭后数据不丢失除非主动删除数据&lt;/p&gt;
&lt;p&gt;sessionStorage：数据在当前浏览器窗口关闭后自动删除&lt;/p&gt;
&lt;p&gt;cookie： 过期时间未到一直有效，即使窗口或浏览器关闭&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;数据与服务器之间的交互方式&lt;/p&gt;
&lt;p&gt;cookie：数据会自动传递到服务器，服务器也可以写cookie到客户端&lt;/p&gt;
&lt;p&gt;sessionStorage和localstorage：仅本地保存，不会发给服务端&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h2 id=&#34;统计数组中出现最多字符&#34;&gt;统计数组中出现最多字符&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://codepen.io/damuwangs/pen/ZEaLxQK?editors=0012&#34;&gt;面试-2021年2月-统计数组中出现最多字符&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h2 id=&#34;判断是不是数组&#34;&gt;判断是不是数组&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://codepen.io/damuwangs/pen/bGYgMgY?editors=0012&#34;&gt;面试-2021年2月-判断是不是数组&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h2 id=&#34;promise&#34;&gt;Promise&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;概念：解决异步编程的一种方法，替代多层嵌套的回调，Promise是一个构造函数，用域封装异步操作并可以获得成功或失败的结果&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Promise all：将多个Promise实例包装成一个新的Promise实例，当所有状态都变成成功时all的状态才变为成功，如果其中一个状态为失败则返回失败结果&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;执行顺序问题&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://codepen.io/damuwangs/pen/zYPNjPV?editors=0012&#34;&gt;面试-2021年2月-Promise&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h2 id=&#34;原型链&#34;&gt;原型链&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;../javascript-%E5%8E%9F%E5%9E%8B%E9%93%BE&#34;&gt;JavaScript-原型链&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h2 id=&#34;this指向&#34;&gt;this指向&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;../javascript-this%E6%8C%87%E5%90%91&#34;&gt;JavaScript-this指向&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h2 id=&#34;小程序api&#34;&gt;小程序API&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://developers.weixin.qq.com/miniprogram/dev/api/&#34;&gt;微信开放文档&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h2 id=&#34;jquery选择器&#34;&gt;Jquery选择器&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;元素选择器&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;$(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;p&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#6272a4&#34;&gt;// 选取 &amp;lt;p&amp;gt; 元素
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;$(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;p.intro&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#6272a4&#34;&gt;// 选取所有 class=&amp;#34;intro&amp;#34; 的 &amp;lt;p&amp;gt; 元素
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;$(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;p#demo&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#6272a4&#34;&gt;// 选取所有 id=&amp;#34;demo&amp;#34; 的 &amp;lt;p&amp;gt; 元素
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;属性选择器&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;$(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;[href]&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#6272a4&#34;&gt;// 选取所有带有 href 属性的元素
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;$(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;[href=&amp;#39;#&amp;#39;]&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#6272a4&#34;&gt;// 选取所有带有 href 值等于 &amp;#34;#&amp;#34; 的元素
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;$(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;[href!=&amp;#39;#&amp;#39;]&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#6272a4&#34;&gt;// 选取所有带有 href 值不等于 &amp;#34;#&amp;#34; 的元素
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;$(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;[href$=&amp;#39;.jpg&amp;#39;]&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#6272a4&#34;&gt;// 选取所有 href 值以 &amp;#34;.jpg&amp;#34; 结尾的元素
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;CSS 选择器&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;$(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;p&amp;#34;&lt;/span&gt;).css(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;background-color&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;red&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#6272a4&#34;&gt;// 把所有 p 元素的背景颜色更改为红色
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h2 id=&#34;递归计算1100求和&#34;&gt;递归计算1~100求和&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; num(n) {
    &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; (n &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;
    &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; num(n &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; n
}
&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; sum &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; num(&lt;span style=&#34;color:#bd93f9&#34;&gt;100&lt;/span&gt;)
console.log(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;求和1~100 = &amp;#39;&lt;/span&gt;, sum) &lt;span style=&#34;color:#6272a4&#34;&gt;// 输出5050
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1 id=&#34;css&#34;&gt;Css&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h2 id=&#34;pxrememvwvh区别&#34;&gt;px,rem,em,vw,vh区别&lt;/h2&gt;
&lt;p&gt;px：绝对单位，页面按精确像素展示&lt;/p&gt;
&lt;p&gt;em：相对单位，基准点为父节点字体的大小，如果自身定义了font-size按自身来计算&lt;/p&gt;
&lt;p&gt;em 字号表示倍数，表示当前字体实际大小是根元素字体大小的多少多少倍，比如0.8em、1.4em，表示当前元素字体是根元素字体的0.8倍、1.4倍。实际大小会根据设备屏幕的不同，而动态适应不同的屏幕分辨率。px是写死的像素值，不随分辨率而改变。&lt;/p&gt;
&lt;p&gt;rem：相对单位，可理解为“root em”相对根节点html的字体大小来计算&lt;/p&gt;
&lt;p&gt;vw：视窗宽度，1vw等于视窗宽度的1%&lt;/p&gt;
&lt;p&gt;vh：视窗高度，1vh相当于视窗高度的1%&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h2 id=&#34;box-sizing属性&#34;&gt;box-sizing属性&lt;/h2&gt;
&lt;p&gt;在标准模式下的盒模型下，盒子总宽度/高度 = width/height+padding+border+margin&lt;/p&gt;
&lt;p&gt;在怪异模式下的盒模型下，盒子的总宽度和高度是包含内边距padding和边框border宽度在内的，盒子总宽度/高度=width/height + margin = 内容区宽度/高度 + padding + border + margin;&lt;/p&gt;
&lt;p&gt;box-sizing有两个值一个是content-box，另一个是border-box&lt;/p&gt;
&lt;p&gt;当设置为box-sizing:content-box时，将采用标准模式解析计算&lt;/p&gt;
&lt;p&gt;当设置为box-sizing:border-box时，将采用怪异模式解析计算&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h2 id=&#34;元素居中&#34;&gt;元素居中&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;margin和width实现
在容器上定义一个固定的宽度，然后配合margin左右的值为auto&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;inline-block和父元素text-align&lt;/p&gt;
&lt;p&gt;仅inline-block属性是无法让元素水平居中，他的关键之处要在元素的父容器中设置text-align的属性为“center”，这样才能达到效果：&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h2 id=&#34;自适应方案&#34;&gt;自适应方案&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;固定一个某些宽度，使用一个模式，加上少许的媒体查询&lt;/li&gt;
&lt;li&gt;使用flexbox&lt;/li&gt;
&lt;li&gt;使用百分比加媒体查询&lt;/li&gt;
&lt;li&gt;使用rem&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1 id=&#34;vue&#34;&gt;Vue&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h2 id=&#34;计算属性侦听器区别&#34;&gt;计算属性,侦听器区别&lt;/h2&gt;
&lt;p&gt;【计算属性】
概念：计算属性是一个函数，最后函数返回的结果就是计算属性得到的结果
当我们第一次使用计算属性的时候，会执行计算属性并进行计算，然后将计算的结果缓存起来，后续当外面再去使用计算属性的时候，如果计算属性中使用到的数据没有发生变化，那么就直接读取缓存的结果，不会重新计算&lt;/p&gt;
&lt;p&gt;场景：计算的内容需要依赖多个属性，如果一个数据反复会被使用，但它计算以来的内容很少发生变化时&lt;/p&gt;
&lt;p&gt;【侦听器】
概念：侦听器与data中的属性同名，当属性值发生改变的时候侦听器触发执行&lt;/p&gt;
&lt;p&gt;场景：在计算开销比较大（计算多次数或者异步处理）的时候&lt;/p&gt;
&lt;p&gt;补充：immediate: true 刷新加载 立马触发一次handler&lt;/p&gt;
&lt;p&gt;deep: true 可以深度检测到 person 对象的属性值的变化&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h2 id=&#34;keep-live&#34;&gt;keep-live&lt;/h2&gt;
&lt;p&gt;概念：缓存某个组件，或者某个路由。所有在keep-alive标签下的路由都会被缓存。当组件在 &lt;!-- raw HTML omitted --&gt; 内被切换，它的 activated 和 deactivated 这两个生命周期钩子函数将会被对应执行&lt;/p&gt;
&lt;p&gt;用法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;在路由meta配置isKeepAlive:true&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;inlcude/exclude&lt;/p&gt;
&lt;p&gt;inlcude包含该组件就缓存，exclude不包含该组件就缓存&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;场景：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;节省性能消耗，避免一个组件频繁重新渲染，节省开支&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;保存用户状态&lt;/p&gt;
&lt;p&gt;比如说：我们在填写收货地址的页面，需要跳转到另一个页面通过定位选择地址信息再返回继续填写，这时候需要缓存收货地址页面，避免跳转页面导致用户数据丢失&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h2 id=&#34;v-if和v-show的区别&#34;&gt;v-if和v-show的区别&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;v-show 只是简单的控制元素的 display 属性，v-if 条件为真，元素将会被渲染，条件为假，元素会被销毁&lt;/li&gt;
&lt;li&gt;v-show 有更高的首次渲染开销，而 v-if 的首次渲染开销要小的多&lt;/li&gt;
&lt;li&gt;v-if 有更高的切换开销，v-show 切换开销小&lt;/li&gt;
&lt;li&gt;v-if 有配套的 v-else-if 和 v-else，而 v-show 没有&lt;/li&gt;
&lt;li&gt;v-if 可以搭配 template 使用，而 v-show 不行&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h2 id=&#34;route和router的区别&#34;&gt;route和router的区别&lt;/h2&gt;
&lt;p&gt;route相当于当前正在跳转的路由对象，可以从里面获取name,path,params,query等&lt;/p&gt;
&lt;p&gt;router为VueRouter的实例，相当于一个全局的路由器对象，里面含有很多属性和子对象，例如history对象，经常用的跳转链接就可以用this.$router.push&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h2 id=&#34;hashhistory路由区别&#34;&gt;hash,history路由区别&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;hash路由在地址栏URL上有#，而history路由没有会好看一点&lt;/li&gt;
&lt;li&gt;我们进行回车刷新操作，hash路由会加载到地址栏对应的页面，而history路由一般就404报错了（刷新是网络请求，没有后端准备时会报错）。&lt;/li&gt;
&lt;li&gt;hash路由支持低版本的浏览器，而history路由是HTML5新增的API。&lt;/li&gt;
&lt;li&gt;hash的特点在于它虽然出现在了URL中，但是不包括在http请求中，所以对于后端是没有一点影响的，所以改变hash不会重新加载页面，所以这也是单页面应用的必备。&lt;/li&gt;
&lt;li&gt;history运用了浏览器的历史记录栈，之前有back,forward,go方法&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h2 id=&#34;组件传参方式&#34;&gt;组件传参方式&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;父传子：父组件把数据绑定在引用子组件处的自定义属性上，在子组件中通过props引用&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;子传父：在父组件标签处定义自定义事件，在子组件中通过$emit发送自定义事件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$ref&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;vuex&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;provider inject&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h2 id=&#34;vuex&#34;&gt;vuex&lt;/h2&gt;
&lt;p&gt;概念描述：vuex是vue框架的状态管理器，单页面应用组件之间的状态&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;state：对应vue的data，数据是响应式的，组件从store中读取数据，若store发生改变，依赖这个数据的组件也会更新，通过mapState把全局的state和getter映射到当前组件的computed中&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;getter：对state进行计算操作，他就是store的计算属性。防止多次计算降低性能。可以在多组件之间复用，若一个状态只在一个组件内使用就可以不用getters&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Mutation：更改store中状态的唯一方法且必须是同步函数。在组件中使用 this.$store.commit(&amp;lsquo;xxx&amp;rsquo;) 提交 mutation，或者使用 mapMutations 辅助函数将组件中的 methods 映射为 store.commit 调用&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Action：提交的是 mutation，可以包含任意异步操作。在组件中使用 this.$store.dispatch(&amp;lsquo;xxx&amp;rsquo;) 分发 action，或者使用 mapActions 辅助函数将组件的 methods 映射为 store.dispatch 调用&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Module：将 store 分割成模块，每个模块拥有自己的 state、mutation、action、getter&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h2 id=&#34;过滤器&#34;&gt;过滤器&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://damuwangs.github.io/img/%E9%9D%A2%E8%AF%95-2021%E5%B9%B42%E6%9C%88/%E8%BF%87%E6%BB%A4%E5%99%A8.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h2 id=&#34;避免v-ifv-for同时用&#34;&gt;避免v-if,v-for同时用&lt;/h2&gt;
&lt;p&gt;v-for 比 v-if 具有更高的优先级，哪怕我们只渲染出一小部分用户的元素,也得在每次重渲染的时候遍历整个列表。&lt;/p&gt;
&lt;p&gt;因此倾向于将v-if放在容器元素上，先判断再循环&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h2 id=&#34;vue双向绑定原理&#34;&gt;Vue双向绑定原理&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;../vue2-%E5%93%8D%E5%BA%94%E5%BC%8F%E5%8E%9F%E7%90%86&#34;&gt;Vue2-响应式原理&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h2 id=&#34;修改数据不重发请求&#34;&gt;修改数据不重发请求&lt;/h2&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1 id=&#34;参考资料&#34;&gt;参考资料&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/143929973&#34;&gt;CSS3面试题2020 - 知乎 (zhihu.com)&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
- https://damuwangs.github.io/posts/%E7%BC%96%E7%A8%8B/%E9%9D%A2%E8%AF%95-2021%E5%B9%B42%E6%9C%88/ - </description>
        </item>
    
    
    
        <item>
        <title>GitHubPages&#43;Hugo构建个人博客</title>
        <link>https://damuwangs.github.io/posts/%E7%BC%96%E7%A8%8B/githubpages&#43;hugo%E6%9E%84%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</link>
        <pubDate>Tue, 15 Jun 2021 00:00:00 +0000</pubDate>
        
        <guid>https://damuwangs.github.io/posts/%E7%BC%96%E7%A8%8B/githubpages&#43;hugo%E6%9E%84%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</guid>
        <description>DaMuWang https://damuwangs.github.io/posts/%E7%BC%96%E7%A8%8B/githubpages&#43;hugo%E6%9E%84%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/ -&lt;h1 id=&#34;hugo配置&#34;&gt;hugo配置&lt;/h1&gt;
&lt;h2 id=&#34;1安装&#34;&gt;1、安装&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;下载地址：&lt;a href=&#34;https://github.com/gohugoio/hugo/releases&#34;&gt;https://github.com/gohugoio/hugo/releases&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;我使用的版本：&lt;img src=&#34;https://damuwangs.github.io/img/GitHubPages+Hugo%E6%9E%84%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/hugo%E4%B8%8B%E8%BD%BD%E7%89%88%E6%9C%AC.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;解压后即可使用hugo命令，不过只能在当前文件夹下使用，所以需要配置环境变量&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://damuwangs.github.io/img/GitHubPages+Hugo%E6%9E%84%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/%E6%9F%A5%E7%9C%8Bhugo%E7%89%88%E6%9C%AC.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2配置环境变量&#34;&gt;2、配置环境变量&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;在系统变量Path后面追加一条，为hugo.exe的解压地址我的在D盘&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;D:&lt;span style=&#34;color:#f1fa8c&#34;&gt;\h&lt;/span&gt;ugo_0.83.1_Windows-64bit
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;3项目创建&#34;&gt;3、项目创建&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;通过hugo命令创建站点目录并切换到该目录&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;hugo new site hugo-blog
&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;cd&lt;/span&gt; hugo-blog
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;目录结构如下，此时如果运行的话浏览器会白屏，因为此时只是一个空的站点需要下载主题后才能看到内容&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://damuwangs.github.io/img/GitHubPages+Hugo%E6%9E%84%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/hugo%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;4主题配置&#34;&gt;4、主题配置&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;主题网站：&lt;a href=&#34;https://themes.gohugo.io/&#34;&gt;https://themes.gohugo.io/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;我用的是这个主题：&lt;a href=&#34;https://github.com/AmazingRise/hugo-theme-diary&#34;&gt;https://github.com/AmazingRise/hugo-theme-diary&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;选好主题一般都会直接指向GitHub仓库，下载zip到本地就行&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;将下载好的主题解压移动到项目目录下的themes文件夹&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;配置站点根目录下的config.toml文件&lt;/p&gt;
&lt;p&gt;我用的主题里面有作者提供的实例网站配置，把里面的内容复制到站点根目录的config.toml就完美运行了&lt;/p&gt;
&lt;p&gt;这里需要注意config.toml配置的theme名称必须和themes下的文件夹名称保持一致&lt;/p&gt;
&lt;p&gt;&lt;code&gt;具体hugo的配置还没仔细研究，本篇就简单介绍一下大体的搭建流程，以后可能会写一篇hugo配置/开发相关的&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;5本地预览&#34;&gt;5、本地预览&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;启动 Hugo 预览服务器，构建站点内容到内存中并在检测到文件更改后重新渲染&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;hugo server
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;6内容发布&#34;&gt;6、内容发布&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;在站点目录下有一个content文件夹，在该文件夹下创建一个posts，posts下创建.md格式的文章就可以自动识别发布了&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://damuwangs.github.io/img/GitHubPages+Hugo%E6%9E%84%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/hugo%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%842.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;同理图片静态资源需要放在站点根目录static下，内容中图片引用也是以static为根目录进行读取的&lt;/p&gt;
&lt;p&gt;&lt;code&gt;目前没有处理图片在typora中不能显示，只能在网页预览站点中显示的问题&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;github配置&#34;&gt;GitHub配置&lt;/h1&gt;
&lt;h2 id=&#34;1创建仓库&#34;&gt;1、创建仓库&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;创建一个新仓库，仓库需要命名为xxx.github.io，一个账户只能创建一个GitHub Pages&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://damuwangs.github.io/img/GitHubPages+Hugo%E6%9E%84%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/%E5%88%9B%E5%BB%BA%E5%8D%9A%E5%AE%A2%E9%A1%B9%E7%9B%AE.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;创建好之后顶部点击settings，左侧菜单栏选择pages，点击choose a theme选择一个官方指定主题&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://damuwangs.github.io/img/GitHubPages+Hugo%E6%9E%84%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/%E5%88%9B%E5%BB%BA%E5%8D%9A%E5%AE%A2%E9%A1%B9%E7%9B%AE2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;选择完主题后，访问仓库名就可以访问GitHub Pages主页了&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2github加速&#34;&gt;2、GitHub加速&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;因为同步GitHub经常会出现网络超时的错误，所以在谷歌找了个GitHub加速插件&lt;/p&gt;
&lt;p&gt;这个插件就是在GitHub仓库下载旁边新增了一个加速的按钮，选择国内镜像的仓库地址就不会出现网络超时的问题了&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;插件地址：&lt;a href=&#34;https://chrome.google.com/webstore/detail/github%E5%8A%A0%E9%80%9F/mfnkflidjnladnkldfonnaicljppahpg&#34;&gt;https://chrome.google.com/webstore/detail/github%E5%8A%A0%E9%80%9F/mfnkflidjnladnkldfonnaicljppahpg&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;GitHub地址：&lt;a href=&#34;https://github.com/fhefh2015/Fast-GitHub&#34;&gt;https://github.com/fhefh2015/Fast-GitHub&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;3提交和版本同步&#34;&gt;3、提交和版本同步&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;进入站点根目录执行命令执行编译，创建public目录生成静态html项目&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# 默认在当前文件夹下生成public文件夹&lt;/span&gt;
hugo
&lt;span style=&#34;color:#6272a4&#34;&gt;# 参数d可以自定义生成路径&lt;/span&gt;
hugo -d ../damuwangs.github.io
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;将生成后的静态html项目提交到xxx.github.io仓库，访问xxx.github.io就可以看到更新好的网页了&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;参考资料&#34;&gt;参考资料&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://www.waynerv.com/posts/setup-blog-with-hugo-and-github-pages/&#34;&gt;使用 Hugo 和 GitHub Pages 部署个人博客 | Shall We Code? (waynerv.com)&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
- https://damuwangs.github.io/posts/%E7%BC%96%E7%A8%8B/githubpages&#43;hugo%E6%9E%84%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/ - </description>
        </item>
    
    
    
        <item>
        <title>【待补充】甘南藏族自治州</title>
        <link>https://damuwangs.github.io/posts/%E6%97%85%E8%A1%8C/%E7%94%98%E5%8D%97%E8%97%8F%E6%97%8F%E8%87%AA%E6%B2%BB%E5%B7%9E/</link>
        <pubDate>Sat, 01 May 2021 00:00:00 +0000</pubDate>
        
        <guid>https://damuwangs.github.io/posts/%E6%97%85%E8%A1%8C/%E7%94%98%E5%8D%97%E8%97%8F%E6%97%8F%E8%87%AA%E6%B2%BB%E5%B7%9E/</guid>
        <description>DaMuWang https://damuwangs.github.io/posts/%E6%97%85%E8%A1%8C/%E7%94%98%E5%8D%97%E8%97%8F%E6%97%8F%E8%87%AA%E6%B2%BB%E5%B7%9E/ -&lt;h1 id=&#34;参考资料&#34;&gt;参考资料&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/formercoding/p/12906640.html&#34;&gt;JS事件循环（Event Loop）&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
- https://damuwangs.github.io/posts/%E6%97%85%E8%A1%8C/%E7%94%98%E5%8D%97%E8%97%8F%E6%97%8F%E8%87%AA%E6%B2%BB%E5%B7%9E/ - </description>
        </item>
    
    
    
        <item>
        <title>【待补充】伊犁</title>
        <link>https://damuwangs.github.io/posts/%E6%97%85%E8%A1%8C/%E4%BC%8A%E7%8A%81/</link>
        <pubDate>Fri, 01 Jan 2010 00:00:00 +0000</pubDate>
        
        <guid>https://damuwangs.github.io/posts/%E6%97%85%E8%A1%8C/%E4%BC%8A%E7%8A%81/</guid>
        <description>DaMuWang https://damuwangs.github.io/posts/%E6%97%85%E8%A1%8C/%E4%BC%8A%E7%8A%81/ -&lt;h1 id=&#34;参考资料&#34;&gt;参考资料&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/formercoding/p/12906640.html&#34;&gt;JS事件循环（Event Loop）&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
- https://damuwangs.github.io/posts/%E6%97%85%E8%A1%8C/%E4%BC%8A%E7%8A%81/ - </description>
        </item>
    
    
    
        <item>
        <title>【待补充】天津</title>
        <link>https://damuwangs.github.io/posts/%E6%97%85%E8%A1%8C/%E5%A4%A9%E6%B4%A5/</link>
        <pubDate>Fri, 01 Jan 2010 00:00:00 +0000</pubDate>
        
        <guid>https://damuwangs.github.io/posts/%E6%97%85%E8%A1%8C/%E5%A4%A9%E6%B4%A5/</guid>
        <description>DaMuWang https://damuwangs.github.io/posts/%E6%97%85%E8%A1%8C/%E5%A4%A9%E6%B4%A5/ -&lt;h1 id=&#34;参考资料&#34;&gt;参考资料&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/formercoding/p/12906640.html&#34;&gt;JS事件循环（Event Loop）&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
- https://damuwangs.github.io/posts/%E6%97%85%E8%A1%8C/%E5%A4%A9%E6%B4%A5/ - </description>
        </item>
    
    
    
        <item>
        <title>【待补充】威海</title>
        <link>https://damuwangs.github.io/posts/%E6%97%85%E8%A1%8C/%E5%A8%81%E6%B5%B7/</link>
        <pubDate>Fri, 01 Jan 2010 00:00:00 +0000</pubDate>
        
        <guid>https://damuwangs.github.io/posts/%E6%97%85%E8%A1%8C/%E5%A8%81%E6%B5%B7/</guid>
        <description>DaMuWang https://damuwangs.github.io/posts/%E6%97%85%E8%A1%8C/%E5%A8%81%E6%B5%B7/ -&lt;h1 id=&#34;参考资料&#34;&gt;参考资料&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/formercoding/p/12906640.html&#34;&gt;JS事件循环（Event Loop）&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
- https://damuwangs.github.io/posts/%E6%97%85%E8%A1%8C/%E5%A8%81%E6%B5%B7/ - </description>
        </item>
    
    
    
        <item>
        <title>【待补充】漠河</title>
        <link>https://damuwangs.github.io/posts/%E6%97%85%E8%A1%8C/%E6%BC%A0%E6%B2%B3/</link>
        <pubDate>Fri, 01 Jan 2010 00:00:00 +0000</pubDate>
        
        <guid>https://damuwangs.github.io/posts/%E6%97%85%E8%A1%8C/%E6%BC%A0%E6%B2%B3/</guid>
        <description>DaMuWang https://damuwangs.github.io/posts/%E6%97%85%E8%A1%8C/%E6%BC%A0%E6%B2%B3/ -&lt;h1 id=&#34;参考资料&#34;&gt;参考资料&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/formercoding/p/12906640.html&#34;&gt;JS事件循环（Event Loop）&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
- https://damuwangs.github.io/posts/%E6%97%85%E8%A1%8C/%E6%BC%A0%E6%B2%B3/ - </description>
        </item>
    
    
    
        <item>
        <title>【待补充】烟台</title>
        <link>https://damuwangs.github.io/posts/%E6%97%85%E8%A1%8C/%E7%83%9F%E5%8F%B0/</link>
        <pubDate>Fri, 01 Jan 2010 00:00:00 +0000</pubDate>
        
        <guid>https://damuwangs.github.io/posts/%E6%97%85%E8%A1%8C/%E7%83%9F%E5%8F%B0/</guid>
        <description>DaMuWang https://damuwangs.github.io/posts/%E6%97%85%E8%A1%8C/%E7%83%9F%E5%8F%B0/ -&lt;h1 id=&#34;参考资料&#34;&gt;参考资料&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/formercoding/p/12906640.html&#34;&gt;JS事件循环（Event Loop）&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
- https://damuwangs.github.io/posts/%E6%97%85%E8%A1%8C/%E7%83%9F%E5%8F%B0/ - </description>
        </item>
    
    
    
        <item>
        <title>【待补充】苏州</title>
        <link>https://damuwangs.github.io/posts/%E6%97%85%E8%A1%8C/%E8%8B%8F%E5%B7%9E/</link>
        <pubDate>Fri, 01 Jan 2010 00:00:00 +0000</pubDate>
        
        <guid>https://damuwangs.github.io/posts/%E6%97%85%E8%A1%8C/%E8%8B%8F%E5%B7%9E/</guid>
        <description>DaMuWang https://damuwangs.github.io/posts/%E6%97%85%E8%A1%8C/%E8%8B%8F%E5%B7%9E/ -&lt;h1 id=&#34;参考资料&#34;&gt;参考资料&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/formercoding/p/12906640.html&#34;&gt;JS事件循环（Event Loop）&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
- https://damuwangs.github.io/posts/%E6%97%85%E8%A1%8C/%E8%8B%8F%E5%B7%9E/ - </description>
        </item>
    
    
    
        <item>
        <title>【待补充】青岛</title>
        <link>https://damuwangs.github.io/posts/%E6%97%85%E8%A1%8C/%E9%9D%92%E5%B2%9B/</link>
        <pubDate>Fri, 01 Jan 2010 00:00:00 +0000</pubDate>
        
        <guid>https://damuwangs.github.io/posts/%E6%97%85%E8%A1%8C/%E9%9D%92%E5%B2%9B/</guid>
        <description>DaMuWang https://damuwangs.github.io/posts/%E6%97%85%E8%A1%8C/%E9%9D%92%E5%B2%9B/ -&lt;h1 id=&#34;参考资料&#34;&gt;参考资料&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/formercoding/p/12906640.html&#34;&gt;JS事件循环（Event Loop）&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
- https://damuwangs.github.io/posts/%E6%97%85%E8%A1%8C/%E9%9D%92%E5%B2%9B/ - </description>
        </item>
    
    
  </channel>
</rss> 