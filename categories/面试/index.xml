<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>面试 on DaMuWang</title>
    <link>https://damuwangs.github.io/categories/%E9%9D%A2%E8%AF%95/</link>
    <description>Recent content in 面试 on DaMuWang</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 08 Feb 2022 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://damuwangs.github.io/categories/%E9%9D%A2%E8%AF%95/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>面试-2021年12月</title>
      <link>https://damuwangs.github.io/posts/%E7%BC%96%E7%A8%8B/%E9%9D%A2%E8%AF%95-2021%E5%B9%B412%E6%9C%88/</link>
      <pubDate>Tue, 08 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>https://damuwangs.github.io/posts/%E7%BC%96%E7%A8%8B/%E9%9D%A2%E8%AF%95-2021%E5%B9%B412%E6%9C%88/</guid>
      <description>JavaScript   移动端事件延迟   ​	移动端点击事件会不会有延迟，会有什么隐患，怎样解决
​	我的思路：click事件没有延迟，直接触发。但 touch事件（比如 touchStart、touchEnd）有300毫秒的延迟，用来判断是单击还是双击、缩放。隐患是容易造	成“点击穿透”（这个原理简单，写起来费劲，木哥你自己百度一下就知道了）。解决思路，一是尽量写成click事件，避免写成touch事件，就不会有延迟了，	二是在容易受影响的代码里专门写一写 if判断，避免误操作。
   前端路由的理解   ​	我的思路：
​	JSP、ASP 是多页面应用，由服务端决定返回哪个页面，还有最早的 H5 网站，也是这样的，每个页面相互独立，容易受网络波动影响，肯定速度慢呀，半天	出不来页面，用户体验性差。而且每个页面都要重复引用相同的 js 文件、css资源文件，加载速度就慢。
​	SPA单页面应用就比较友好了，采用组件化的方式，只有一个公共页面，每次只切换渲染页面的一部分，由前端进行路由控制，用户等待时间短。Angular、	Vue、React，都是这么干的。
   Promise   Promise 可不可以中断
我的思路：严格的说不能中断，但可以借助 pending 和 reject 来达到中断效果。（木哥你具体再问我吧，写起来费劲）
  有一个业务，需要发出两个不同的异步请求，得到所有结果后才去走下一步业务逻辑，如果用 Promise做的话，咋做
我的思路：尽量别用 Promise.all()，推荐使用 Promise.allSettled() 方法。（木哥你具体再问我吧，写起来费劲）
       ES6   ES6新增了哪些方法
  ES6的扩展运算符，用没用过
我的思路：用过，用来传参，或者给对象赋值，或者用来给数组进行脱壳。传参时放到最后，别放前面。</description>
    </item>
    
    <item>
      <title>面试-2021年2月</title>
      <link>https://damuwangs.github.io/posts/%E7%BC%96%E7%A8%8B/%E9%9D%A2%E8%AF%95-2021%E5%B9%B42%E6%9C%88/</link>
      <pubDate>Wed, 16 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://damuwangs.github.io/posts/%E7%BC%96%E7%A8%8B/%E9%9D%A2%E8%AF%95-2021%E5%B9%B42%E6%9C%88/</guid>
      <description>JavaScript   跨域 JavaScript-跨域
     get、post区别  get参数url可见，post参数url不可见 通过拼接url进行传递参数，post通过body体传递参数 get请求可以缓存，post请求不可以缓存 get请求页面后退时不产生影响、post请求页面后退时会重新提交请求 get一般传输数据大小不超过2k-4k，post请求传输数据的大小可配置       数据类型   单类型：String、Number、boolean、null、undefined
  引用类型：object、function、array、Date、RegExp
       值传递和引用传递   基本类型复制后两个变量完全独立，一方改变都不会影响另一方
  引用类型复制的时引用，之后的任何一方改变都会映射到另一方
       闭包 JavaScript-闭包
     箭头函数的好处   简洁
  不会改变this本来的绑定
       事件的冒泡和捕获 JavaScript-事件冒泡、事件捕获和事件委托</description>
    </item>
    
  </channel>
</rss>