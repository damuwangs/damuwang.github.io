<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CSS on DaMuWang</title>
    <link>https://damuwangs.github.io/categories/css/</link>
    <description>Recent content in CSS on DaMuWang</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 09 Aug 2021 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://damuwangs.github.io/categories/css/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>CSS-重绘、回流</title>
      <link>https://damuwangs.github.io/posts/%E7%BC%96%E7%A8%8B/css-%E9%87%8D%E7%BB%98%E5%9B%9E%E6%B5%81/</link>
      <pubDate>Mon, 09 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://damuwangs.github.io/posts/%E7%BC%96%E7%A8%8B/css-%E9%87%8D%E7%BB%98%E5%9B%9E%E6%B5%81/</guid>
      <description>浏览器渲染 浏览器在渲染页面的时候，大致是以下几个步骤：
 解析html生成DOM树，解析css，生成CSSOM树，将DOM树和CSSOM树结合，生成渲染树； 根据渲染树，浏览器可以计算出网页中有哪些节点，各节点的CSS以及从属关系 - 【回流】 根据渲染树以及回流得到的节点信息，计算出每个节点在屏幕中的位置 - 【重绘】 最后将得到的节点位置信息交给浏览器的图形处理程序，让浏览器中显示页面  回流 概念 英文叫reflow，指的是当渲染树中的节点信息发生了大小、边距等问题，需要重新计算各节点和css具体的大小和位置
例：在css中对一个div修饰的样式中，使用了宽度50%，此时需要将50%转换为具体的像素，这个计算的过程，就是回流的过程
容易造成回流的操作 1、布局流相关操作  盒模型的相关操作会触发重新布局 定位相关操作会触发重新布局 浮动相关操作会触发重新布局  2、改变节点内的内容 改变节点的结构或其中的文本结构会触发重新布局
3、css  width height padding border margin position top left bottom right float clear text-align vertical-align line-height font-weight font-size font-family overflow white-space  重绘 概念 重绘：英文叫repaint，当节点的部分属性发生变化，但不影响布局，只需要重新计算节点在屏幕中的绝对位置并渲染的过程，就叫重绘
例：改变元素的背景颜色、字体颜色等操作会造成重绘
容易造成重绘操作的CSS  color border-style border-radius text-decoration box-shadow outline background  优化机制 1、浏览器优化 每次回流都会对浏览器造成额外的计算消耗，所以浏览器对于回流和重绘有一定的优化机制
浏览器通常都会将多次回流操作放入一个队列中，等过了一段时间或操作达到了一定的临界值，然后才会挨个执行，这样能节省一些计算消耗。
但是在获取布局信息操作的时候，会强制将队列清空，也就是强制回流，比如访问或操作以下或方法时：
 offsetTop offsetLeft offsetWidth offsetHeight scrollTop scrollLeft scrollWidth scrollHeight clientTop clientLeft clientWidth clientHeight getComputedStyle()  这些属性或方法都需要得到最新的布局信息，所以浏览器必须去回流执行。因此，在项目中，尽量避免使用上述属性或方法，如果非要使用的时候，也尽量将值缓存起来，而不是一直获取</description>
    </item>
    
    <item>
      <title>【待补充】CSS-Less、Sass</title>
      <link>https://damuwangs.github.io/posts/%E7%BC%96%E7%A8%8B/css-lesssass/</link>
      <pubDate>Wed, 04 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://damuwangs.github.io/posts/%E7%BC%96%E7%A8%8B/css-lesssass/</guid>
      <description></description>
    </item>
    
    <item>
      <title>【待补充】CSS3-响应式布局</title>
      <link>https://damuwangs.github.io/posts/%E7%BC%96%E7%A8%8B/css3-%E5%93%8D%E5%BA%94%E5%BC%8F%E5%B8%83%E5%B1%80/</link>
      <pubDate>Wed, 04 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://damuwangs.github.io/posts/%E7%BC%96%E7%A8%8B/css3-%E5%93%8D%E5%BA%94%E5%BC%8F%E5%B8%83%E5%B1%80/</guid>
      <description></description>
    </item>
    
    <item>
      <title>CSS3-动画</title>
      <link>https://damuwangs.github.io/posts/%E7%BC%96%E7%A8%8B/css3-%E5%8A%A8%E7%94%BB/</link>
      <pubDate>Fri, 30 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://damuwangs.github.io/posts/%E7%BC%96%E7%A8%8B/css3-%E5%8A%A8%E7%94%BB/</guid>
      <description>一、素转换transform 1.元素位置移动translate() 参数：左(X轴)，顶部(Y轴)单位px
样例：元素位置移动
2.元素旋转rotate() 参数：旋转度数(负值是允许的，这样是元素逆时针旋转)，单位deg
样例：元素旋转
3.元素缩放scale() 参数：宽度缩放倍数、高度缩放倍数无参数
样例：元素缩放
4.元素倾斜skew() 通过设置倾斜将正方形转化成菱形
参数：X轴，Y轴单位deg
样例：元素倾斜
5.元素转换matrix() 方法：将上面的方法合并成一个，matrix 方法有六个参数，包含旋转，缩放，移动（平移）和倾斜功能
二、过渡transition 属性：
  transition-property：规定应用过渡的 CSS 属性的名称
  transition-duration：定义过渡效果花费的时间。默认是 0
  transition-timing-function：规定过渡效果的时间曲线。默认是 &amp;ldquo;ease&amp;rdquo;
 linear：规定以相同速度开始至结束的过渡效果（等于 cubic-bezier(0,0,1,1)） ease：规定慢速开始，然后变快，然后慢速结束的过渡效果（cubic-bezier(0.25,0.1,0.25,1)） ease-in：规定以慢速开始的过渡效果（等于 cubic-bezier(0.42,0,1,1)） ease-out：规定以慢速结束的过渡效果（等于 cubic-bezier(0,0,0.58,1)） ease-in-out：规定以慢速开始和结束的过渡效果（等于 cubic-bezier(0.42,0,0.58,1)） cubic-bezier(n,n,n,n)：在 cubic-bezier 函数中定义自己的值。可能的值是 0 至 1 之间的数值    transition-delay：规定过渡效果何时开始。默认是 0
  样例：blog - CSS3动画 - 过渡
三、动画animation 属性：
 @keyframes：声明动画 animation-name：引入动画 animation-duration： 规定动画完成一个周期所花费的秒或毫秒。默认是 0，单位s animation-timing-function：规定动画的速度曲线。默认是 &amp;ldquo;ease&amp;rdquo;，设置同上 animation-fill-mode：规定当动画不播放时，要应用到元素的样式。 animation-delay：规定动画何时开始。默认是 0，单位s animation-iteration-count：规定动画被播放的次数。  填写一个数字，默认是 1 infinite指定动画应该播放无限次   animation-direction：规定动画是否在下一周期逆向地播放，默认是 &amp;ldquo;normal&amp;rdquo;  normal：默认值。动画按正常播放 reverse：动画反向播放 alternate：动画在奇数次（1、3、5&amp;hellip;）正向播放，在偶数次（2、4、6&amp;hellip;）反向播放 reverse：动画在奇数次（1、3、5&amp;hellip;）反向播放，在偶数次（2、4、6&amp;hellip;）正向播放 initial：设置该属性为它的默认值 inherit：从父元素继承该属性   animation-play-state：规定动画是否正在运行或暂停，默认是 &amp;ldquo;running&amp;rdquo;  paused：指定暂停动画 running：指定正在运行的动画    样例：blog - CSS3动画 - 动画</description>
    </item>
    
  </channel>
</rss>