<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>UniApp on DaMuWang</title>
    <link>https://damuwangs.github.io/categories/uniapp/</link>
    <description>Recent content in UniApp on DaMuWang</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 09 Nov 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://damuwangs.github.io/categories/uniapp/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>UniApp-App签名</title>
      <link>https://damuwangs.github.io/posts/%E7%BC%96%E7%A8%8B/uniapp-app%E7%AD%BE%E5%90%8D/</link>
      <pubDate>Tue, 09 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://damuwangs.github.io/posts/%E7%BC%96%E7%A8%8B/uniapp-app%E7%AD%BE%E5%90%8D/</guid>
      <description>为什么要有签名 开发Android的人这么多，完全有可能把类名，包名命名成同样的名字，这个时候该如何区分？所以，这时候就需要签名来区分了，由于开发商可能通过使用相同的Package Name来混淆替换已经安装的程序，签名可以保证报名相同，但是签名不同的包不被替换。 发布过Android应用的朋友们应该都知道，Android APK的发布是需要签名的。签名机制在Android应用和框架中有着十分重要的作用。例如，Android系统禁止更新安装签名不一致的APK；如果应用需要使用system权限，必须保证APK签名与Framework签名一致
注意事项 应用程序签名的一些方面可能会影响应用程序的开发过程, 尤其是当你计划发布多个应用时. 通常情况下, 对于所有开发者而言,推荐的策略是:在应用程序的整个生命周期,所有的应用程序使用相同的证书签名.
应用程序升级 – 当发布应用的更新时, 如果想让用户无缝地升级到新版本, 需要继续使用相同的某个或者某一套证书来签名更新包.当系统安装应用的更新时, 它会比较现有版本和新版本的证书. 如果证书吻合, 包括证书数据和顺序都吻合, 那么系统允许更新.如果新版本所做的签名不是匹配的, 那么将需要给应用起一个不同的包名 — 在这种情况下, 用户相当于安装了一个完全的新程序. 应用程序模块化 – Android允许由相同证书签名的应用程序运行在相同的进程中, 此时系统会将它们作为单个应用程序对待.在这种方式中, 可以按模块化的方式部署应用, 用户可以根据需要独立地更新每一个模块. 代码/数据 的授权共享 – Android 提供模式匹配的权限控制机制,因此一个应用可以暴露功能给另一个用指定证书签名的应用. 通过用相同证书签名多个应用,以及使用模式匹配的权限检查,应用程序可以以安全的方式共享代码和数据. 参考资料 Android中签名、证书、公钥密钥的概念及使用</description>
    </item>
    
    <item>
      <title>UniApp-原生插件开发</title>
      <link>https://damuwangs.github.io/posts/%E7%BC%96%E7%A8%8B/uniapp-%E5%8E%9F%E7%94%9F%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/</link>
      <pubDate>Wed, 20 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://damuwangs.github.io/posts/%E7%BC%96%E7%A8%8B/uniapp-%E5%8E%9F%E7%94%9F%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/</guid>
      <description>一、开发环境 Java环境1.8 参考：jdk1.8下载与安装教程
Android环境 软件下载 下载SDK Tools
下载完成点击SDK Manager.exe运行
需要下载以下插件
环境变量配置 系统变量下添加变量
ANDROID_SDK_HOME，指向Android SDK根目录 Path新增:
Android SDK根目录\platform-tools; Android SDK根目录\tools; 命令行测试是否配置成功
adb (成功后可以看到adb的版本号及命令行说明等信息) AndroidStudio 参考：Android Studio官网
demo下载 参考：Android 离线SDK - 正式版
二、AndroidStudio运行 项目导入 点击Android Studio菜单选项File—&amp;gt;New—&amp;gt;Import Project
导入选择UniPlugin-Hello-As工程，点击OK！等待工程导入完毕
导入后切换为Android项目结构，目录如下
生成签名文件 点击Build—&amp;gt;Generate Signed Apk
默认选择APK点击下一步
选择生成位置（选择为app模块根目录），输入密码和别名点击下一步
选择类型（默认为debug）点击完成，成功生成.jks文件
申请Appkey 进入jdk bin目录执行指令输入密码读取签名信息
keytool -list -v -keystore d:\123.jks -- d:\123.jks为签名文件位置 登录开发者中心
在左侧菜单中选择我创建的应用，点击需要申请的应用
在应用管理界面选择离线打包Key管理，根据需要选择对应平台，输入包名和SHA1，确认无误点击保存，即可获取到对应平台的App
配置及运行 app模块下的AndroidMainfest.xml替换dcloud_appkey对应值
&amp;lt;meta-data android:name=&amp;#34;dcloud_appkey&amp;#34; android:value=&amp;#34;decloud开发者中心申请的appkey&amp;#34; /&amp;gt; app模块下build.gradle修改签名配置
signingConfigs { config { keyAlias &amp;#39;jks别名&amp;#39; keyPassword &amp;#39;jks密码&amp;#39; storeFile file(&amp;#39;xxx.</description>
    </item>
    
  </channel>
</rss>
