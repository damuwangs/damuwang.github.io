<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>DaMuWang</title>
    <link>https://damuwangs.github.io/</link>
    <description>Recent content on DaMuWang</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 24 Nov 2021 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="https://damuwangs.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    
        <item>
        <title>React-高阶组件</title>
        <link>https://damuwangs.github.io/posts/%E7%BC%96%E7%A8%8B/react-%E9%AB%98%E9%98%B6%E7%BB%84%E4%BB%B6/</link>
        <pubDate>Wed, 24 Nov 2021 00:00:00 +0000</pubDate>
        
        <guid>https://damuwangs.github.io/posts/%E7%BC%96%E7%A8%8B/react-%E9%AB%98%E9%98%B6%E7%BB%84%E4%BB%B6/</guid>
        <description>DaMuWang https://damuwangs.github.io/posts/%E7%BC%96%E7%A8%8B/react-%E9%AB%98%E9%98%B6%E7%BB%84%E4%BB%B6/ -&lt;h1 id=&#34;概述&#34;&gt;概述&lt;/h1&gt;
&lt;p&gt;一个高阶组件只是一个包装了另外一个React组件的React组件&lt;/p&gt;
&lt;h1 id=&#34;基础高阶组件&#34;&gt;基础高阶组件&lt;/h1&gt;
&lt;h2 id=&#34;装饰器模式&#34;&gt;装饰器模式&lt;/h2&gt;
&lt;p&gt;高阶组件可以看做是装饰器模式(Decorator Pattern)在React的实现。即允许向一个现有的对象添加新的功能，同时又不改变其结构，属于包装模式(Wrapper Pattern)的一种&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-typescript&#34; data-lang=&#34;typescript&#34;&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// 定义高阶组件
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; withHeader &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; (WrappedComponent) &lt;span style=&#34;color:#ff79c6&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;extends&lt;/span&gt; React.Component {
    render() {
      &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; (
        &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;div&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt;
          &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;div className&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;demo-header&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt;高阶组件&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;/div&amp;gt;
          &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;WrappedComponent {...&lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.props}&lt;span style=&#34;color:#ff79c6&#34;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;/div&amp;gt;
      )
    }
  }

&lt;span style=&#34;color:#6272a4&#34;&gt;// 调用高阶组件  
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;@withHeader&lt;/span&gt;
&lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; Demo &lt;span style=&#34;color:#ff79c6&#34;&gt;extends&lt;/span&gt; React.Component {
  render() {
    &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; (
      &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;div&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt;普通组件&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;/div&amp;gt;
    )
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;组件命名&#34;&gt;组件命名&lt;/h2&gt;
&lt;p&gt;当通过高阶组件来包装一个组件时，你会丢失原先 WrappedComponent 的名字，可能会给开发和 debug 造成影响&lt;/p&gt;
&lt;p&gt;我们改写一下上述的高阶组件代码，增加了getDisplayName函数以及静态属性displayName，此时再去观察DOM Tree&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-typescript&#34; data-lang=&#34;typescript&#34;&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// 获取组件名称
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; getDisplayName(component) {
    &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; component.displayName &lt;span style=&#34;color:#ff79c6&#34;&gt;||&lt;/span&gt; component.name &lt;span style=&#34;color:#ff79c6&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Component&amp;#39;&lt;/span&gt;
}

&lt;span style=&#34;color:#6272a4&#34;&gt;// 定义高阶组件
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; withHeader &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; WrappedComponent &lt;span style=&#34;color:#ff79c6&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;extends&lt;/span&gt; React.Component {
    &lt;span style=&#34;color:#6272a4&#34;&gt;// 设置高阶组件别名
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;static&lt;/span&gt; displayName &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;`HOC(&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;${&lt;/span&gt;getDisplayName(WrappedComponent)&lt;span style=&#34;color:#f1fa8c&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;)`&lt;/span&gt;
    render() {
      &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; (
        &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;div&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt;
          &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;div className&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;demo-header&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt;我是标题&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;/div&amp;gt;
          &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;WrappedComponent {...&lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.props}&lt;span style=&#34;color:#ff79c6&#34;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;/div&amp;gt;
      )
    }
  }

&lt;span style=&#34;color:#6272a4&#34;&gt;// 调用高阶组件  
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;@withHeader&lt;/span&gt;
&lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; Demo &lt;span style=&#34;color:#ff79c6&#34;&gt;extends&lt;/span&gt; React.Component {
  render() {
    &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; (
      &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;div&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt;我是普通组件&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;/div&amp;gt;
    )
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;之前高阶组件仅显示HOC，命名后如下显示&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://damuwangs.github.io/img/React-%E9%AB%98%E9%98%B6%E7%BB%84%E4%BB%B6/%E7%BB%84%E4%BB%B6%E5%91%BD%E5%90%8D.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;组件传参&#34;&gt;组件传参&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;柯里化 Curry&lt;/p&gt;
&lt;p&gt;概念：只传递函数的一部分参数来调用它，让它返回一个函数去处理剩下的参数&lt;/p&gt;
&lt;p&gt;函数签名：fun(params)(otherParams)&lt;/p&gt;
&lt;p&gt;应用：在React里，通过柯里化，我们可以通过传入不同的参数来得到不同的高阶组件&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-typescript&#34; data-lang=&#34;typescript&#34;&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// 定义高阶组件
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; withHeader &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; title &lt;span style=&#34;color:#ff79c6&#34;&gt;=&amp;gt;&lt;/span&gt; WrappedComponent &lt;span style=&#34;color:#ff79c6&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;extends&lt;/span&gt; React.Component {
    render() {
      &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; (
        &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;div&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt;
          {&lt;span style=&#34;color:#6272a4&#34;&gt;/* 获取参数并使用 */&lt;/span&gt;}
          &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;div className&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;demo-header&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt;{title}&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;/div&amp;gt;
          &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;WrappedComponent {...&lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.props}&lt;span style=&#34;color:#ff79c6&#34;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;/div&amp;gt;
      )
    }
  }
  
&lt;span style=&#34;color:#6272a4&#34;&gt;// 调用高阶组件,在括号内定义参数  
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;@withHeader&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;我是标题&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; Demo &lt;span style=&#34;color:#ff79c6&#34;&gt;extends&lt;/span&gt; React.Component {
  render() {
    &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; (
      &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;div&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt;普通组件&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;/div&amp;gt;
    )
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;属性代理&#34;&gt;属性代理&lt;/h1&gt;
&lt;h2 id=&#34;更改-props&#34;&gt;更改 props&lt;/h2&gt;
&lt;p&gt;在修改或删除重要 props 的时候要小心，应该给高阶组件的 props 指定命名空间（namespace），以防破坏从外传递给 WrappedComponent 的 props&lt;/p&gt;
&lt;p&gt;下面的例子中定义了一个新的newProps传给组件&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-typescript&#34; data-lang=&#34;typescript&#34;&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// 定义高阶组件
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; withHeader &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; WrappedComponent &lt;span style=&#34;color:#ff79c6&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;extends&lt;/span&gt; React.Component {
    &lt;span style=&#34;color:#6272a4&#34;&gt;// 定义点击事件
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    handleClick() {
      console.log(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;click&amp;#39;&lt;/span&gt;)
    }
    render() {
      &lt;span style=&#34;color:#6272a4&#34;&gt;// 定义变量  
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;      &lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; newProps &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; {
        user&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;王大木&amp;#39;&lt;/span&gt;
      }        
      &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; (
        &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;div&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt;
          &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;div className&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;demo-header&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt;高阶组件&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;/div&amp;gt;
          {&lt;span style=&#34;color:#6272a4&#34;&gt;/* 通过props传递变量和点击事件 */&lt;/span&gt;}
          &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;WrappedComponent {...&lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.props} {...newProps} handleClick&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;{&lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.handleClick}&lt;span style=&#34;color:#ff79c6&#34;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;/div&amp;gt;
      )
    }
  }

&lt;span style=&#34;color:#6272a4&#34;&gt;// 调用高阶组件  
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;@withHeader&lt;/span&gt;
&lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; Demo &lt;span style=&#34;color:#ff79c6&#34;&gt;extends&lt;/span&gt; React.Component {
  render() {
    &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; (
      &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;div&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;div&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt;普通组件&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;/div&amp;gt;
        {&lt;span style=&#34;color:#6272a4&#34;&gt;/* 读取变量 */&lt;/span&gt;}
        &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;div&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt;我是newProps：{&lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.props.user}&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;/div&amp;gt;
	    {&lt;span style=&#34;color:#6272a4&#34;&gt;/* 调用点击事件 */&lt;/span&gt;}	
        &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;button onClick&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;{&lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.props.handleClick}&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt;点击&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;/button&amp;gt;
      &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;/div&amp;gt;
    )
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;通过-refs-获取组件实例&#34;&gt;通过 refs 获取组件实例&lt;/h2&gt;
&lt;p&gt;当我们包装Usual的时候，想获取到它的实例怎么办，可以通过引用(ref),在Usual组件挂载的时候，会执行ref的回调函数，在HOC中取到组件的实例。通过打印，可以看到它的props， state，都是可以取到的。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-typescript&#34; data-lang=&#34;typescript&#34;&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// 定义高阶组件
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; withHeader &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; WrappedComponent &lt;span style=&#34;color:#ff79c6&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;extends&lt;/span&gt; React.Component {
   &lt;span style=&#34;color:#6272a4&#34;&gt;// 装载完成，读取组件并打印
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;   componentDidMount() {
      console.log(&lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.instanceComponent, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;instanceComponent&amp;#39;&lt;/span&gt;)
    }
    render() {
      &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; (
        &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;div&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt;
          &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;div className&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;demo-header&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt;高阶组件&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;/div&amp;gt;
          &lt;span style=&#34;color:#6272a4&#34;&gt;// 引用ref,在组件挂载的时候，会执行ref的回调函数，在HOC中取到组件的实例
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;          &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;WrappedComponent {...&lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.props} ref&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;{instanceComponent &lt;span style=&#34;color:#ff79c6&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.instanceComponent &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; instanceComponent}&lt;span style=&#34;color:#ff79c6&#34;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;/div&amp;gt;
      )
    }
  }

&lt;span style=&#34;color:#6272a4&#34;&gt;// 调用高阶组件  
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;@withHeader&lt;/span&gt;
&lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; Demo &lt;span style=&#34;color:#ff79c6&#34;&gt;extends&lt;/span&gt; React.Component {
  &lt;span style=&#34;color:#ff79c6&#34;&gt;constructor&lt;/span&gt;(props) {
    &lt;span style=&#34;color:#ff79c6&#34;&gt;super&lt;/span&gt;(props)
      &lt;span style=&#34;color:#6272a4&#34;&gt;// 定义state
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;	  &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.state &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; {
		test&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;普通组件state&amp;#39;&lt;/span&gt;
	}
  }
  render() {
    &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; (
      &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;div&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;div&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt;普通组件&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;/div&amp;gt;
      &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;/div&amp;gt;
    )
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;抽象-state&#34;&gt;抽象 state&lt;/h2&gt;
&lt;p&gt;通过 { props, 回调函数 } 传递给wrappedComponent组件，通过回调函数获取state。用的比较多的就是react处理表单的时候。&lt;/p&gt;
&lt;p&gt;通常react在处理表单的时候，一般使用的是受控组件，即把input都做成受控的，改变value的时候，用onChange事件同步到state中&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-typescript&#34; data-lang=&#34;typescript&#34;&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// 定义高阶组件
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; withHeader &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; WrappedComponent &lt;span style=&#34;color:#ff79c6&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;extends&lt;/span&gt; React.Component {
  &lt;span style=&#34;color:#ff79c6&#34;&gt;constructor&lt;/span&gt;() {
    &lt;span style=&#34;color:#ff79c6&#34;&gt;super&lt;/span&gt;()
    &lt;span style=&#34;color:#6272a4&#34;&gt;// 定义state 
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.state &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; {
      fields&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; {},
    }
  }
  &lt;span style=&#34;color:#6272a4&#34;&gt;// 通过fieldName绑定控件，触发调用onChange  
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  getField &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; fieldName &lt;span style=&#34;color:#ff79c6&#34;&gt;=&amp;gt;&lt;/span&gt; {
    &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; {
      onChange: &lt;span style=&#34;color:#8be9fd&#34;&gt;this.onChange&lt;/span&gt;(fieldName),
    }
  }
  &lt;span style=&#34;color:#6272a4&#34;&gt;// 文本框onChange事件  
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  onChange &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; key &lt;span style=&#34;color:#ff79c6&#34;&gt;=&amp;gt;&lt;/span&gt; e &lt;span style=&#34;color:#ff79c6&#34;&gt;=&amp;gt;&lt;/span&gt; {
    console.log(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;key = &amp;#39;&lt;/span&gt;,key)
    console.log(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;e = &amp;#39;&lt;/span&gt;,e)      
    &lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; { fields } &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.state
    &lt;span style=&#34;color:#6272a4&#34;&gt;// 将组件视图变化绑定给高阶组件的state
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    fields[key] &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; e.target.value
    &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.setState({
      fields,
    })
  }
  &lt;span style=&#34;color:#6272a4&#34;&gt;// 提交点击事件  
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  handleSubmit &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; () &lt;span style=&#34;color:#ff79c6&#34;&gt;=&amp;gt;&lt;/span&gt; {
    console.log(&lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.state.fields)
  }

  render() {
    &lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; props &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; {
      ...&lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.props,
      handleSubmit: &lt;span style=&#34;color:#8be9fd&#34;&gt;this.handleSubmit&lt;/span&gt;,&lt;span style=&#34;color:#6272a4&#34;&gt;// 提交点击事件
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;      getField: &lt;span style=&#34;color:#8be9fd&#34;&gt;this.getField&lt;/span&gt;,&lt;span style=&#34;color:#6272a4&#34;&gt;// 文本框值
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    }
    &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; (
      &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;WrappedComponent {...props}&lt;span style=&#34;color:#ff79c6&#34;&gt;/&amp;gt;&lt;/span&gt;
	)
  }
}

&lt;span style=&#34;color:#6272a4&#34;&gt;// 调用高阶组件
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;@withHeader&lt;/span&gt;
 &lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; Login &lt;span style=&#34;color:#ff79c6&#34;&gt;extends&lt;/span&gt; React.Component {
  render() {
    &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; (
      &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;div&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;div&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt;
          &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;label id&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;username&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt;账户&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;/label&amp;gt;
          {&lt;span style=&#34;color:#6272a4&#34;&gt;/* 绑定文本框 */&lt;/span&gt;}			
          &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;input name&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;username&amp;#34;&lt;/span&gt; {...&lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.props.getField(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;username&amp;#39;&lt;/span&gt;)}&lt;span style=&#34;color:#ff79c6&#34;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;/div&amp;gt;
        &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;div&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt;
          &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;label id&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;password&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt;密码&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;/label&amp;gt;
		 {&lt;span style=&#34;color:#6272a4&#34;&gt;/* 绑定文本框 */&lt;/span&gt;}			
          &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;input name&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;password&amp;#34;&lt;/span&gt; {...&lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.props.getField(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;password&amp;#39;&lt;/span&gt;)}&lt;span style=&#34;color:#ff79c6&#34;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;/div&amp;gt;
		{&lt;span style=&#34;color:#6272a4&#34;&gt;/* 调用点击事件 */&lt;/span&gt;}
        &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;div onClick&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;{&lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.props.handleSubmit}&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt;提交&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;/div&amp;gt;
      &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;/div&amp;gt;
    )
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里把state，onChange等方法都放到HOC里，其实是遵从的react组件的一种规范，子组件简单，傻瓜，负责展示，逻辑与操作放到Container。比如说我们在HOC获取到用户名密码之后，再去做其他操作，就方便多了，而state，处理函数放到Form组件里，只会让Form更加笨重，承担了本不属于它的工作，这样我们可能其他地方也需要用到这个组件，但是处理方式稍微不同，就很麻烦了&lt;/p&gt;
&lt;h2 id=&#34;包装其它-elements&#34;&gt;包装其它 elements&lt;/h2&gt;
&lt;p&gt;出于操作样式、布局或其它目的，你可以将 WrappedComponent 与其它组件包装在一起&lt;/p&gt;
&lt;p&gt;上面的装饰器模式例子就是将高阶组件与组件包装在了一起&lt;/p&gt;
&lt;h1 id=&#34;反向继承&#34;&gt;反向继承&lt;/h1&gt;
&lt;p&gt;返回的高阶组件类继承了 WrappedComponent。这被叫做反向继承是因为 WrappedComponent 被动地被高阶组件继承，而不是 WrappedComponent 去继承 高阶组件。通过这种方式他们之间的关系倒转了。&lt;/p&gt;
&lt;p&gt;反向继承允许高阶组件通过 &lt;strong&gt;this&lt;/strong&gt; 关键词获取 WrappedComponent，意味着它可以获取到 state，props，组件生命周期（component lifecycle）钩子，以及渲染方法（render）&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-typescript&#34; data-lang=&#34;typescript&#34;&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// 定义高阶组件
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; iiHoc &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; WrappedComponent &lt;span style=&#34;color:#ff79c6&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;extends&lt;/span&gt; WrappedComponent {
    &lt;span style=&#34;color:#6272a4&#34;&gt;// 这里重写了组件的生命周期
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;// 如果高阶组件和组件同时定义了相同的生命周期，高阶组件中的会覆盖掉组件中的
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    componentDidMount(){
      console.log(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;hoc didmount&amp;#39;&lt;/span&gt;)
    }
    render() {
      &lt;span style=&#34;color:#6272a4&#34;&gt;// 在高阶组件中读取组件的state
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;      console.log(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;state = &amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.state)
      &lt;span style=&#34;color:#6272a4&#34;&gt;// 继续渲染WrappedComponent组件  
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;      &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;super&lt;/span&gt;.render()
    }
}

&lt;span style=&#34;color:#6272a4&#34;&gt;// 调用高阶组件
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;@iiHoc&lt;/span&gt;
&lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; Usual &lt;span style=&#34;color:#ff79c6&#34;&gt;extends&lt;/span&gt; React.Component {
  &lt;span style=&#34;color:#ff79c6&#34;&gt;constructor&lt;/span&gt;() {
    &lt;span style=&#34;color:#ff79c6&#34;&gt;super&lt;/span&gt;()
    &lt;span style=&#34;color:#6272a4&#34;&gt;// 定义state
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.state &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; {
      usual&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;usual&amp;#39;&lt;/span&gt;,
    }
  }
  &lt;span style=&#34;color:#6272a4&#34;&gt;// 定义组件的生命周期
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// 如果高阶组件和组件同时定义了相同的生命周期，高阶组件中的会覆盖掉组件中的
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  componentDidMount() {
    console.log(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;didMount&amp;#39;&lt;/span&gt;)
  }

  render() {
    &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; (
      &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;div&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt;Usual&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;/div&amp;gt;
    )
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;渲染劫持&#34;&gt;渲染劫持&lt;/h2&gt;
&lt;p&gt;渲染指的是 WrappedComponent.render 方法&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-typescript&#34; data-lang=&#34;typescript&#34;&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// 定义高阶组件
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; iiHOC(WrappedComponent) {
  &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;extends&lt;/span&gt; WrappedComponent {
    render() {
      &lt;span style=&#34;color:#6272a4&#34;&gt;// 如果 this.props.loggedIn 是 true，这个高阶组件会原封不动地渲染 WrappedComponent  
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;      &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.props.loggedIn) {
        &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;super&lt;/span&gt;.render()
      &lt;span style=&#34;color:#6272a4&#34;&gt;// 如果不是 true 则渲染如下内容    
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;      } &lt;span style=&#34;color:#ff79c6&#34;&gt;else&lt;/span&gt; {
        &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;div&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt;渲染&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;/div&amp;gt;
      }
    }
  }
}

&lt;span style=&#34;color:#6272a4&#34;&gt;// 调用高阶组件
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;@iiHOC&lt;/span&gt;
&lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; Usual &lt;span style=&#34;color:#ff79c6&#34;&gt;extends&lt;/span&gt; React.Component {
  render() {
    &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; (
      &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;div&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt;Usual&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;/div&amp;gt;
    )
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;注意：你不能通过 Props Proxy 来做渲染劫持&lt;/p&gt;
&lt;p&gt;即使你可以通过 WrappedComponent.prototype.render 获取它的 render 方法，你需要自己手动模拟整个实例以及生命周期方法，而不是依靠 React，这是不值当的，应该使用反向继承来做到渲染劫持&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;操作组件state&#34;&gt;操作组件state&lt;/h2&gt;
&lt;p&gt;高阶组件可以 『读取、修改、删除』WrappedComponent 实例的 state，如果需要也可以添加新的 state。&lt;/p&gt;
&lt;p&gt;需要记住的是，你在弄乱 WrappedComponent 的 state，可能会导致破坏一些东西。通常不建议使用高阶组件来读取或添加组件 state，添加 state 需要使用命名空间来防止与 WrappedComponent 的 state 冲突&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-typescript&#34; data-lang=&#34;typescript&#34;&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// 定义高阶组件
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; IIHOCDEBUGGER(WrappedComponent) {
  &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;extends&lt;/span&gt; WrappedComponent {
    render() {
      &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; (
        &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;div&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt;
          {&lt;span style=&#34;color:#6272a4&#34;&gt;/* 读取组件props */&lt;/span&gt;}
          &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;p&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt;Props&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;/p&amp;gt; &amp;lt;pre&amp;gt;{JSON.stringify(this.props)}&amp;lt;/pre&amp;gt;
          {&lt;span style=&#34;color:#6272a4&#34;&gt;/* 读取组件state */&lt;/span&gt;}
          &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;p&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt;State&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;/p&amp;gt;&amp;lt;pre&amp;gt;{JSON.stringify(this.state)}&amp;lt;/pre&amp;gt;
          {&lt;span style=&#34;color:#6272a4&#34;&gt;/* 渲染组件 */&lt;/span&gt;}
          {&lt;span style=&#34;color:#ff79c6&#34;&gt;super&lt;/span&gt;.render()}
        &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;/div&amp;gt;
      )
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;组合多个高阶组件&#34;&gt;组合多个高阶组件&lt;/h1&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-typescript&#34; data-lang=&#34;typescript&#34;&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; HOC1(WrappedComponent) {
  &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;extends&lt;/span&gt; WrappedComponent {
    render() {
      &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; (
        &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;div&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt;
          &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;div className&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;demo-header&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt;高阶组件&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;/div&amp;gt;
          &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;WrappedComponent {...&lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.props}&lt;span style=&#34;color:#ff79c6&#34;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;/div&amp;gt;
      )
    }
  }
}

&lt;span style=&#34;color:#ff79c6&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; HOC2(WrappedComponent) {
  &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;extends&lt;/span&gt; WrappedComponent {
    render() {
      &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; (
        &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;div&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt;
          &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;div className&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;demo-header&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt;高阶组件&lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;/div&amp;gt;
          &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;WrappedComponent {...&lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.props}&lt;span style=&#34;color:#ff79c6&#34;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;/div&amp;gt;
      )
    }
  }
}

&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;@HOC1&lt;/span&gt;
&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;@HOC2&lt;/span&gt;
&lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; Usual &lt;span style=&#34;color:#ff79c6&#34;&gt;extends&lt;/span&gt; React.Component {
  render() {
    &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; (
      &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;div&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt;普通组件&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;/div&amp;gt;
    )
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;使用compose可以简化上述过程，也能体现函数式编程的思想&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-typescript&#34; data-lang=&#34;typescript&#34;&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; enhance &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; compose(withHeader,withLoading);
&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;@enhance&lt;/span&gt;
&lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; Demo &lt;span style=&#34;color:#ff79c6&#34;&gt;extends&lt;/span&gt; Component{
    ...
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;组合 Compose
compose可以帮助我们组合任意个高阶函数，例如compose(a,b,c)返回一个新的函数d，函数d依然接受一个函数作为入参，只不过在内部会依次调用c,b,a，从表现层对使用者保持透明&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;参考资料&#34;&gt;参考资料&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/28138664&#34;&gt;深入浅出React高阶组件&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.jianshu.com/p/0aae7d4d9bc1&#34;&gt;深入理解 React 高阶组件&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/libin-1/p/7087605.html&#34;&gt;React进阶之高阶组件&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://react.docschina.org/docs/higher-order-components.html#caveats&#34;&gt;高阶组件注意事项&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
- https://damuwangs.github.io/posts/%E7%BC%96%E7%A8%8B/react-%E9%AB%98%E9%98%B6%E7%BB%84%E4%BB%B6/ - </description>
        </item>
    
    
    
        <item>
        <title>UniApp-App签名</title>
        <link>https://damuwangs.github.io/posts/%E7%BC%96%E7%A8%8B/uniapp-app%E7%AD%BE%E5%90%8D/</link>
        <pubDate>Tue, 09 Nov 2021 00:00:00 +0000</pubDate>
        
        <guid>https://damuwangs.github.io/posts/%E7%BC%96%E7%A8%8B/uniapp-app%E7%AD%BE%E5%90%8D/</guid>
        <description>DaMuWang https://damuwangs.github.io/posts/%E7%BC%96%E7%A8%8B/uniapp-app%E7%AD%BE%E5%90%8D/ -&lt;h1 id=&#34;为什么要有签名&#34;&gt;为什么要有签名&lt;/h1&gt;
&lt;p&gt;开发Android的人这么多，完全有可能把类名，包名命名成同样的名字，这个时候该如何区分？所以，这时候就需要签名来区分了，由于开发商可能通过使用相同的Package Name来混淆替换已经安装的程序，签名可以保证报名相同，但是签名不同的包不被替换。
发布过Android应用的朋友们应该都知道，Android APK的发布是需要签名的。签名机制在Android应用和框架中有着十分重要的作用。例如，Android系统禁止更新安装签名不一致的APK；如果应用需要使用system权限，必须保证APK签名与Framework签名一致&lt;/p&gt;
&lt;h1 id=&#34;注意事项&#34;&gt;注意事项&lt;/h1&gt;
&lt;p&gt;应用程序签名的一些方面可能会影响应用程序的开发过程, 尤其是当你计划发布多个应用时. 通常情况下, 对于所有开发者而言,推荐的策略是:在应用程序的整个生命周期,所有的应用程序使用相同的证书签名.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;应用程序升级 – 当发布应用的更新时, 如果想让用户无缝地升级到新版本, 需要继续使用相同的某个或者某一套证书来签名更新包.当系统安装应用的更新时, 它会比较现有版本和新版本的证书. 如果证书吻合, 包括证书数据和顺序都吻合, 那么系统允许更新.如果新版本所做的签名不是匹配的, 那么将需要给应用起一个不同的包名 — 在这种情况下, 用户相当于安装了一个完全的新程序.&lt;/li&gt;
&lt;li&gt;应用程序模块化 – Android允许由相同证书签名的应用程序运行在相同的进程中, 此时系统会将它们作为单个应用程序对待.在这种方式中, 可以按模块化的方式部署应用, 用户可以根据需要独立地更新每一个模块.&lt;/li&gt;
&lt;li&gt;代码/数据 的授权共享 – Android 提供模式匹配的权限控制机制,因此一个应用可以暴露功能给另一个用指定证书签名的应用. 通过用相同证书签名多个应用,以及使用模式匹配的权限检查,应用程序可以以安全的方式共享代码和数据.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;参考资料&#34;&gt;参考资料&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/u011974987/article/details/52415037&#34;&gt;Android中签名、证书、公钥密钥的概念及使用&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
- https://damuwangs.github.io/posts/%E7%BC%96%E7%A8%8B/uniapp-app%E7%AD%BE%E5%90%8D/ - </description>
        </item>
    
    
    
        <item>
        <title>JavaScript-MVC、MVVM模式</title>
        <link>https://damuwangs.github.io/posts/%E7%BC%96%E7%A8%8B/javascript-mvcmvvm%E6%A8%A1%E5%BC%8F/</link>
        <pubDate>Mon, 08 Nov 2021 00:00:00 +0000</pubDate>
        
        <guid>https://damuwangs.github.io/posts/%E7%BC%96%E7%A8%8B/javascript-mvcmvvm%E6%A8%A1%E5%BC%8F/</guid>
        <description>DaMuWang https://damuwangs.github.io/posts/%E7%BC%96%E7%A8%8B/javascript-mvcmvvm%E6%A8%A1%E5%BC%8F/ -&lt;h1 id=&#34;概念&#34;&gt;概念&lt;/h1&gt;
&lt;p&gt;模型（Model）：指数据模型，泛指后端进行的各种业务逻辑处理和数据操控，主要围绕数据库系统展开。后端的处理通常会非常复杂&lt;/p&gt;
&lt;p&gt;视图（View）：视图部分，通常指html等用来对用户展示的一部分&lt;/p&gt;
&lt;p&gt;控制器（Controller）：负责根据用户从&amp;quot;视图层&amp;quot;输入的指令，选取&amp;quot;数据层&amp;quot;中的数据，然后对其进行相应的操作，产生最终结果&lt;/p&gt;
&lt;p&gt;视图模型（ViewModel）：由前端开发人员组织生成和维护的视图数据层。在这一层，前端开发者对从后端获取的 Model 数据进行转换处理，做二次封装，以生成符合 View 层使用预期的视图数据模型。需要注意的是 ViewModel 所封装出来的数据模型包括视图的状态和行为两部分，而 Model 层的数据模型是只包含状态的，比如页面的这一块展示什么，那一块展示什么这些都属于视图状态（展示），而页面加载进来时发生什么，点击这一块发生什么，这一块滚动时发生什么这些都属于视图行为（交互），视图状态和行为都封装在了 ViewModel 里。这样的封装使得 ViewModel 可以完整地去描述 View 层。由于实现了双向绑定，ViewModel 的内容会实时展现在 View 层，这是激动人心的，因为前端开发者再也不必低效又麻烦地通过操纵 DOM 去更新视图，MVVM 框架已经把最脏最累的一块做好了，我们开发者只需要处理和维护 ViewModel，更新数据视图就会自动得到相应更新，真正实现数据驱动开发。看到了吧，View 层展现的不是 Model 层的数据，而是 ViewModel 的数据，由 ViewModel 负责与 Model 层交互，这就完全解耦了 View 层和 Model 层，这个解耦是至关重要的，它是前后端分离方案实施的重要一环&lt;/p&gt;
&lt;h1 id=&#34;mvc&#34;&gt;MVC&lt;/h1&gt;
&lt;p&gt;&lt;img src=&#34;https://damuwangs.github.io/img/JavaScript-MVC%E3%80%81MVP%E3%80%81MVVM%E6%A8%A1%E5%BC%8F/MVC.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用户端操作View ，Js监听事件绑定DOM数据，传送指令到 Controller&lt;/li&gt;
&lt;li&gt;Controller 完成业务逻辑后，要求 Model 改变数据状态&lt;/li&gt;
&lt;li&gt;Model 将新的数据发送到 View，通过JS操作DOM为View赋值，用户得到反馈&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;如果前端没有框架，只使用原生的html+js，MVC模式可以这样理解：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;将html看成view&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;js看成controller，负责处理用户与应用的交互，响应对view的操作（对事件的监听），调用Model对数据进行操作，完成model与view的同步（根据model的改变，通过选择器对view进行操作）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;将js的ajax当做Model，也就是数据层，通过ajax从服务器获取数据&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;mvvm&#34;&gt;MVVM&lt;/h1&gt;
&lt;p&gt;就像分析MVC是如何合理分配工作的一样，我们需要数据所以有了M，我们需要界面所以有了V，而我们需要找一个地方把M赋值给V来显示，所以有了C，然而我们忽略了一个很重要的操作：&lt;strong&gt;数据解析&lt;/strong&gt;。在MVC出生的年代，手机APP的数据往往都比较简单，没有现在那么复杂，所以那时的数据解析很可能一步就解决了，所以既然有这样一个问题要处理，而面向对象的思想就是用类和对象来解决问题，显然V和M早就被定义死了，它们都不应该处理“解析数据”的问题，理所应当的，“解析数据”这个问题就交给C来完成了。而现在的手机App功能越来越复杂，数据结构也越来越复杂，所以数据解析也就没那么简单了。如果我们继续按照MVC的设计思路，将数据解析的部分放到了Controller里面，那么Controller就将变得相当臃肿。还有相当重要的一点：Controller被设计出来并不是处理数据解析的。1、管理自己的生命周期；2、处理Controller之间的跳转；3、实现Controller容器。这里面根本没有“数据解析”这一项，所以显然，数据解析也不应该由Controller来完成。那么我们的MVC中，M、V、C都不应该处理数据解析，那么由谁来呢？这个问题实际上在面向对象的时候相当好回答：既然目前没有类能够处理这个问题，那么就创建一个新的类出来解决不就好了？所以我们聪明的开发者们就专门为数据解析创建出了一个新的类：ViewModel。这就是MVVM的诞生&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://damuwangs.github.io/img/JavaScript-MVC%E3%80%81MVP%E3%80%81MVVM%E6%A8%A1%E5%BC%8F/MVVM.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用户端操作View，ViewModel监听视图变化，触发绑定事件&lt;/li&gt;
&lt;li&gt;ViewModel组织好数据，请求服务端处理业务逻辑调用Model层操作数据&lt;/li&gt;
&lt;li&gt;服务端处理完数据及逻辑后，要求 Model 改变数据状态&lt;/li&gt;
&lt;li&gt;ViewModel组装结果数据后自动绑定到View层，用户得到反馈&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://damuwangs.github.io/img/JavaScript-MVC%E3%80%81MVP%E3%80%81MVVM%E6%A8%A1%E5%BC%8F/MVVM%E7%BB%84%E6%88%90%E9%83%A8%E5%88%86.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;思考&#34;&gt;思考&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;ViewModel和Controller的区别&lt;/p&gt;
&lt;p&gt;Controller所要担任的任务更加全面，包括了很多的业务逻辑。而ViewModel则简化甚至剔除了业务逻辑，主要的工作就只是把Model中的数据组装成适合View使用的数据&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;前端MVVM对比MVC的优点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;MVC开发者在代码中大量调用相同的 DOM API, 处理繁琐 ，操作冗余，使得代码难以维护&lt;/p&gt;
&lt;p&gt;大量的DOM 操作使页面渲染性能降低，加载速度变慢，影响用户体验&lt;/p&gt;
&lt;p&gt;当 Model 频繁发生变化，开发者需要主动更新到View ；当用户的操作导致 Model 发生变化，开发者同样需要将变化的数据同步到Model 中，这样的工作不仅繁琐，而且很难维护复杂多变的数据状态&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;数据驱动： 在以前的模式中，总是先处理业务数据，然后根据的数据变化，去获取DOM的引用然后更新DOM，也是通过DOM来获取用户输入，最后再进行数据的更新。而在MVVM中数据和业务逻辑处于一个独立且抽象的View Model中，ViewModel只要关注数据和业务逻辑，不需要和DOM之间打交道。由数据自动去驱动DOM去自动更新DOM，DOM的改变又同时自动反馈到数据，数据成为主导因素，这样使得在业务逻辑处理只要关心数据，方便且简单&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;参考资料&#34;&gt;参考资料&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;http://www.ruanyifeng.com/blog/2015/02/mvcmvp_mvvm.html&#34;&gt;MVC，MVP 和 MVVM 的图示&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/iovec/p/7840228.html&#34;&gt;前后端分手大师——MVVM 模式&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.jianshu.com/p/7088249276de&#34;&gt;前端MVVM理论-MVVM&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/qq_42068550/article/details/89480350&#34;&gt;MVC和MVVM的区别&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
- https://damuwangs.github.io/posts/%E7%BC%96%E7%A8%8B/javascript-mvcmvvm%E6%A8%A1%E5%BC%8F/ - </description>
        </item>
    
    
    
        <item>
        <title>UniApp-原生插件开发</title>
        <link>https://damuwangs.github.io/posts/%E7%BC%96%E7%A8%8B/uniapp-%E5%8E%9F%E7%94%9F%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/</link>
        <pubDate>Wed, 20 Oct 2021 00:00:00 +0000</pubDate>
        
        <guid>https://damuwangs.github.io/posts/%E7%BC%96%E7%A8%8B/uniapp-%E5%8E%9F%E7%94%9F%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/</guid>
        <description>DaMuWang https://damuwangs.github.io/posts/%E7%BC%96%E7%A8%8B/uniapp-%E5%8E%9F%E7%94%9F%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/ -&lt;h1 id=&#34;一开发环境&#34;&gt;一、开发环境&lt;/h1&gt;
&lt;h2 id=&#34;java环境18&#34;&gt;Java环境1.8&lt;/h2&gt;
&lt;p&gt;参考：&lt;a href=&#34;https://blog.csdn.net/weixin_44084189/article/details/98966787/&#34;&gt;jdk1.8下载与安装教程&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;android环境&#34;&gt;Android环境&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;软件下载&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.androiddevtools.cn&#34;&gt;下载SDK Tools&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://damuwangs.github.io/img/UniApp-%E5%8E%9F%E7%94%9F%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/SDKTools.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;下载完成点击SDK Manager.exe运行&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://damuwangs.github.io/img/UniApp-%E5%8E%9F%E7%94%9F%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/SDKManager.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;需要下载以下插件&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://damuwangs.github.io/img/UniApp-%E5%8E%9F%E7%94%9F%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%E6%8F%92%E4%BB%B6%E4%B8%8B%E8%BD%BD.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;环境变量配置&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;系统变量下添加变量&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;ANDROID_SDK_HOME，指向Android SDK根目录
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Path新增:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;Android SDK根目录&lt;span style=&#34;color:#f1fa8c&#34;&gt;\p&lt;/span&gt;latform-tools;
Android SDK根目录&lt;span style=&#34;color:#f1fa8c&#34;&gt;\t&lt;/span&gt;ools;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;命令行测试是否配置成功&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;adb &lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;成功后可以看到adb的版本号及命令行说明等信息&lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;androidstudio&#34;&gt;AndroidStudio&lt;/h2&gt;
&lt;p&gt;参考：&lt;a href=&#34;https://developer.android.google.cn/studio/index.html&#34;&gt;Android Studio官网&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;demo下载&#34;&gt;demo下载&lt;/h2&gt;
&lt;p&gt;参考：&lt;a href=&#34;https://nativesupport.dcloud.net.cn/AppDocs/download/android?id=android-%E7%A6%BB%E7%BA%BFsdk-%E6%AD%A3%E5%BC%8F%E7%89%88&#34;&gt;Android 离线SDK - 正式版&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;二androidstudio运行&#34;&gt;二、AndroidStudio运行&lt;/h1&gt;
&lt;h2 id=&#34;项目导入&#34;&gt;项目导入&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;点击Android Studio菜单选项File—&amp;gt;New—&amp;gt;Import Project&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://damuwangs.github.io/img/UniApp-%E5%8E%9F%E7%94%9F%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%E5%AF%BC%E5%85%A51.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;导入选择UniPlugin-Hello-As工程，点击OK！等待工程导入完毕&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://damuwangs.github.io/img/UniApp-%E5%8E%9F%E7%94%9F%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%E5%AF%BC%E5%85%A52.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;导入后切换为Android项目结构，目录如下&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://damuwangs.github.io/img/UniApp-%E5%8E%9F%E7%94%9F%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%E7%9B%AE%E5%BD%95.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;生成签名文件&#34;&gt;生成签名文件&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;点击Build—&amp;gt;Generate Signed Apk&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://damuwangs.github.io/img/UniApp-%E5%8E%9F%E7%94%9F%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%E7%94%9F%E6%88%90%E7%AD%BE%E5%90%8D.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;默认选择APK点击下一步&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://damuwangs.github.io/img/UniApp-%E5%8E%9F%E7%94%9F%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%E7%94%9F%E6%88%90%E7%AD%BE%E5%90%8D2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;选择生成位置（选择为app模块根目录），输入密码和别名点击下一步&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://damuwangs.github.io/img/UniApp-%E5%8E%9F%E7%94%9F%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%E7%94%9F%E6%88%90%E7%AD%BE%E5%90%8D3.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;选择类型（默认为debug）点击完成，成功生成.jks文件&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://damuwangs.github.io/img/UniApp-%E5%8E%9F%E7%94%9F%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%E7%94%9F%E6%88%90%E7%AD%BE%E5%90%8D4.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;申请appkey&#34;&gt;申请Appkey&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;进入jdk bin目录执行指令输入密码读取签名信息&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;keytool -list -v -keystore d:&lt;span style=&#34;color:#f1fa8c&#34;&gt;\1&lt;/span&gt;23.jks -- d:&lt;span style=&#34;color:#f1fa8c&#34;&gt;\1&lt;/span&gt;23.jks为签名文件位置
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://damuwangs.github.io/img/UniApp-%E5%8E%9F%E7%94%9F%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%E8%AF%BB%E5%8F%96%E7%AD%BE%E5%90%8D%E4%BF%A1%E6%81%AF.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;登录&lt;a href=&#34;https://dev.dcloud.net.cn/&#34;&gt;开发者中心&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在左侧菜单中选择我创建的应用，点击需要申请的应用&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://damuwangs.github.io/img/UniApp-%E5%8E%9F%E7%94%9F%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%E6%88%91%E5%88%9B%E5%BB%BA%E7%9A%84%E5%BA%94%E7%94%A8.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在应用管理界面选择离线打包Key管理，根据需要选择对应平台，输入包名和SHA1，确认无误点击保存，即可获取到对应平台的App&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://damuwangs.github.io/img/UniApp-%E5%8E%9F%E7%94%9F%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%E7%94%9F%E6%88%90appKey.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;配置及运行&#34;&gt;配置及运行&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;app模块下的AndroidMainfest.xml替换dcloud_appkey对应值&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;meta-data&lt;/span&gt;
    &lt;span style=&#34;color:#50fa7b&#34;&gt;android:name=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;dcloud_appkey&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#50fa7b&#34;&gt;android:value=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;decloud开发者中心申请的appkey&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;app模块下build.gradle修改签名配置&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;signingConfigs {
    config {
      keyAlias &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;jks别名&amp;#39;&lt;/span&gt;
      keyPassword &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;jks密码&amp;#39;&lt;/span&gt;
      storeFile file(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;xxx.jks&amp;#39;&lt;/span&gt;)
     storePassword &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;jks密码&amp;#39;&lt;/span&gt;
  v1SigningEnabled &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt;
  v2SigningEnabled &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt;
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;app模块下asssets—&amp;gt;data—&amp;gt;dcloud_control.xml—&amp;gt;appid替换&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;hbuilder&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;apps&amp;gt;&lt;/span&gt;
      &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;app&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;appid=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;decloud开发者中心申请的appid&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;appver=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;/apps&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;/hbuilder&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;点击Android Studio菜单选项Build—&amp;gt;Rebuild Project编译项目&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://damuwangs.github.io/img/UniApp-%E5%8E%9F%E7%94%9F%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%E7%BC%96%E8%AF%91%E9%A1%B9%E7%9B%AE.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;安装模拟器后点击运行，启动项目&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://damuwangs.github.io/img/UniApp-%E5%8E%9F%E7%94%9F%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%E5%90%AF%E5%8A%A8%E9%A1%B9%E7%9B%AE.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;启动成功弹出模拟器&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://damuwangs.github.io/img/UniApp-%E5%8E%9F%E7%94%9F%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%E6%A8%A1%E6%8B%9F%E5%99%A8.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;三插件开发&#34;&gt;三、插件开发&lt;/h1&gt;
&lt;h2 id=&#34;插件注册&#34;&gt;插件注册&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;第一种方式&lt;/p&gt;
&lt;p&gt;在UniPlugin-Hello-AS工程下 “app” Module根目录assets/dcloud_uniplugins.json文件。 在moudles节点下 添加你要注册的Module 或 Component&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;{
  &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;nativePlugins&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; [
    {
      &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;plugins&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; [
        {
          &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;module&amp;#34;&lt;/span&gt;,
          &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;DCloud-RichAlert&amp;#34;&lt;/span&gt;,
          &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;class&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;uni.dcloud.io.uniplugin_richalert.RichAlertModule&amp;#34;&lt;/span&gt;
        }
      ]
    }
  ]
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;第二种方式
创建一个实体类并实现UniAppHookProxy接口，在onCreate函数中添加组件注册相关参数 或 填写插件需要在启动时初始化的逻辑。&lt;/p&gt;
&lt;p&gt;在UniPlugin-Hello-AS工程下 “app” Module根目录assets/dcloud_uniplugins.json文件，在hooksClass节点添加你创建实现UniAppHookProxy接口的实体类完整名称填入其中即可 (有些需要初始化操作的需求可以在此处添加逻辑，无特殊操作仅使用第一种方式注册即可无需集成UniAppHookProxy接口)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;RichAlert_AppProxy&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;implements&lt;/span&gt; UniAppHookProxy &lt;span style=&#34;color:#ff79c6&#34;&gt;{&lt;/span&gt;
    @Override
    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8be9fd&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;onCreate&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;Application application&lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#6272a4&#34;&gt;//当前uni应用进程回调 仅触发一次 多进程不会触发
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;      &lt;span style=&#34;color:#6272a4&#34;&gt;//可通过UniSDKEngine注册UniModule或者UniComponent
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;}&lt;/span&gt;
  
  @Override
  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8be9fd&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;onSubProcessCreate&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;Application application&lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color:#6272a4&#34;&gt;//其他子进程初始化回调 可用于初始化需要子进程初始化需要的逻辑
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#ff79c6&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;{
  &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;nativePlugins&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; [
    {
      &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;hooksClass&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;uni.dcloud.io.uniplugin_richalert.RichAlert_AppProxy&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;plugins&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; [
        {
          &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;module&amp;#34;&lt;/span&gt;,
          &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;DCloud-RichAlert&amp;#34;&lt;/span&gt;,
          &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;class&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;uni.dcloud.io.uniplugin_richalert.RichAlertModule&amp;#34;&lt;/span&gt;
        }
      ]
    }
  ]
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;dcloud_uniplugins.json说明&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;nativePlugins： 插件跟节点 可存放多个插件&lt;/li&gt;
&lt;li&gt;hooksClass： 生命周期代理（实现AppHookProxy接口类）格式(完整包名加类名)&lt;/li&gt;
&lt;li&gt;plugins: 插件数组&lt;/li&gt;
&lt;li&gt;name : 注册名称&lt;/li&gt;
&lt;li&gt;class : module 或 component 实体类完整名称&lt;/li&gt;
&lt;li&gt;type : module 或 component类型&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;插件类型&#34;&gt;插件类型&lt;/h2&gt;
&lt;h3 id=&#34;1扩展module&#34;&gt;1、扩展Module&lt;/h3&gt;
&lt;p&gt;扩展非UI的特定功能，调用原生android方法&lt;/p&gt;
&lt;h3 id=&#34;2扩展组件-component&#34;&gt;2、扩展组件 Component&lt;/h3&gt;
&lt;p&gt;使用Android原生控件&lt;/p&gt;
&lt;p&gt;向JS环境发送一些事件，比如click事件，通过uniapp触发事件，在android进行响应&lt;/p&gt;
&lt;h3 id=&#34;3unijscallback结果回调&#34;&gt;3、UniJSCallback结果回调&lt;/h3&gt;
&lt;p&gt;JS调用时，有的场景需要返回一些数据，比如以下例子，返回x、y坐标&lt;/p&gt;
&lt;h3 id=&#34;5globalevent-事件&#34;&gt;5、globalEvent 事件&lt;/h3&gt;
&lt;p&gt;用于页面监听持久性事件，例如定位信息，陀螺仪等的变化&lt;/p&gt;
&lt;h2 id=&#34;插件示例&#34;&gt;插件示例&lt;/h2&gt;
&lt;p&gt;封装了一个 RichAlertModule, 富文本alert弹窗Module，代码可参考UniPlugin-Hello-AS工程中的uniplugin_richalert模块&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;RichAlertModule&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;extends&lt;/span&gt; UniDestroyableModule &lt;span style=&#34;color:#ff79c6&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#ff79c6&#34;&gt;...&lt;/span&gt;
    @UniJSMethod&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;uiThread &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8be9fd&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;show&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;JSONObject options&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; UniJSCallback jsCallback&lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;mUniSDKInstance&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;getContext&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;instanceof&lt;/span&gt; Activity&lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color:#ff79c6&#34;&gt;...&lt;/span&gt;
            RichAlert richAlert &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; RichAlert&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;mUniSDKInstance&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;getContext&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;());&lt;/span&gt;
            &lt;span style=&#34;color:#ff79c6&#34;&gt;...&lt;/span&gt;
            richAlert&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;show&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;();&lt;/span&gt;
            &lt;span style=&#34;color:#ff79c6&#34;&gt;...&lt;/span&gt;
        &lt;span style=&#34;color:#ff79c6&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#ff79c6&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#ff79c6&#34;&gt;...&lt;/span&gt;
    &lt;span style=&#34;color:#ff79c6&#34;&gt;...&lt;/span&gt;
    @UniJSMethod&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;uiThread &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8be9fd&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;dismiss&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;{&lt;/span&gt;
        destroy&lt;span style=&#34;color:#ff79c6&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;color:#ff79c6&#34;&gt;}&lt;/span&gt;

    @Override
    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8be9fd&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;destroy&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;alert &lt;span style=&#34;color:#ff79c6&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;null&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; alert&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;isShowing&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;())&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;{&lt;/span&gt;
            UniLogUtils&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;w&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Dismiss the active dialog&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;);&lt;/span&gt;
            alert&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;dismiss&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;();&lt;/span&gt;
        &lt;span style=&#34;color:#ff79c6&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#ff79c6&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#ff79c6&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;HBuilderX 项目中使用RichAlert示例&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// require插件名称  
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; dcRichAlert &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; uni.requireNativePlugin(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;DCloud-RichAlert&amp;#39;&lt;/span&gt;);              
&lt;span style=&#34;color:#6272a4&#34;&gt;// 使用插件  
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;dcRichAlert.show({  
    position&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;bottom&amp;#39;&lt;/span&gt;,  
    title&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;提示信息&amp;#34;&lt;/span&gt;,  
    titleColor&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;#FF0000&amp;#39;&lt;/span&gt;,  
    content&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&amp;lt;a href=&amp;#39;https://uniapp.dcloud.io/&amp;#39; value=&amp;#39;Hello uni-app&amp;#39;&amp;gt;uni-app&amp;lt;/a&amp;gt; 是一个使用 Vue.js 开发跨平台应用的前端框架!\n免费的\n免费的\n免费的\n重要的事情说三遍&amp;#34;&lt;/span&gt;,  
    contentAlign&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;left&amp;#39;&lt;/span&gt;,  
    checkBox&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; {  
        title&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;不再提示&amp;#39;&lt;/span&gt;,  
        isSelected&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt;  
    },  
    buttons&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; [{  
        title&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;取消&amp;#39;&lt;/span&gt;  
    },  
    {  
        title&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;否&amp;#39;&lt;/span&gt;  
    },  
    {  
        title&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;确认&amp;#39;&lt;/span&gt;,  
        titleColor&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;#3F51B5&amp;#39;&lt;/span&gt;  
    }  
    ]  
}, result =&amp;gt; {  
    &lt;span style=&#34;color:#ff79c6&#34;&gt;switch&lt;/span&gt; (result.type) {  
        &lt;span style=&#34;color:#ff79c6&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;button&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt;  
            console.log(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;callback---button--&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; result.index);  
            &lt;span style=&#34;color:#ff79c6&#34;&gt;break&lt;/span&gt;;  
        &lt;span style=&#34;color:#ff79c6&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;checkBox&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt;  
            console.log(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;callback---checkBox--&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; result.isSelected);  
            &lt;span style=&#34;color:#ff79c6&#34;&gt;break&lt;/span&gt;;  
        &lt;span style=&#34;color:#ff79c6&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt;  
            console.log(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;callback---a--&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; JSON.stringify(result));  
            &lt;span style=&#34;color:#ff79c6&#34;&gt;break&lt;/span&gt;;  
        &lt;span style=&#34;color:#ff79c6&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;backCancel&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt;  
            console.log(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;callback---backCancel--&amp;#34;&lt;/span&gt;);  
            &lt;span style=&#34;color:#ff79c6&#34;&gt;break&lt;/span&gt;;  
   }  
})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;四调试与发布&#34;&gt;四、调试与发布&lt;/h1&gt;
&lt;h2 id=&#34;androidstudio调试&#34;&gt;AndroidStudio调试&lt;/h2&gt;
&lt;p&gt;这种用于上层调用已完成，调试底层android插件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;点击发行—&amp;gt;原生APP-本地打包—&amp;gt;生成本地打包App资源&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://damuwangs.github.io/img/UniApp-%E5%8E%9F%E7%94%9F%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%E7%94%9F%E6%88%90%E6%9C%AC%E5%9C%B0%E6%89%93%E5%8C%85App%E8%B5%84%E6%BA%90.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;编译成功在unpackage目录下生成资源&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://damuwangs.github.io/img/UniApp-%E5%8E%9F%E7%94%9F%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%E6%9C%AC%E5%9C%B0%E6%89%93%E5%8C%85%E6%88%90%E5%8A%9F.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;把APP资源文件放入到UniPlugin-Hello-AS工程下app  Module根目录assets/apps目录下&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://damuwangs.github.io/img/UniApp-%E5%8E%9F%E7%94%9F%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%E5%AF%BC%E5%85%A5AndroidStudio.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;appid注意 一定要统一否则会导致应用无法正常运行&lt;/p&gt;
&lt;p&gt;以dcloud_control.xml配置的appid为准&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://damuwangs.github.io/img/UniApp-%E5%8E%9F%E7%94%9F%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/AppID%E4%B8%80%E8%87%B4%E6%80%A7.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;配置好运行项目即可&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;hbuilderx调试&#34;&gt;HbuilderX调试&lt;/h2&gt;
&lt;p&gt;这种用于底层插件开发完成，调试上层uniapp调用&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;androidStudio编译成功，生成aar&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://damuwangs.github.io/img/UniApp-%E5%8E%9F%E7%94%9F%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%E7%94%9F%E6%88%90aar.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;创建&lt;a href=&#34;https://nativesupport.dcloud.net.cn/NativePlugin/course/package&#34;&gt;package.json&lt;/a&gt;文件并填写必要的信息&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;{
  &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;RichAlert&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#6272a4&#34;&gt;// 插件名称
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;DCloud-RichAlert&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#6272a4&#34;&gt;// 插件标识，需要保证唯一性
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;version&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;0.1.3&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#6272a4&#34;&gt;// 插件版本号
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;description&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;示例插件&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#6272a4&#34;&gt;// 插件描述信息
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;_dp_type&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;nativeplugin&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;_dp_nativeplugin&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt;{
      &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;android&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; {
          &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;plugins&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; [
              {
                  &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;module&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#6272a4&#34;&gt;// 根据上文插件类型填写module或component
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;                  &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;DCloud-RichAlert&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#6272a4&#34;&gt;// 注册插件的名称, 注意：module 的 name 必须以插件id为前缀或和插件id相同
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;                  &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;class&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;uni.dcloud.io.uniplugin_richalert.RichAlertModule&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// Android项目中dcloud_uniplugins.json中配置的类名
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;              }
          ],
          &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;integrateType&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;aar&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#6272a4&#34;&gt;// 可取值aar|jar
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;          &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;minSdkVersion&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;16&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// 支持的Android最低版本，如21
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;      }
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;创建插件文件夹，目录格式如下&lt;/p&gt;
&lt;p&gt;Dcloud-RichAlert为自定义插件名称，aar文件放在android目录下&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://damuwangs.github.io/img/UniApp-%E5%8E%9F%E7%94%9F%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%E6%8F%92%E4%BB%B6%E7%9B%AE%E5%BD%95.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;配置到uni-app项目下的“nativeplugins”目录&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://damuwangs.github.io/img/UniApp-%E5%8E%9F%E7%94%9F%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%E6%8F%92%E4%BB%B6%E5%BC%95%E5%85%A5.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在manifest.json文件的“App原生插件配置”项下点击“选择本地插件”，在列表中选择需要打包生效的插件&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://damuwangs.github.io/img/UniApp-%E5%8E%9F%E7%94%9F%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%E5%8A%A0%E8%BD%BD%E6%8F%92%E4%BB%B6.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;点击运行—&amp;gt;运行到手机或模拟器—&amp;gt;制作自定义调试基座&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;APPID与开发者中心的相同&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://damuwangs.github.io/img/UniApp-%E5%8E%9F%E7%94%9F%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%E5%88%B6%E4%BD%9C%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%BA%E5%BA%A7.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;制作成功输出以下内容&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://damuwangs.github.io/img/UniApp-%E5%8E%9F%E7%94%9F%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%BA%E5%BA%A7%E7%94%9F%E6%88%90.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;uniapp打包时需要点击运行—&amp;gt;运行到手机或模拟器—&amp;gt;运行基座选择—&amp;gt;自定义调试基座&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;注意&#34;&gt;注意&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;如果出现Android SDK路径不对问题，请在Android Studio中鼠标右键UniPlugin-Hello-AS选择Open Module Settings, 在SDK Location 中设置相关环境路径&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://damuwangs.github.io/img/UniApp-%E5%8E%9F%E7%94%9F%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/SDKLocation.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;项目初始化时如果下方一直提示gradle下载中,则可以手动下载放到gradle安装目录(默认为：C:\Users\Administrator.gradle\wrapper\dists)
替换后重启android Studio正常编译项目&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;关于uniapp自定义基座&lt;/p&gt;
&lt;p&gt;使用HBuilder/HBuilderX开发应用时，可在手机/模拟器上查看运行效果，点击菜单栏“运行”-&amp;gt;“运行到手机或模拟器”使用。
此功能会在手机/模拟器上安装“HBuilder”应用（或者叫HBuilder标准运行基座），在应用开发过程中HBuilder/HBuilderX会将应用资源实时同步到基座并刷新，从而实时查看到修改效果。
上述HBuilder标准运行基座，是由DCloud提前打包好的，使用的是DCloud申请的第三方SDK配置，manifest里大多数设置都无法动态生效，需要再次打包才可以生效。
例如微信分享，不管开发者在manifest里如何配置，使用HBuilder标准运行基座分享后显示的来源一定是“HBuilder”。
但开发者真实打包后的手机应用又无法通过运行方式来调试，这导致涉及manifest配置的内容调测变的很困难。&lt;/p&gt;
&lt;p&gt;为了解决manifest配置相关调试的便利性问题，DCloud提供了制作自定义运行基座的功能，也就是开发者可类似DCloud一样，自己做一个运行基座，里面使用的是自定义的manifest配置。
开发者打包了自定义运行基座，就可以把这个基座运行到手机/Android模拟器上，进行日志查看。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;在uni-app应用中调用uni-app原生插件也必须使用自定义调试基座&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;参考资料&#34;&gt;参考资料&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://nativesupport.dcloud.net.cn/NativePlugin/course/android&#34;&gt;uniapp原生插件开发&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://nativesupport.dcloud.net.cn/AppDocs/usesdk/appkey&#34;&gt;申请Appkey&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://ask.dcloud.net.cn/question/122811&#34;&gt;安卓打包,显示未配置appkey或配置错误&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
- https://damuwangs.github.io/posts/%E7%BC%96%E7%A8%8B/uniapp-%E5%8E%9F%E7%94%9F%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/ - </description>
        </item>
    
    
    
        <item>
        <title>【待补充】《白夜行》读后感</title>
        <link>https://damuwangs.github.io/posts/%E6%80%9D%E8%80%83/%E7%99%BD%E5%A4%9C%E8%A1%8C%E8%AF%BB%E5%90%8E%E6%84%9F/</link>
        <pubDate>Fri, 15 Oct 2021 00:00:00 +0000</pubDate>
        
        <guid>https://damuwangs.github.io/posts/%E6%80%9D%E8%80%83/%E7%99%BD%E5%A4%9C%E8%A1%8C%E8%AF%BB%E5%90%8E%E6%84%9F/</guid>
        <description>DaMuWang https://damuwangs.github.io/posts/%E6%80%9D%E8%80%83/%E7%99%BD%E5%A4%9C%E8%A1%8C%E8%AF%BB%E5%90%8E%E6%84%9F/ -&lt;h1 id=&#34;人物关系图&#34;&gt;人物关系图&lt;/h1&gt;
&lt;h2 id=&#34;桐原亮司---雪穗&#34;&gt;桐原亮司 - 雪穗&lt;/h2&gt;
&lt;p&gt;警察：笹垣、古贺久志&lt;/p&gt;
&lt;p&gt;当铺：桐原亮司、桐原洋介（恋幼癖）、桐原弥生子、松浦勇&lt;/p&gt;
&lt;p&gt;旧城区：西本雪穗、西本文代、房管、寺崎忠夫&lt;/p&gt;
&lt;p&gt;新城区：唐泽礼子、礼子&lt;/p&gt;
&lt;p&gt;男校：桐原亮司、友彦、奈美江&lt;/p&gt;
&lt;p&gt;欧巴桑：西口奈美江、花冈夕子&lt;/p&gt;
&lt;p&gt;女校：雪穗、川岛江利子、藤村都子、中道正晴（雪穗数学家教）、香苗&lt;/p&gt;
&lt;p&gt;卖盗版软件的公司（后来搬走改卖硬件）&lt;/p&gt;
&lt;p&gt;交际舞协会：一诚、高宫诚&lt;/p&gt;
&lt;p&gt;侦探公司、专利公司：金枝、绘里、高宫诚、三泽千都留&lt;/p&gt;
&lt;p&gt;医药公司：康晴，一诚、筱冢美佳&lt;/p&gt;
&lt;p&gt;医院：典子、藤井、秋吉雄一&lt;/p&gt;
&lt;h1 id=&#34;情节梳理&#34;&gt;情节梳理&lt;/h1&gt;
&lt;h1 id=&#34;读后感&#34;&gt;读后感&lt;/h1&gt;
- https://damuwangs.github.io/posts/%E6%80%9D%E8%80%83/%E7%99%BD%E5%A4%9C%E8%A1%8C%E8%AF%BB%E5%90%8E%E6%84%9F/ - </description>
        </item>
    
    
    
        <item>
        <title>Vue2-响应式原理</title>
        <link>https://damuwangs.github.io/posts/%E7%BC%96%E7%A8%8B/vue2-%E5%93%8D%E5%BA%94%E5%BC%8F%E5%8E%9F%E7%90%86/</link>
        <pubDate>Wed, 13 Oct 2021 00:00:00 +0000</pubDate>
        
        <guid>https://damuwangs.github.io/posts/%E7%BC%96%E7%A8%8B/vue2-%E5%93%8D%E5%BA%94%E5%BC%8F%E5%8E%9F%E7%90%86/</guid>
        <description>DaMuWang https://damuwangs.github.io/posts/%E7%BC%96%E7%A8%8B/vue2-%E5%93%8D%E5%BA%94%E5%BC%8F%E5%8E%9F%E7%90%86/ -&lt;h1 id=&#34;概述&#34;&gt;概述&lt;/h1&gt;
&lt;p&gt;Vue采用数据劫持结合发布者-订阅者模式的方式来实现数据的响应式，&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;监听属性变化&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Vue在初始化的时候，对data对象进行遍历，在这个方法中会调Observe（监听器，观察者）对用户的数据进行监听&lt;/li&gt;
&lt;li&gt;在observe中对数据进行判断，对对象进行循环，使用defineReactive，它是vue中的一个核心方法，用来定义响应式&lt;/li&gt;
&lt;li&gt;defineReactive方法中实例化了一个Dep（发布者），通过Object.defineProperty对数据进行拦截，把这些 property 全部转为 getter/setter。get数据的时候，通过dep.depend触发Watcher（订阅者）的依赖收集，收集订阅者；set时，会对数据进行比较，如果数据发生了变化会通过dep.notify发布通知，通知Watcher，更新视图&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;解析指令&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Vue在初始化时传入当前Vue实例和html根节点的元素标识，进行模板解析&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;首先会取出模板元素将其转化成fragment编译后统一进行dom挂载，这样做比较高效（此为虚拟dom）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;循环从fragment取出所有元素子节点，进行指令类型判断（以v-text为例），传入指令类型和属性值调用update方法&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;update方法中会将视图与vue实例的data属性绑定渲染页面数据。&lt;/p&gt;
&lt;p&gt;当data属性值发生变化会被defineReactive监听到，然后通知wctaher绑定新的数据更新视图&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://damuwangs.github.io/img/Vue2-%E5%93%8D%E5%BA%94%E5%BC%8F%E5%8E%9F%E7%90%86/%E5%93%8D%E5%BA%94%E5%BC%8F%E5%9B%BE%E8%A7%A3.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;代码&#34;&gt;代码&lt;/h1&gt;
&lt;h2 id=&#34;template&#34;&gt;template&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;app&amp;#34;&lt;/span&gt;&amp;gt;
    &lt;span style=&#34;color:#6272a4&#34;&gt;&amp;lt;!-- 双向绑定 --&amp;gt;&lt;/span&gt;
    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;text&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;v-model&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;监听属性变化&#34;&gt;监听属性变化&lt;/h2&gt;
&lt;p&gt;初始化vue时会传入一个json格式的对象&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; vue &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; Vue({
    el&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;#app&amp;#39;&lt;/span&gt;,
    data&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; {
        name&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;,
    }
})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;取出该对象并遍历data数据，使用Object.defineProperty()方法来监听每一个属性的变化&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;observe(value){
    &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#ff79c6&#34;&gt;!&lt;/span&gt;value &lt;span style=&#34;color:#ff79c6&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;typeof&lt;/span&gt; value &lt;span style=&#34;color:#ff79c6&#34;&gt;!==&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;object&amp;#39;&lt;/span&gt;) {
        &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt;
    }
    &lt;span style=&#34;color:#6272a4&#34;&gt;//遍历data
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Object&lt;/span&gt;.keys(value).forEach(key =&amp;gt;{
        &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.defineReactive(value,key,value[key])
        &lt;span style=&#34;color:#6272a4&#34;&gt;// 代理data中的属性到vue实例上
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.proxyData(key)
    })
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;使用defineReactive，用来定义响应式&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;defineReactive(data, key, value){
    &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.observe(value) &lt;span style=&#34;color:#6272a4&#34;&gt;//递归解决数据嵌套
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; dep &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; Dep()
    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Object&lt;/span&gt;.defineProperty(data, key, {
        get(){
            Dep.target &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; dep.addDep(Dep.target)
            &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; value
        },
        set(newVal){
            &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; (newVal &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; value) {
                &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt;
            }
            value &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; newVal
            dep.notify()
        }
    })
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;因为要实现数据动态绑定所以定义了Dep(依赖管理器)和Watcher(依赖)
Watcher为Dep的子对象，当Watcher初始化时会将当前Watcher实例放进Dep的静态属性target中，然后再读取当前vue实例的数据，触发Object.defineProperty()的getter
Object.defineProperty()触发getter时会先判断全局静态属性是否存在，如果存在则添加Watcher依赖
当数据发生变化时，触发Object.defineProperty()的setter,如果新旧数据没有发生变化则直接return,如果新旧数据发生变化则调用Dep的notify方法循环获取所有依赖进行update&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// Dep 用来管理依赖(Watcher)
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; Dep {
    constructor(){
        &lt;span style=&#34;color:#6272a4&#34;&gt;// 这里存放若干依赖(Watcher),一个Watcher对应一个key
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.deps &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; [] 
    }

    &lt;span style=&#34;color:#6272a4&#34;&gt;// 添加依赖
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    addDep(dep){
        &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.deps.push(dep)
    }

    &lt;span style=&#34;color:#6272a4&#34;&gt;// 通知所有依赖
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    notify(){
        &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.deps.forEach(dep =&amp;gt;{dep.update()})
    }
}

&lt;span style=&#34;color:#6272a4&#34;&gt;// 依赖
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; Watcher {
    constructor(vm, key, callback){
        &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.vm &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; vm
        &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.key &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; key
        &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.callback &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; callback
        
        &lt;span style=&#34;color:#6272a4&#34;&gt;// 将当前Watcher实例指定到Dep静态属性target
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;        Dep.target &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;
        &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.vm[&lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.key] &lt;span style=&#34;color:#6272a4&#34;&gt;// 触发getter,添加依赖
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;        Dep.target &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;null&lt;/span&gt;
        console.log(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Watcher&amp;#39;&lt;/span&gt;);
    }

    update(){
        console.log(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;属性更新了&amp;#39;&lt;/span&gt;)
        &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.callback.call(&lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.vm, &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.vm[&lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.key])
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;解析指令&#34;&gt;解析指令&lt;/h2&gt;
&lt;p&gt;在数据相应话之后会进行模板的解析，传入当前页面元素和vue实例。首先将元素转化成fragment&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// 取出宿主元素将其转换成fragment编译后统一进行dom挂载,这样做比较高效
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;node2Fragment(el){
    &lt;span style=&#34;color:#6272a4&#34;&gt;// fragment详细解释查看参考资料
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; frag &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.createDocumentFragment()
    &lt;span style=&#34;color:#6272a4&#34;&gt;//将el中所有子元素搬家至frag中
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; child
    &lt;span style=&#34;color:#6272a4&#34;&gt;//每次拿出el里面的首个元素赋值给child,然后把child放进frag
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;while&lt;/span&gt; (child &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; el.firstChild) {
        frag.appendChild(child)
    }
    &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; frag
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;解析指令&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;compile(el){
    &lt;span style=&#34;color:#6272a4&#34;&gt;//获取元素子节点
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; childNodes &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; el.childNodes 
    &lt;span style=&#34;color:#6272a4&#34;&gt;// 将结果转换成数组进行遍历
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Array&lt;/span&gt;.from(childNodes).forEach(node =&amp;gt; {
        &lt;span style=&#34;color:#6272a4&#34;&gt;//类型判断（nodeType详细解析查看参考资料）
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; (node.nodeType &lt;span style=&#34;color:#ff79c6&#34;&gt;===&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;) {
            &lt;span style=&#34;color:#6272a4&#34;&gt;// 元素
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#6272a4&#34;&gt;// 查找k-, @, :
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; nodeAttrs &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; node.attributes &lt;span style=&#34;color:#6272a4&#34;&gt;//拿出节点所有属性
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Array&lt;/span&gt;.from(nodeAttrs).forEach(attr =&amp;gt; {
                &lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; attrName &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; attr.name &lt;span style=&#34;color:#6272a4&#34;&gt;// 属性名：v-model
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;                &lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; attrValue &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; attr.value &lt;span style=&#34;color:#6272a4&#34;&gt;// 属性值：name
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;                &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; (attrName.indexOf(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;v-&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;) {
                    &lt;span style=&#34;color:#6272a4&#34;&gt;//如果是指令则截取掉前缀v-
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;                    &lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; dir &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; attrName.substring(&lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;)
                    &lt;span style=&#34;color:#6272a4&#34;&gt;// 执行指令
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;                    &lt;span style=&#34;color:#6272a4&#34;&gt;// this[dir] = this.model()
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;                    &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;[dir] &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;[dir](node, &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.vm, attrValue)
                }              
            })
        }
        &lt;span style=&#34;color:#6272a4&#34;&gt;//递归子节点
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; (node.childNodes &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; node.childNodes.length &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;) {
            &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.compile(node)
        }
    })
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;绑定视图&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;model(node, vm, attrValue){
	&lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.update(node, vm, attrValue, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;model&amp;#39;&lt;/span&gt;) 
    &lt;span style=&#34;color:#6272a4&#34;&gt;// 视图对模型的响应
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    node.addEventListener(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;input&amp;#39;&lt;/span&gt;,e =&amp;gt; {
        vm[attrValue] &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; e.target.value
    })
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;通过wctaher监听数据变化更新视图&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// 参数：节点、vue实例、指令值(name)、指令类型(model)
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;update(node, vm, attrValue, dir){
    &lt;span style=&#34;color:#6272a4&#34;&gt;// 根据指令名称+Updater拼接要执行的修改方法(类似java的反射)
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;// updateFn = modelUpdater
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; updateFn &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;[dir&lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Updater&amp;#39;&lt;/span&gt;]
    &lt;span style=&#34;color:#6272a4&#34;&gt;// 第一次更新
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    updateFn &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; updateFn(node, vm[attrValue])
    &lt;span style=&#34;color:#6272a4&#34;&gt;// 依赖收集
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; Watcher(vm, attrValue, &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;(value){
        updateFn &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; updateFn(node, value)
    })
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;绑定新数据刷新视图&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;modelUpdater(node, value){
    node.value &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; value
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;参考资料&#34;&gt;参考资料&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://www.w3school.com.cn/jsref/prop_node_nodetype.asp&#34;&gt;HTML DOM nodeType 属性&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.jianshu.com/p/8ff10b4cf929&#34;&gt;Document.createDocumentFragment()&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://codepen.io/damuwangs/pen/RwZPKjw&#34;&gt;codepen-Vue2-响应式原理&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
- https://damuwangs.github.io/posts/%E7%BC%96%E7%A8%8B/vue2-%E5%93%8D%E5%BA%94%E5%BC%8F%E5%8E%9F%E7%90%86/ - </description>
        </item>
    
    
    
        <item>
        <title>【待补充】关于租房的一些方法论</title>
        <link>https://damuwangs.github.io/posts/%E6%80%9D%E8%80%83/%E5%85%B3%E4%BA%8E%E7%A7%9F%E6%88%BF%E7%9A%84%E4%B8%80%E4%BA%9B%E6%96%B9%E6%B3%95%E8%AE%BA/</link>
        <pubDate>Wed, 13 Oct 2021 00:00:00 +0000</pubDate>
        
        <guid>https://damuwangs.github.io/posts/%E6%80%9D%E8%80%83/%E5%85%B3%E4%BA%8E%E7%A7%9F%E6%88%BF%E7%9A%84%E4%B8%80%E4%BA%9B%E6%96%B9%E6%B3%95%E8%AE%BA/</guid>
        <description>DaMuWang https://damuwangs.github.io/posts/%E6%80%9D%E8%80%83/%E5%85%B3%E4%BA%8E%E7%A7%9F%E6%88%BF%E7%9A%84%E4%B8%80%E4%BA%9B%E6%96%B9%E6%B3%95%E8%AE%BA/ -&lt;h1 id=&#34;小区&#34;&gt;小区&lt;/h1&gt;
&lt;p&gt;昆明城市花园-回迁房&lt;/p&gt;
&lt;p&gt;惠南社区石家围墙西电小区-老小区&lt;/p&gt;
&lt;h1 id=&#34;方法论&#34;&gt;方法论&lt;/h1&gt;
&lt;p&gt;这里我介绍个成功经验。在58同城租房平台，筛选个人房源的(看到房源下面是机构的基本可以过了，都被扒了一层皮，当然你想合租小而美的单间或者公寓可以找中介)，排序按时间排序(优质的房子肯定不会挂几个月)，然后选定价格区间、户型、地段等，就能找到靠谱的房东直租(概率极大，不排除二房东，中介假冒等)。&lt;/p&gt;
&lt;h1 id=&#34;参考资料&#34;&gt;参考资料&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;http://www.boohee.com/food&#34;&gt;热量查询&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://psychologyandfitness.cn/bmrtdeecalculator/&#34;&gt;基础代谢计算&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.sohu.com/a/380044473_685943&#34;&gt;增肌减脂必知BMR&amp;amp;TDEE计算口诀&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
- https://damuwangs.github.io/posts/%E6%80%9D%E8%80%83/%E5%85%B3%E4%BA%8E%E7%A7%9F%E6%88%BF%E7%9A%84%E4%B8%80%E4%BA%9B%E6%96%B9%E6%B3%95%E8%AE%BA/ - </description>
        </item>
    
    
    
        <item>
        <title>Vue2-路由传参，页面刷新后参数类型改变</title>
        <link>https://damuwangs.github.io/posts/%E7%BC%96%E7%A8%8B/vue2-%E8%B7%AF%E7%94%B1%E4%BC%A0%E5%8F%82%E9%A1%B5%E9%9D%A2%E5%88%B7%E6%96%B0%E5%90%8E%E5%8F%82%E6%95%B0%E7%B1%BB%E5%9E%8B%E6%94%B9%E5%8F%98/</link>
        <pubDate>Thu, 30 Sep 2021 00:00:00 +0000</pubDate>
        
        <guid>https://damuwangs.github.io/posts/%E7%BC%96%E7%A8%8B/vue2-%E8%B7%AF%E7%94%B1%E4%BC%A0%E5%8F%82%E9%A1%B5%E9%9D%A2%E5%88%B7%E6%96%B0%E5%90%8E%E5%8F%82%E6%95%B0%E7%B1%BB%E5%9E%8B%E6%94%B9%E5%8F%98/</guid>
        <description>DaMuWang https://damuwangs.github.io/posts/%E7%BC%96%E7%A8%8B/vue2-%E8%B7%AF%E7%94%B1%E4%BC%A0%E5%8F%82%E9%A1%B5%E9%9D%A2%E5%88%B7%E6%96%B0%E5%90%8E%E5%8F%82%E6%95%B0%E7%B1%BB%E5%9E%8B%E6%94%B9%E5%8F%98/ -&lt;h1 id=&#34;问题描述&#34;&gt;问题描述&lt;/h1&gt;
&lt;p&gt;今天发现一个小问题，列表通过路由传递的 number 类型参数，用 === 来判断&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Number&lt;/span&gt;(&lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.$route.query.type) &lt;span style=&#34;color:#ff79c6&#34;&gt;!==&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;结果发现有时候为 true ，有时候为 false&lt;/p&gt;
&lt;p&gt;进入页面，打印参数类型：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;number
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;刷新页面，打印参数类型：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;string
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;后来发现，原因是：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;vue-router 传参，不管是 params 形式还是query形式传参，在页面刷新后，params 和 query
对象中的属性所对应的属性值都会被浏览器自身强制转换为string类型
(这一点与浏览器的sessionStorage和localStorage存储对象，对象会被转为string类型，不谋而合)，破环原先属性值的数据类型&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;解决方案&#34;&gt;解决方案&lt;/h1&gt;
&lt;p&gt;将参数强制转为 Number类型：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Number&lt;/span&gt;(&lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.$route.query.type)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;总结&#34;&gt;总结&lt;/h1&gt;
&lt;p&gt;1、number数据类型：页面刷新后，其类型会转换为 string 类型。&lt;/p&gt;
&lt;p&gt;所以，在路由刷新页面，在使用时，不管页面是否刷新，都对传递过来的属性值做一次Number()转换；&lt;/p&gt;
&lt;p&gt;2、string数据类型：页面刷新后，其类型依然为string类型；&lt;/p&gt;
&lt;p&gt;3、boolean数据类型：页面刷新后，其类型会转换为string类型。&lt;/p&gt;
&lt;p&gt;所以，在路由刷新页面，在使用时，不管页面是否刷新，都对传递过来的属性值做一次Boolean()转换；&lt;/p&gt;
&lt;p&gt;4、undefined数据类型：页面刷新后，其类型依然为undefined类型；&lt;/p&gt;
&lt;p&gt;5、null数据类型：页面刷新后，其类型依然为null类型；&lt;/p&gt;
&lt;p&gt;6、object数据类型：页面刷新后，其类型会转换为string类型；&lt;/p&gt;
&lt;p&gt;所以，在路由跳转传参页面对属性值做一次JSON.stringify()预处理，然后在路由刷新页面对该值进行JSON.parse()转换。&lt;/p&gt;
&lt;h1 id=&#34;参考资料&#34;&gt;参考资料&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/HH18700418030/article/details/119576206&#34;&gt;vue 路由传参，页面刷新后参数类型改变_且听风吟的博客-CSDN博客&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
- https://damuwangs.github.io/posts/%E7%BC%96%E7%A8%8B/vue2-%E8%B7%AF%E7%94%B1%E4%BC%A0%E5%8F%82%E9%A1%B5%E9%9D%A2%E5%88%B7%E6%96%B0%E5%90%8E%E5%8F%82%E6%95%B0%E7%B1%BB%E5%9E%8B%E6%94%B9%E5%8F%98/ - </description>
        </item>
    
    
    
        <item>
        <title>GitHub个人访问令牌创建与使用</title>
        <link>https://damuwangs.github.io/posts/%E7%BC%96%E7%A8%8B/github%E4%B8%AA%E4%BA%BA%E8%AE%BF%E9%97%AE%E4%BB%A4%E7%89%8C%E5%88%9B%E5%BB%BA%E4%B8%8E%E4%BD%BF%E7%94%A8/</link>
        <pubDate>Mon, 27 Sep 2021 00:00:00 +0000</pubDate>
        
        <guid>https://damuwangs.github.io/posts/%E7%BC%96%E7%A8%8B/github%E4%B8%AA%E4%BA%BA%E8%AE%BF%E9%97%AE%E4%BB%A4%E7%89%8C%E5%88%9B%E5%BB%BA%E4%B8%8E%E4%BD%BF%E7%94%A8/</guid>
        <description>DaMuWang https://damuwangs.github.io/posts/%E7%BC%96%E7%A8%8B/github%E4%B8%AA%E4%BA%BA%E8%AE%BF%E9%97%AE%E4%BB%A4%E7%89%8C%E5%88%9B%E5%BB%BA%E4%B8%8E%E4%BD%BF%E7%94%A8/ -&lt;h1 id=&#34;前言&#34;&gt;前言&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://github.blog/2020-07-30-token-authentication-requirements-for-api-and-git-operations/&#34;&gt;2020 年 7 月&lt;/a&gt;，GitHub官方宣布对所有经过身份验证的 Git 操作，使用基于令牌的身份验证（例如，个人访问、OAuth 或 GitHub 应用程序安装令牌）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;从 2021 年 8 月 13 日开始，将在 GitHub.com 上对 Git 操作进行身份验证时不再接受帐户密码&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;因此对于开发人员来说，如果无法再用密码对 GitHub.com 的 Git 操作进行身份验证，则必须通过 HTTPS（推荐）或 SSH 密钥开始使用个人访问令牌，以避免中断&lt;/p&gt;
&lt;h1 id=&#34;创建个人访问令牌&#34;&gt;创建个人访问令牌&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;h5 id=&#34;登录github点击头像下拉选择settings选项&#34;&gt;登录GitHub点击头像，下拉选择settings选项&lt;/h5&gt;
&lt;p&gt;&lt;img src=&#34;https://damuwangs.github.io/img/GitHub%E4%B8%AA%E4%BA%BA%E8%AE%BF%E9%97%AE%E4%BB%A4%E7%89%8C%E5%88%9B%E5%BB%BA%E4%B8%8E%E4%BD%BF%E7%94%A8/Settings.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h5 id=&#34;点击developer-settings菜单进入开发者设置&#34;&gt;点击Developer settings菜单进入开发者设置&lt;/h5&gt;
&lt;p&gt;&lt;img src=&#34;https://damuwangs.github.io/img/GitHub%E4%B8%AA%E4%BA%BA%E8%AE%BF%E9%97%AE%E4%BB%A4%E7%89%8C%E5%88%9B%E5%BB%BA%E4%B8%8E%E4%BD%BF%E7%94%A8/DeveloperSettings.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h5 id=&#34;点击personaccesstokens菜单进入个人令牌界面&#34;&gt;点击PersonAccessTokens菜单进入个人令牌界面&lt;/h5&gt;
&lt;p&gt;&lt;img src=&#34;https://damuwangs.github.io/img/GitHub%E4%B8%AA%E4%BA%BA%E8%AE%BF%E9%97%AE%E4%BB%A4%E7%89%8C%E5%88%9B%E5%BB%BA%E4%B8%8E%E4%BD%BF%E7%94%A8/PersonalAccessTokens.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h5 id=&#34;点击generatenewtoken生成新的令牌&#34;&gt;点击GenerateNewToken生成新的令牌&lt;/h5&gt;
&lt;p&gt;&lt;img src=&#34;https://damuwangs.github.io/img/GitHub%E4%B8%AA%E4%BA%BA%E8%AE%BF%E9%97%AE%E4%BB%A4%E7%89%8C%E5%88%9B%E5%BB%BA%E4%B8%8E%E4%BD%BF%E7%94%A8/newToken.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;令牌过期使用git拉取代码会报一个鉴权失败的错误，无法推送代码&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;修改本地git账户配置&#34;&gt;修改本地Git账户配置&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;h5 id=&#34;进入控制面板-凭据管理器点击windows凭据&#34;&gt;进入控制面板-凭据管理器，点击Windows凭据&lt;/h5&gt;
&lt;p&gt;&lt;img src=&#34;https://damuwangs.github.io/img/GitHub%E4%B8%AA%E4%BA%BA%E8%AE%BF%E9%97%AE%E4%BB%A4%E7%89%8C%E5%88%9B%E5%BB%BA%E4%B8%8E%E4%BD%BF%E7%94%A8/Windows%E5%87%AD%E6%8D%AE.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h5 id=&#34;可以看到普通凭据列表有一堆地址找到github对应的普通凭据&#34;&gt;可以看到普通凭据列表有一堆地址，找到GitHub对应的普通凭据&lt;/h5&gt;
&lt;p&gt;&lt;img src=&#34;https://damuwangs.github.io/img/GitHub%E4%B8%AA%E4%BA%BA%E8%AE%BF%E9%97%AE%E4%BB%A4%E7%89%8C%E5%88%9B%E5%BB%BA%E4%B8%8E%E4%BD%BF%E7%94%A8/%E6%99%AE%E9%80%9A%E5%87%AD%E6%8D%AE.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;点击编辑设置密码为GitHub申请的个人令牌&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;参考资料&#34;&gt;参考资料&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;%5BGithub%E5%88%9B%E5%BB%BA%E4%B8%AA%E4%BA%BA%E8%AE%BF%E9%97%AE%E4%BB%A4%E7%89%8C%E6%95%99%E7%A8%8B_%E8%BF%99%E4%B9%9F%E5%A4%AA%E5%8D%97%E4%BA%86%E8%B6%B4%E7%9A%84%E5%8D%9A%E5%AE%A2-CSDN%E5%8D%9A%E5%AE%A2_github%E4%B8%AA%E4%BA%BA%E8%AE%BF%E9%97%AE%E4%BB%A4%E7%89%8C%5D(https://blog.csdn.net/qq_46941656/article/details/119737804)&#34;&gt;GitHub创建个人访问令牌教程&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
- https://damuwangs.github.io/posts/%E7%BC%96%E7%A8%8B/github%E4%B8%AA%E4%BA%BA%E8%AE%BF%E9%97%AE%E4%BB%A4%E7%89%8C%E5%88%9B%E5%BB%BA%E4%B8%8E%E4%BD%BF%E7%94%A8/ - </description>
        </item>
    
    
    
        <item>
        <title>JavaScript-正则</title>
        <link>https://damuwangs.github.io/posts/%E7%BC%96%E7%A8%8B/javascript-%E6%AD%A3%E5%88%99/</link>
        <pubDate>Thu, 23 Sep 2021 00:00:00 +0000</pubDate>
        
        <guid>https://damuwangs.github.io/posts/%E7%BC%96%E7%A8%8B/javascript-%E6%AD%A3%E5%88%99/</guid>
        <description>DaMuWang https://damuwangs.github.io/posts/%E7%BC%96%E7%A8%8B/javascript-%E6%AD%A3%E5%88%99/ -&lt;ul&gt;
&lt;li&gt;
&lt;h1 id=&#34;字符串匹配single-char&#34;&gt;字符串匹配single char&lt;/h1&gt;
&lt;h2 id=&#34;单个字符&#34;&gt;单个字符&lt;/h2&gt;
&lt;p&gt;最简单的正则表达式可以由简单的数字和字母组成，没有特殊的语义，纯粹就是一一对应的关系。如想在&amp;rsquo;apple&amp;rsquo;这个单词里找到‘a&amp;rsquo;这个字符，就直接用&lt;code&gt;/a/&lt;/code&gt;这个正则就可以了。&lt;/p&gt;
&lt;p&gt;但是如果想要匹配特殊字符的话，就要使用元字符&lt;code&gt;\&lt;/code&gt;， 它是转义字符字符，顾名思义，就是让其后续的字符失去其本来的含义。举个例子：&lt;/p&gt;
&lt;p&gt;我想匹配&lt;code&gt;*&lt;/code&gt;这个符号，由于&lt;code&gt;*&lt;/code&gt;这个符号本身是个特殊字符，所以我要利用转义元字符\来让它失去其本来的含义&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;/\*/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果本来这个字符不是特殊字符，使用转义符号就会让它拥有特殊的含义。我们常常需要匹配一些特殊字符，比如空格，制表符，回车，换行等, 而这些就需要我们使用转义字符来匹配&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;特殊字符&lt;/th&gt;
&lt;th&gt;正则表达式&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;换行符&lt;/td&gt;
&lt;td&gt;\n&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;换页符&lt;/td&gt;
&lt;td&gt;\f&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;回车符&lt;/td&gt;
&lt;td&gt;\r&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;空白符&lt;/td&gt;
&lt;td&gt;\s&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;制表符&lt;/td&gt;
&lt;td&gt;\t&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;垂直制表符&lt;/td&gt;
&lt;td&gt;\v&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;回退符&lt;/td&gt;
&lt;td&gt;[\b]&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// \s代表匹配空格，abc为匹配&amp;#39;abc&amp;#39;字符串
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; reg &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;/\sabc/&lt;/span&gt;
console.log(reg.test(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39; abc&amp;#39;&lt;/span&gt;)) &lt;span style=&#34;color:#6272a4&#34;&gt;// true
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;多个字符&#34;&gt;多个字符&lt;/h2&gt;
&lt;p&gt;单个字符的映射关系是一对一的，即正则表达式的被用来筛选匹配的字符只有一个。而这显然是不够的，只要引入集合区间和通配符的方式就可以实现一对多的匹配了。&lt;/p&gt;
&lt;p&gt;在正则表达式里，集合的定义方式是使用中括号&lt;code&gt;[&lt;/code&gt;和&lt;code&gt;]&lt;/code&gt;。如&lt;code&gt;/[123]/&lt;/code&gt;这个正则就能同时匹配1,2,3三个字符。那如果我想匹配所有的数字怎么办呢？从0写到9显然太过低效，所以元字符-就可以用来表示区间范围，利用&lt;code&gt;/[0-9]/&lt;/code&gt;就能匹配所有的数字, &lt;code&gt;/[a-z]/&lt;/code&gt;则可以匹配所有的英文小写字母。&lt;/p&gt;
&lt;p&gt;即便有了集合和区间的定义方式，如果要同时匹配多个字符也还是要一一列举，这是低效的。所以在正则表达式里衍生了一批用来同时匹配多个字符的简便正则表达式&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;匹配区间&lt;/th&gt;
&lt;th&gt;正则表达式&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;除了换行符之外的任何字符&lt;/td&gt;
&lt;td&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;单个数字, [0-9]&lt;/td&gt;
&lt;td&gt;\d&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;除了[0-9]&lt;/td&gt;
&lt;td&gt;\D&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;包括下划线在内的单个字符，[A-Za-z0-9_]&lt;/td&gt;
&lt;td&gt;\w&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;非单字字符&lt;/td&gt;
&lt;td&gt;\W&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;匹配空白字符,包括空格、制表符、换页符和换行符&lt;/td&gt;
&lt;td&gt;\s&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;匹配非空白字符&lt;/td&gt;
&lt;td&gt;\S&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// \d代表匹配0-9的数字，[a-z]为匹配所有小写字母
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; reg &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;/\d[a-z]/&lt;/span&gt;
console.log(reg.test(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;1a2b&amp;#39;&lt;/span&gt;)) &lt;span style=&#34;color:#6272a4&#34;&gt;// true
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;h1 id=&#34;数量匹配quantifiers&#34;&gt;数量匹配quantifiers&lt;/h1&gt;
&lt;p&gt;要实现多个字符的匹配我们只要多次循环，重复使用我们的之前的正则规则就可以了。根据循环次数的多与少，我可以分为0次，1次，多次，特定次&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;匹配规则&lt;/th&gt;
&lt;th&gt;元字符&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;0次或1次&lt;/td&gt;
&lt;td&gt;?&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0次或无数次&lt;/td&gt;
&lt;td&gt;*&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1次或无数次&lt;/td&gt;
&lt;td&gt;+&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;特定次数&lt;/td&gt;
&lt;td&gt;{x}, {min, max}&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;匹配一个或0个字符&#34;&gt;匹配一个或0个字符&lt;/h2&gt;
&lt;p&gt;元字符&lt;code&gt;?&lt;/code&gt;代表了匹配一个字符或0个字符&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// 第一个?前面的字符串可以舍弃，第二个?前面的字符串可拼1个或2个
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; reg &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;/colou?rs?/&lt;/span&gt;
console.log(reg.test(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;color&amp;#39;&lt;/span&gt;)) &lt;span style=&#34;color:#6272a4&#34;&gt;// true
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;console.log(reg.test(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;colors&amp;#39;&lt;/span&gt;)) &lt;span style=&#34;color:#6272a4&#34;&gt;// true
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;console.log(reg.test(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;colours&amp;#39;&lt;/span&gt;)) &lt;span style=&#34;color:#6272a4&#34;&gt;// true
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;console.log(reg.test(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;colour&amp;#39;&lt;/span&gt;)) &lt;span style=&#34;color:#6272a4&#34;&gt;// true
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;匹配0个或无数个字符&#34;&gt;匹配0个或无数个字符&lt;/h2&gt;
&lt;p&gt;元字符&lt;code&gt;*&lt;/code&gt;用来表示匹配0个字符或无数个字符。通常用来过滤某些可有可无的字符串&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// *表示不限制，appl可随意拼接最后一位，也可不拼
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; reg &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;/appl*/&lt;/span&gt;
console.log(reg.test(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;appl&amp;#39;&lt;/span&gt;)) &lt;span style=&#34;color:#6272a4&#34;&gt;// true
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;console.log(reg.test(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;apple&amp;#39;&lt;/span&gt;)) &lt;span style=&#34;color:#6272a4&#34;&gt;// true
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;元字符&lt;code&gt;+&lt;/code&gt;适用于要匹配同个字符出现1次或多次的情况&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// +限制apple必须出现1次或多次
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; reg &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;/apple+/&lt;/span&gt;
console.log(reg.test(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;appl&amp;#39;&lt;/span&gt;)) &lt;span style=&#34;color:#6272a4&#34;&gt;// false
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;console.log(reg.test(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;apple&amp;#39;&lt;/span&gt;)) &lt;span style=&#34;color:#6272a4&#34;&gt;// true
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;匹配特定的重复次数&#34;&gt;匹配特定的重复次数&lt;/h2&gt;
&lt;p&gt;在某些情况下，我们需要匹配特定的重复次数，元字符&lt;code&gt;{&lt;/code&gt;和&lt;code&gt;}&lt;/code&gt;用来给重复匹配设置精确的区间范围。如&amp;rsquo;a&amp;rsquo;我想匹配3次,那么我就使用&lt;code&gt;/a{3}/&lt;/code&gt;这个正则，或者说&amp;rsquo;a&amp;rsquo;我想匹配至少两次就是用&lt;code&gt;/a{2,}/&lt;/code&gt;这个正则。&lt;/p&gt;
&lt;p&gt;以下是完整的语法：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt; {x}&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; x次
&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt; {min, max}： 介于min次到max次之间
&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt; {min, }&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; 至少min次
&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt; {&lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;, max}： 至多max次
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// 限制a必须重复3次到5次，包括3和5
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; reg &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;/a{3,5}/&lt;/span&gt;
console.log(reg.test(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;aaaaa&amp;#39;&lt;/span&gt;)) &lt;span style=&#34;color:#6272a4&#34;&gt;// true
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;h1 id=&#34;位置边界匹配position&#34;&gt;位置边界匹配position&lt;/h1&gt;
&lt;p&gt;在长文本字符串查找过程中，我们常常需要限制查询的位置。比如我只想在单词的开头结尾查找&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;边界和标志&lt;/th&gt;
&lt;th&gt;正则表达式&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;单词边界&lt;/td&gt;
&lt;td&gt;\b&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;非单词边界&lt;/td&gt;
&lt;td&gt;\B&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;字符串开头&lt;/td&gt;
&lt;td&gt;^&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;字符串结尾&lt;/td&gt;
&lt;td&gt;$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;多行模式&lt;/td&gt;
&lt;td&gt;m标志&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;忽略大小写&lt;/td&gt;
&lt;td&gt;i标志&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;全局模式&lt;/td&gt;
&lt;td&gt;g标志&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;单词边界&#34;&gt;单词边界&lt;/h2&gt;
&lt;p&gt;单词是构成句子和文章的基本单位，一个常见的使用场景是把文章或句子中的特定单词找出来&lt;/p&gt;
&lt;p&gt;我想找到&lt;code&gt;cat&lt;/code&gt;这个单词，但是如果只是使用&lt;code&gt;/cat/&lt;/code&gt;这个正则，就会同时匹配到&lt;code&gt;cat&lt;/code&gt;和&lt;code&gt;scattered&lt;/code&gt;这两处文本。这时候我们就需要使用边界正则表达式&lt;code&gt;\b&lt;/code&gt;，其中b是boundary的首字母。在正则引擎里它其实匹配的是能构成单词的字符(\w)和不能构成单词的字符(\W)中间的那个位置。&lt;/p&gt;
&lt;p&gt;上面的例子改写成&lt;code&gt;/\bcat\b/&lt;/code&gt;这样就能匹配到&lt;code&gt;cat&lt;/code&gt;这个单词了&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// 包含cat都会被匹配到
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; reg1 &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;/cat/&lt;/span&gt;
console.log(reg1.test(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;cat&amp;#39;&lt;/span&gt;)) &lt;span style=&#34;color:#6272a4&#34;&gt;// true
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;console.log(reg1.test(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;scattered&amp;#39;&lt;/span&gt;)) &lt;span style=&#34;color:#6272a4&#34;&gt;// true
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  
&lt;span style=&#34;color:#6272a4&#34;&gt;// \b 设置了单词边界，必须为cat才能被匹配到,因此scattered会返回false
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; reg2 &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;/\bcat\b/&lt;/span&gt;
console.log(reg2.test(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;cat&amp;#39;&lt;/span&gt;)) &lt;span style=&#34;color:#6272a4&#34;&gt;// true
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;console.log(reg2.test(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;scattered&amp;#39;&lt;/span&gt;)) &lt;span style=&#34;color:#6272a4&#34;&gt;// false
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;字符串边界&#34;&gt;字符串边界&lt;/h2&gt;
&lt;p&gt;元字符&lt;code&gt;^&lt;/code&gt;用来匹配字符串的开头。而元字符&lt;code&gt;$&lt;/code&gt;用来匹配字符串的末尾。注意的是在长文本里，如果要排除换行符的干扰，我们要使用多行模式&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// 从I开始0结束，匹配&amp;#39;I am scq000&amp;#39;,忽略大小写，忽略换行符
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; reg1 &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;/^I am scq000$/m&lt;/span&gt;
console.log(reg1.test(&lt;span style=&#34;color:#f1fa8c&#34;&gt;`I am scq000
&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;                       I am scq000
&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;                       I AM SCQ000`&lt;/span&gt;)) &lt;span style=&#34;color:#6272a4&#34;&gt;// true
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;h1 id=&#34;分组匹配&#34;&gt;分组匹配&lt;/h1&gt;
&lt;h2 id=&#34;什么是分组&#34;&gt;什么是分组&lt;/h2&gt;
&lt;p&gt;通俗来说，我理解的分组就是在正则表达式中用（）包起来的内容代表了一个分组&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// 匹配两位数字
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; reg &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;/(\d{2})/&lt;/span&gt;
console.log(reg.test(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;12&amp;#39;&lt;/span&gt;)) &lt;span style=&#34;color:#6272a4&#34;&gt;// true
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里reg中的&lt;code&gt;(/d{2})&lt;/code&gt;就表示一个分组，匹配两位数字&lt;/p&gt;
&lt;h2 id=&#34;分组内容的的形式&#34;&gt;分组内容的的形式&lt;/h2&gt;
&lt;p&gt;一个分组中可以像上面这样有一个具体的表达式，这样可以优雅地表达一个重复的字符串&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// 匹配字符串&amp;#39;hahaha&amp;#39;
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; reg1 &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;/hahaha/&lt;/span&gt;
&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; reg2 &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;/(ha){3}/&lt;/span&gt;
console.log(reg1.test(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;hahaha&amp;#39;&lt;/span&gt;)) &lt;span style=&#34;color:#6272a4&#34;&gt;// true
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;console.log(reg2.test(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;hahaha&amp;#39;&lt;/span&gt;)) &lt;span style=&#34;color:#6272a4&#34;&gt;// true
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这两个表达式是等效的，但有了分组之后可以更急简洁&lt;/p&gt;
&lt;p&gt;分组中还可以有多个候选表达式&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// 匹配I come from hunan/hubei/zhejiang
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; reg &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;/I come from (hunan|hubei|zhejiang)/&lt;/span&gt;
console.log(reg.test(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;I come from hunan&amp;#39;&lt;/span&gt;)) &lt;span style=&#34;color:#6272a4&#34;&gt;// true
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;console.log(reg.test(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;I come from hubei&amp;#39;&lt;/span&gt;)) &lt;span style=&#34;color:#6272a4&#34;&gt;// true
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;也就是说在这个分组中，通过|隔开的几个候选表达式是并列的关系，所以可以把这个|理解为或的意思&lt;/p&gt;
&lt;h2 id=&#34;分组的分类&#34;&gt;分组的分类&lt;/h2&gt;
&lt;p&gt;分组有四种类型，我们使用的比较多的都是捕获型分组，只有这种分组才会暂存匹配到的串&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;捕获型&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;非捕获型&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;正向前瞻型&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;反向前瞻型&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;分组的应用&#34;&gt;分组的应用&lt;/h2&gt;
&lt;h3 id=&#34;1-捕获与引用&#34;&gt;1. 捕获与引用&lt;/h3&gt;
&lt;p&gt;被正则表达式捕获(匹配)到的字符串会被暂存起来，其中，由分组捕获到的字符串会从1开始编号，于是我们可以引用这些字符串&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; reg &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;/(\d{4})-(\d{2})-(\d{2})/&lt;/span&gt;
&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; dateStr &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;2018-04-18&amp;#39;&lt;/span&gt;
reg.test(dateStr)  &lt;span style=&#34;color:#6272a4&#34;&gt;//true
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;console.log(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;RegExp&lt;/span&gt;.$1) &lt;span style=&#34;color:#6272a4&#34;&gt;// 2018
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;console.log(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;RegExp&lt;/span&gt;.$2) &lt;span style=&#34;color:#6272a4&#34;&gt;// 04
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;console.log(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;RegExp&lt;/span&gt;.$3) &lt;span style=&#34;color:#6272a4&#34;&gt;// 18
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;2-结合replace方法做字符串自定义替换&#34;&gt;2. 结合replace方法做字符串自定义替换&lt;/h3&gt;
&lt;p&gt;String.prototype.replace方法的传参中可以直接引用被捕获的串，比如我们想开发中常见的日期格式替换,例如后台给你返回了一个2018/04/18,让你用正则替换为2018-04-18，就可以利用分组&lt;/p&gt;
&lt;p&gt;这里需要注意的是&lt;code&gt;/&lt;/code&gt;是需要用&lt;code&gt;\&lt;/code&gt;转义的&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; dateStr &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;2018/04/18&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; reg &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;/(\d{4})\/(\d{2})\/(\d{2})/&lt;/span&gt;;
dateStr &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; dateStr.replace(reg, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;$1-$2-$3&amp;#39;&lt;/span&gt;)
console.log(dateStr) &lt;span style=&#34;color:#6272a4&#34;&gt;// 2018-04-18
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;3-反向引用&#34;&gt;3. 反向引用&lt;/h3&gt;
&lt;p&gt;正则表达式里也能进行引用，这称为反向引用&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// \w{3}表示任意的三位字母或数字,\1表示引用第1个分组，这里代表前三个字符
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; reg &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;/(\w{3}) is \1/&lt;/span&gt;
console.log(reg.test(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;kid is kid&amp;#39;&lt;/span&gt;)) &lt;span style=&#34;color:#6272a4&#34;&gt;// true
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;console.log(reg.test(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;dik is dik&amp;#39;&lt;/span&gt;)) &lt;span style=&#34;color:#6272a4&#34;&gt;// true
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;console.log(reg.test(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;kid is dik&amp;#39;&lt;/span&gt;)) &lt;span style=&#34;color:#6272a4&#34;&gt;// false
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;console.log(reg.test(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;dik is kid&amp;#39;&lt;/span&gt;)) &lt;span style=&#34;color:#6272a4&#34;&gt;// false
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果引用了越界或者不存在的编号的话，就被被解析为普通的表达式&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// \w{3}表示任意的三位字母或数字,\1表示引用第6个分组，这里第6个分组不存在，所以解析成了字符串&amp;#39;\6&amp;#39;
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; reg &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;/(\w{3}) is \6/&lt;/span&gt;
console.log(reg.test(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;kid is kid&amp;#39;&lt;/span&gt;)) &lt;span style=&#34;color:#6272a4&#34;&gt;// false
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;console.log(reg.test(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;kid is \6&amp;#39;&lt;/span&gt;)) &lt;span style=&#34;color:#6272a4&#34;&gt;// true
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;4-非捕获型分组&#34;&gt;4. 非捕获型分组&lt;/h3&gt;
&lt;p&gt;有的时候只是为了分组并不需要捕获的情况下就可以使用非捕获型分组&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; reg &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;/(?:\d{4})-(\d{2})-(\d{2})/&lt;/span&gt;
&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; date &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;2012-12-21&amp;#39;&lt;/span&gt;
reg.test(date)
console.log(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;RegExp&lt;/span&gt;.$1) &lt;span style=&#34;color:#6272a4&#34;&gt;// 12
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;console.log(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;RegExp&lt;/span&gt;.$2) &lt;span style=&#34;color:#6272a4&#34;&gt;// 21
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;5-正向与反向前瞻型分组&#34;&gt;5. 正向与反向前瞻型分组&lt;/h3&gt;
&lt;p&gt;正向前瞻型分组：你站在原地往前看，如果前方是指定的东西就返回true，否则为false&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; reg &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;/kid is a (?=doubi)/&lt;/span&gt;
console.log(reg.test(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;kid is a doubi&amp;#39;&lt;/span&gt;)) &lt;span style=&#34;color:#6272a4&#34;&gt;// true
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;console.log(reg.test(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;kid is a shabi&amp;#39;&lt;/span&gt;)) &lt;span style=&#34;color:#6272a4&#34;&gt;// false
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;反向前瞻型分组：你站在原地往前看，如果前方不是指定的东西则返回true，如果是则返回false&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; reg &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;/kid is a (?!doubi)/&lt;/span&gt;
console.log(reg.test(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;kid is a doubi&amp;#39;&lt;/span&gt;)) &lt;span style=&#34;color:#6272a4&#34;&gt;// false
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;console.log(reg.test(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;kid is a shabi&amp;#39;&lt;/span&gt;)) &lt;span style=&#34;color:#6272a4&#34;&gt;// true
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;6-前瞻型分组和非捕获型分组的区别&#34;&gt;6. 前瞻型分组和非捕获型分组的区别&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; reg, str &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;kid is a doubi&amp;#34;&lt;/span&gt;;
reg &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;/(kid is a (?:doubi))/&lt;/span&gt;
reg.test(str)
console.log(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;RegExp&lt;/span&gt;.$1) &lt;span style=&#34;color:#6272a4&#34;&gt;// kid is a doubi
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  
reg &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;/(kid is a (?=doubi))/&lt;/span&gt;
reg.test(str)
console.log(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;RegExp&lt;/span&gt;.$1) &lt;span style=&#34;color:#6272a4&#34;&gt;// kis is a
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;也就是说非捕获型分组匹配到的字符串任然会被外层分组匹配到，而前瞻型不会&lt;/p&gt;
&lt;p&gt;如果你希望在外层分组中不匹配里面分组的值的话就可以使用前瞻型分组了&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;参考资料&#34;&gt;参考资料&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://jex.im/regulex/#!flags=&amp;amp;re=%5E(a%7Cb)*%3F%24&#34;&gt;在线正则工具&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions&#34;&gt;正则表达式中的特殊字符&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://juejin.cn/post/6844903845227659271&#34;&gt;正则表达式不要背&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/wancheng7/p/8906015.html&#34;&gt;JS正则表达式的分组匹配&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/allen2333/p/9835654.html&#34;&gt;正则表达式 - (?!), (?:), (?=)&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
- https://damuwangs.github.io/posts/%E7%BC%96%E7%A8%8B/javascript-%E6%AD%A3%E5%88%99/ - </description>
        </item>
    
    
  </channel>
</rss> 